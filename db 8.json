{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"faba0605c83466b66abbc034688559f4bc03c7ea","modified":1653971666782},{"_id":"source/404/index.md","hash":"73751f2936faa4326ce922bb168733b22e5c00fa","modified":1653798473418},{"_id":"source/categories/index.md","hash":"cfd06b397ade247f2181acdf392037b874eeb696","modified":1653900034105},{"_id":"source/tags/index.md","hash":"1c1d62c269f160fadde13e9167902943c1ef5614","modified":1653900548972},{"_id":"source/about/index.md","hash":"c24cce0ca0b8920918f603acdb8c4d40a911a6e7","modified":1653798028086},{"_id":"source/_posts/.DS_Store","hash":"e0649762bd5fac7a1b9b2c8ab99a0dfc219a4fcb","modified":1653971666780},{"_id":"source/_posts/AQS.md","hash":"4dfd237c617e8af1b6a593e70161caa5c4cbc3e0","modified":1653985048215},{"_id":"source/_posts/CountDownLatch和CycilBarrier.md","hash":"4d50f4a48f4db2bde7f7813d45b9a621395a101c","modified":1653981291967},{"_id":"source/_posts/AtomInteger与LongAdder.md","hash":"f0572f36953f320109a1507c438c37c993e9a833","modified":1653959529774},{"_id":"source/_posts/Docker-网络原理与资源隔离.md","hash":"fc9bfdc5de9cde8b13448da2c7f4bf2ea498abe0","modified":1654332175468},{"_id":"source/_posts/Hexo-图片.md","hash":"5b16f76dbffb1ffa3642bc0e29b96f7fc7f7c7a3","modified":1653957430296},{"_id":"source/_posts/How-to-use-hexo.md","hash":"87e58c0f84edd54ece59255b02cb5f227182fb84","modified":1653905295201},{"_id":"source/_posts/Java-IO.md","hash":"9980b17a63ab4ce44f5cfbd0b4060fd88b4a30db","modified":1653958233591},{"_id":"source/_posts/Java-基础.md","hash":"bbe6a382d098fd10421ae0caf0a9531aa0a5c4cd","modified":1653901228742},{"_id":"source/_posts/MySQL命令explain.md","hash":"ea11edc828f065dac286c0fceaa640201d47894c","modified":1654339846079},{"_id":"source/_posts/Kubernetes基础概念.md","hash":"feff1712d76fec441ab60b23b19f0949ac9a069a","modified":1654146423224},{"_id":"source/_posts/RAFT算法.md","hash":"0ac916699ee46150c415e81b17b4c60b5d7b912c","modified":1654047830620},{"_id":"source/_posts/RESTful.md","hash":"288be76fcab52b24496811972b88bfe9aa87d6d4","modified":1654047363159},{"_id":"source/_posts/Redis数据结构底层原.md","hash":"af6d290ad3274246d123447cdad006a14316495e","modified":1654401592683},{"_id":"source/_posts/Sql-面试.md","hash":"36137de89906b1f862727469764c30973e7182fb","modified":1654337443946},{"_id":"source/_posts/Star-法则.md","hash":"aa02e60a9a29ee42e964796a1bb50b2a8d3fa83b","modified":1654332095399},{"_id":"source/_posts/Synchronized.md","hash":"e1d37c6fa32efdb62828a5dd44344a12c2dbfb26","modified":1653962339365},{"_id":"source/_posts/TCP半连接队列和全连接队列溢出.md","hash":"568e1fcf780c030dfcb3b2c54132c872e01e7132","modified":1654343461224},{"_id":"source/_posts/ThreadLoacl.md","hash":"00920290c4328d2034834ea0d4d709d4ac67a974","modified":1653971681927},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1653786132477},{"_id":"source/_posts/不同路径.md","hash":"85e8132f6f89f64d7476536bee826f53b709b3d3","modified":1654259060387},{"_id":"source/_posts/乘积最大子数组.md","hash":"dafad6f425d23068dce99675d13b40eaa6ba5fbe","modified":1654313487174},{"_id":"source/_posts/二叉搜索树与双向链表.md","hash":"fa87814d35ad8ada6e1efe13db43ce009d3a2e61","modified":1654567955618},{"_id":"source/_posts/二叉树的直径.md","hash":"1639c2f0e94b5998eb428aa91782a1d7fd25a4bd","modified":1654157312107},{"_id":"source/_posts/从前序与中序遍历序列构造二叉树.md","hash":"4363092df63a38bd779a44c60593b18f2f15e197","modified":1653993937798},{"_id":"source/_posts/分布式概念.md","hash":"46724dc1910b52087ebacd161044c4d950164207","modified":1654325512344},{"_id":"source/_posts/删除排序链表中的重复元素.md","hash":"2744fe5dcf8bf2d5e724d01f1e169bcee3f330c0","modified":1654239149170},{"_id":"source/_posts/在排序数组中查找元素的第一个和最后一个位置.md","hash":"baee81f32c8d657e523debdbffd6088ef51c2708","modified":1654230374617},{"_id":"source/_posts/基本计算器II.md","hash":"d6ad08dd7b92628279bec373c75ee4ef2f0e8087","modified":1654405904643},{"_id":"source/_posts/基础数据结构.md","hash":"7994118cb57bd798ed2c76f9e62638556da45e6e","modified":1654400033575},{"_id":"source/_posts/复制带随机指针的链表.md","hash":"b6e9f908c8208834e4c84c8a4aaec273e36a0f7a","modified":1654563916591},{"_id":"source/_posts/字符串解码.md","hash":"310d99660605343a73452a1222914a66659d7291","modified":1654312251657},{"_id":"source/_posts/岛屿的最大面积.md","hash":"2ee10e1295d464fc68d2e20d2e2cb43be4eb3cbd","modified":1654261441930},{"_id":"source/_posts/打家劫舍.md","hash":"cf5d1e1cf1a3eb6e337547a39e3867ac95540e50","modified":1654417052844},{"_id":"source/_posts/旋转图像.md","hash":"4d7f537976a4898dbab76425be4873e0175e539d","modified":1654221938203},{"_id":"source/_posts/最小覆盖子串.md","hash":"2af43bd0ca653e13513fab9c50f39467806143b6","modified":1654091828329},{"_id":"source/_posts/最小路径和.md","hash":"01beb8cdd42a08eff1c0325fb9361da07720e510","modified":1654160046325},{"_id":"source/_posts/最长有效括号.md","hash":"a2cb82952fbea5552c8a2c8ce3d755870cfaf8f3","modified":1654090076407},{"_id":"source/_posts/最长重复子数组.md","hash":"725c49659eb07910ce3adffca0a4861419beb32b","modified":1654229247132},{"_id":"source/_posts/最长连续序列.md","hash":"f318db87982d107dfc33c7cc0ba70f64cf0bdfe3","modified":1654260077005},{"_id":"source/_posts/死锁.md","hash":"b4597df1b7f8c01e0f191eaf0b7112b77c691513","modified":1653958699239},{"_id":"source/_posts/滑动窗口最大值.md","hash":"0c85a21e1a333c839485d5fa9eb28230da2b3ee9","modified":1653996815266},{"_id":"source/_posts/线程池.md","hash":"6c9ced0bfe537fd1fa977cf0098f043b4ef38b53","modified":1653968254267},{"_id":"source/_posts/组合总和.md","hash":"17c838e59b3c074a6a96c5e390c5f5980f0ca927","modified":1654223376371},{"_id":"source/_posts/结构化-半结构化和非结构化数据.md","hash":"bee249d9ba74aacd328bc1d00e350eead723ad61","modified":1654341206336},{"_id":"source/_posts/路径总和-II.md","hash":"cbe4c1257905e59dfad4651d04613bc8365f2e9d","modified":1654224957102},{"_id":"source/_posts/英文面试自我介绍.md","hash":"f60bb9fd87e0c4a0093615b21199a8ee9931f7b2","modified":1654398641301},{"_id":"source/_posts/长度最小的子数组.md","hash":"8ebb142f5741473da4408a2bb7f501ab6e236d63","modified":1654566363710},{"_id":"source/_posts/零钱兑换.md","hash":"e59ce373fc98058827c639ef84677660c578e7bf","modified":1654090076306},{"_id":"source/_posts/项目介绍之亮点与难点.md","hash":"600edecb594a29b8b7c4cfaad8209ddf5b4d5e0b","modified":1653901399647},{"_id":"source/_posts/验证二叉搜索树.md","hash":"e04e6c9faeeebc79eb4c6c14ecad658521905bfd","modified":1654136805986},{"_id":"source/_posts/ThreadLoacl/640.jpeg","hash":"8127f2e21aadd24a255a1dc83586fb45212faddd","modified":1653971642449},{"_id":"source/_posts/不同路径/robot_maze.png","hash":"4b426c3adb98bd889d6b6c9b80ce0229a2dc0778","modified":1654258573422},{"_id":"source/_posts/Redis数据结构底层原/listpack节点.png","hash":"5d6de5d8060c4a57888dbac669f6b9091ae51bfe","modified":1654401142669},{"_id":"source/_posts/Redis数据结构底层原/quicklist.png","hash":"6876f800ee4e28f37de26e31a68512175f80c12f","modified":1654400565034},{"_id":"source/_posts/Redis数据结构底层原/压缩列表节点结构.png","hash":"e2d704e0fc43afa5a3ec00cc98696ffaadd75db7","modified":1654401266920},{"_id":"source/_posts/Redis数据结构底层原/哈希表结构.png","hash":"ac7438cf8d9e4d9385077246e9347ad95b569f5c","modified":1654401321920},{"_id":"source/_posts/二叉搜索树与双向链表/bstdlloriginalbst.png","hash":"6d62209dab3863e0b800c4001e8d7a1f73b0d297","modified":1654567678394},{"_id":"source/_posts/二叉搜索树与双向链表/bstdllreturndll.png","hash":"657e2e48aad8c03f7542d601cd3293ab4159d595","modified":1654567681626},{"_id":"source/_posts/删除排序链表中的重复元素/list1.jpg","hash":"1259812f50665b4ae19693c17e41cc36187cbf74","modified":1654238980415},{"_id":"source/_posts/旋转图像/mat1.jpg","hash":"909611016f48da823bed5ebfffb3a1862acf7093","modified":1654221524449},{"_id":"source/_posts/英文面试自我介绍/v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg.png","hash":"8da9e2fd3697a68d0fd4317b1a5a6239b2f00158","modified":1654398555074},{"_id":"source/_posts/路径总和-II/pathsumii1.jpg","hash":"7747e8c542f6606b82ff7d0bdc122cb6c48047aa","modified":1654152783333},{"_id":"source/_posts/验证二叉搜索树/tree1.jpg","hash":"caeb731bf33ae5af2eb1dad04a87563c9519d4fb","modified":1654135334861},{"_id":"source/_posts/Kubernetes基础概念/components-of-kubernetes.svg","hash":"2475489eaf20163ec0f54ddc1d92aa8d4c87c96b","modified":1654139669033},{"_id":"source/_posts/TCP半连接队列和全连接队列溢出/3d05f574867b70d1134e685e5f5ac137.jpg","hash":"84ba3a54ea5945a84f1cf08fd4f42d02e4a9a676","modified":1654343092456},{"_id":"source/_posts/Redis数据结构底层原/redis数据结构-lastnew.png","hash":"df613a953d247ae44ee0e7169d645c45542face0","modified":1654398956276},{"_id":"source/_posts/Redis数据结构底层原/键值对结构.png","hash":"d441182e9eff9e7a8e23ae35e65efd3a4cc16182","modified":1654399433551},{"_id":"source/_posts/Redis数据结构底层原/redis全景图.png","hash":"bda04331f3afa42a44856296b06390bc947dec4f","modified":1654399713549},{"_id":"source/_posts/岛屿的最大面积/maxarea1-grid.jpg","hash":"19d3a850bc97a2db82cfd8c385e9b430e61f1d9a","modified":1654261249895},{"_id":"source/_posts/Hexo-图片/20200707101943_hCjji.jpeg","hash":"658b53ae28379a44889bbd55c9a7f079a77bb3b9","modified":1653924518195},{"_id":"source/_posts/ThreadLoacl/image-20220531114220950.png","hash":"293074650194def2700bfcc08e92331ee2c6aac1","modified":1653968540950},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1627608806000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1627608806000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1627608806000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1627608806000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1627608806000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1627608806000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1627608806000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1627608806000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1627608806000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1627608806000},{"_id":"themes/next/_config.yml","hash":"4916074ee0232d22fb78cffac7a3adb0264e5e5b","modified":1654759761567},{"_id":"themes/next/package.json","hash":"fcb1963192a2b93388b581b339a31900784adcfc","modified":1653903394585},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1627608806000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1627608806000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1627608806000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1627608806000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1627608806000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1627608806000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1627608806000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1627608806000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1627608806000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1627608806000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1627608806000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1627608806000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1627608806000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1627608806000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1627608806000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1627608806000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1627608806000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1627608806000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1627608806000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1627608806000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1627608806000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1627608806000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1627608806000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1627608806000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1627608806000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1627608806000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1627608806000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1627608806000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1627608806000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1627608806000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1627608806000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1627608806000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1627608806000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1627608806000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1627608806000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1627608806000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1627608806000},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1627608806000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1627608806000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1627608806000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1627608806000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1627608806000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1627608806000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1627608806000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1627608806000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1627608806000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1627608806000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1627608806000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1627608806000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1627608806000},{"_id":"themes/next/source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1653900378401},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1627608806000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1627608806000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1627608806000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1627608806000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1627608806000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1627608806000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1627608806000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1627608806000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1627608806000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1627608806000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1627608806000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1627608806000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1627608806000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1627608806000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1627608806000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1627608806000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1627608806000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1627608806000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1627608806000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1627608806000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1627608806000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1627608806000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1627608806000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1627608806000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1627608806000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1627608806000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1627608806000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1627608806000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1627608806000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1627608806000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1627608806000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1627608806000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1627608806000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1627608806000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1627608806000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1627608806000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1627608806000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1627608806000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1627608806000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1627608806000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1627608806000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1627608806000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1627608806000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1627608806000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1627608806000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1627608806000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1627608806000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1627608806000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1627608806000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1627608806000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1627608806000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1627608806000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1627608806000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1627608806000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1627608806000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1627608806000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1627608806000},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1627608806000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1627608806000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1627608806000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1627608806000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1627608806000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1627608806000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1627608806000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1627608806000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1627608806000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1627608806000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1627608806000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1627608806000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1627608806000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1627608806000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1627608806000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1627608806000},{"_id":"themes/next/package-lock.json","hash":"784fc41172aa9b71ba5cff73f5bbaa5a08f8c590","modified":1653903394584},{"_id":"source/_posts/英文面试自我介绍/v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r.jpg","hash":"b59fb0b1a3fd52d6de6bc98d666c331d705949a2","modified":1654398508147},{"_id":"public/search.xml","hash":"7ba0657dc298cb8b726866c7f65707e4dc5cbf5d","modified":1654760483479},{"_id":"public/404/index.html","hash":"78a20bc72e2a20b6ab89ad4a5de3332dadc3c6f0","modified":1654760483479},{"_id":"public/categories/index.html","hash":"352efc43c279a80e74ee7eca2bd3c7bae6b97349","modified":1654760483479},{"_id":"public/tags/index.html","hash":"7451865084a6ed6fc9f0036c4cfdac98d18302d8","modified":1654760483479},{"_id":"public/about/index.html","hash":"7726c4b244ac14821b328401484dc4cbc9dba996","modified":1654760483479},{"_id":"public/2022/06/05/基础数据结构/index.html","hash":"f4ebc3fb2ee49bb17e85215f0bbd6a77e2677278","modified":1654760483479},{"_id":"public/2022/06/04/Star-法则/index.html","hash":"ad6f83a65e7b821ed55267e6fc1648097001baed","modified":1654760483479},{"_id":"public/2022/06/04/分布式概念/index.html","hash":"8375007b51a2f116660ab47859790bae6c7619b9","modified":1654760483479},{"_id":"public/2022/06/04/Docker-网络原理与资源隔离/index.html","hash":"64651cb866291d8dcd5b80e37ff10e8836a3beec","modified":1654760483479},{"_id":"public/2022/06/01/最小覆盖子串/index.html","hash":"e0b2ab45ef29e7c3996841b4dd32882c47db5e12","modified":1654760483479},{"_id":"public/2022/06/01/RAFT算法/index.html","hash":"bd8ba4cac065fc51280cf9ea96dbb37f795f6a8c","modified":1654760483479},{"_id":"public/2022/05/31/CountDownLatch和CycilBarrier/index.html","hash":"f67be94cf7d90c51f4e909be4d153b891d8938d2","modified":1654760483479},{"_id":"public/2022/05/31/ThreadLoacl/index.html","hash":"cbf5033ec098b26ac7e6ad3627a736aff9b83d79","modified":1654760483479},{"_id":"public/2022/05/31/线程池/index.html","hash":"e28b46ab6c18f60cb60c518a6e29a5cd6ea36848","modified":1654760483479},{"_id":"public/2022/05/31/AtomInteger与LongAdder/index.html","hash":"426d1be74ca48332d942a6c05fcddb6af08b9bf9","modified":1654760483479},{"_id":"public/2022/05/31/死锁/index.html","hash":"58db9d1b1df94044b0ecad85cdd1acf82e5393fe","modified":1654760483479},{"_id":"public/2022/05/31/Java-IO/index.html","hash":"a3f7854355a6cda641420995a7581c8408e78c02","modified":1654760483479},{"_id":"public/2022/05/30/Hexo-图片/index.html","hash":"5db7a3d74b5593f31f89ce6a15b2a6c4f4a3538f","modified":1654760483479},{"_id":"public/2022/05/29/How-to-use-hexo/index.html","hash":"f4e5f260deb67c3e269a9b42da8ef054240e33c1","modified":1654760483479},{"_id":"public/2022/05/29/hello-world/index.html","hash":"58e5ecb1bd9971689d072ffbb18e12b4aa20a98c","modified":1654760483479},{"_id":"public/archives/index.html","hash":"42818f699eaf54b5158f9fdfecc25cf9e30d8f74","modified":1654760483479},{"_id":"public/archives/page/2/index.html","hash":"d396f6ff5a751301c6d67069b4fe55fa7a786a13","modified":1654760483479},{"_id":"public/archives/page/3/index.html","hash":"54446f5f4065809eedfa483d47947f5cbe0c3689","modified":1654760483479},{"_id":"public/archives/page/4/index.html","hash":"a2c86e86a8dcedb13d1b364deae483589c054199","modified":1654760483479},{"_id":"public/archives/page/5/index.html","hash":"35ff3d254f118eb2052ff3efe363758162d0a397","modified":1654760483479},{"_id":"public/archives/2022/index.html","hash":"4025d6b7d0a6162cd849ac1391ae751bafd210fb","modified":1654760483479},{"_id":"public/archives/2022/page/2/index.html","hash":"e81d85df4b5841dff6260587ddd6753c4ef6cb57","modified":1654760483479},{"_id":"public/archives/2022/page/3/index.html","hash":"8c5bb978a366367845eabfe8a7d98f432a0be65f","modified":1654760483479},{"_id":"public/archives/2022/page/4/index.html","hash":"cea71005bc36bda586b81a0f91c71f1e2f0e508c","modified":1654760483479},{"_id":"public/archives/2022/page/5/index.html","hash":"8885eebe95c0b0f33df539813f8db16f7d9dc00d","modified":1654760483479},{"_id":"public/archives/2022/05/index.html","hash":"9495f18ed82ee40cb54ed1b03f64c1c6c3f7b5ca","modified":1654760483479},{"_id":"public/archives/2022/05/page/2/index.html","hash":"690b2ca1b9aef9aa6833ae9e054413a7300bc943","modified":1654760483479},{"_id":"public/archives/2022/06/index.html","hash":"ed826a640c96d91566e38ac9788685852a6181a5","modified":1654760483479},{"_id":"public/archives/2022/06/page/2/index.html","hash":"c0d61d76fe047e53abfa214f0aa1c1be5057046f","modified":1654760483479},{"_id":"public/archives/2022/06/page/3/index.html","hash":"87623382b50dcb2d224b5f12583acb230d17dd67","modified":1654760483479},{"_id":"public/archives/2022/06/page/4/index.html","hash":"8e5232d982ed9ef388914ab8d3a52ed22bd8f10d","modified":1654760483479},{"_id":"public/tags/AQS/index.html","hash":"dfdc2fa3e34f6cf2ee5dd79d02751514bf67e7d3","modified":1654760483479},{"_id":"public/tags/线程安全/index.html","hash":"d00c6505df01f58384c0dc37d7a925f781d104be","modified":1654760483479},{"_id":"public/tags/AtomInteger/index.html","hash":"faa6eb4c42f97f3c5f0ef2f2842eef666c46b82b","modified":1654760483479},{"_id":"public/tags/LongAdder/index.html","hash":"580a57e22ad3be828b1445e135cfdc593e73d8a1","modified":1654760483479},{"_id":"public/tags/CAS/index.html","hash":"96b760be852fab4da49e5e1ee3bb95c83a6c6bf4","modified":1654760483479},{"_id":"public/tags/并发/index.html","hash":"7a288eb5b0056c442cf65d054baddb7f9bd095b1","modified":1654760483479},{"_id":"public/tags/线程同步/index.html","hash":"e86a33aa1cd5eddaf91e83b8cfecfae9be31fca7","modified":1654760483479},{"_id":"public/tags/Docker/index.html","hash":"421cb1b5846f3309384b31652ad248e507cd14a3","modified":1654760483479},{"_id":"public/tags/网络原理/index.html","hash":"27514c0b82c48f85e0cfe69f7b65321588a3b966","modified":1654760483479},{"_id":"public/tags/hexo/index.html","hash":"2717ef0210efd5ea24be65454b01af054b70f282","modified":1654760483479},{"_id":"public/tags/教程/index.html","hash":"5f22a3311ace5052a7ad60686a6777a3d4c5a461","modified":1654760483479},{"_id":"public/tags/blog/index.html","hash":"fee3be821b3e63880bcb5df1015604f2062aaf43","modified":1654760483479},{"_id":"public/tags/工具/index.html","hash":"c19e729c9bb9b922cb00466a0c0732e017cc41d3","modified":1654760483479},{"_id":"public/tags/Java/index.html","hash":"954444a1f5abb95c749f98cd8b3c2ddbfb00ce4d","modified":1654760483479},{"_id":"public/tags/IO/index.html","hash":"4f7efe0f211b2a612b39e14b7696bc19528edddb","modified":1654760483479},{"_id":"public/tags/面试/index.html","hash":"1656e27b9bb0187669f7e35433aef5e2b55024a0","modified":1654760483479},{"_id":"public/tags/基础/index.html","hash":"d2bfd06471219edf1c94d0013c4fc82b06ebf28a","modified":1654760483479},{"_id":"public/tags/k8s/index.html","hash":"9ce4c8866d433d1fc72ec1d28ec191e97c31a302","modified":1654760483479},{"_id":"public/tags/数据库/index.html","hash":"52dfcd6c41be6b502a53972254ae84019d608cdd","modified":1654760483479},{"_id":"public/tags/MySQL/index.html","hash":"100f9cf534685a675d0dd4e2326edcae446d8544","modified":1654760483479},{"_id":"public/tags/优化/index.html","hash":"34ca126a50cd53acd79d3cb6a0268f115e1a9177","modified":1654760483479},{"_id":"public/tags/RESTful/index.html","hash":"f7b96ae11f8083b8f60baf77eb256909ee012d47","modified":1654760483479},{"_id":"public/tags/HATEOAS/index.html","hash":"d61f6a40a8b18d0b79c85fd19ceb72fe6c50b70a","modified":1654760483479},{"_id":"public/tags/Redis/index.html","hash":"3866784e98c34f8bbcdaf2b889332b4cdafb10d1","modified":1654760483479},{"_id":"public/tags/sql/index.html","hash":"b75970edebf028dc3212c377cb2372a4f72da0e6","modified":1654760483479},{"_id":"public/tags/锁/index.html","hash":"a396547d4c251e8cdb7b3858051414f15690fa9c","modified":1654760483479},{"_id":"public/tags/java/index.html","hash":"2c9d1f7bc3022f49f583ae61986cf2a44586717e","modified":1654760483479},{"_id":"public/tags/关键字/index.html","hash":"268976734902c304fdd91b42600db686e99b825a","modified":1654760483479},{"_id":"public/tags/TCP/index.html","hash":"9c01fb2c625195a3d85b91f24c75cb6a8d134773","modified":1654760483479},{"_id":"public/tags/ThreadLocal/index.html","hash":"1aec261b0d61de7ef959c8245d1ac5b6834fc47a","modified":1654760483479},{"_id":"public/tags/leetcode/index.html","hash":"a4ffee5311c18b363b9a5eb21c8cf8ab0ca8ad20","modified":1654760483479},{"_id":"public/tags/leetcode/page/2/index.html","hash":"defb8b55d41822cdd13ca57815ae0f0515b64f0c","modified":1654760483479},{"_id":"public/tags/leetcode/page/3/index.html","hash":"97a8ec9a658e4e638366f9c732749fa46b7366b6","modified":1654760483479},{"_id":"public/tags/算法/index.html","hash":"f57ed1270301a1169acb0d7c99be776b93a441ae","modified":1654760483479},{"_id":"public/tags/算法/page/2/index.html","hash":"251e7cb001528b0125330bffb1cd56e01a5eb439","modified":1654760483479},{"_id":"public/tags/算法/page/3/index.html","hash":"a4d4e11922a31384a3bdd3facddf8430b09a18a9","modified":1654760483479},{"_id":"public/tags/dp/index.html","hash":"440484e7f7183de7dedb53ebd68d549a025c1397","modified":1654760483479},{"_id":"public/tags/树/index.html","hash":"67bc5cea77db7b7e3b9d4b607fcfe9ec4e8f6d58","modified":1654760483479},{"_id":"public/tags/链表/index.html","hash":"4ac7c939cb5a9fd000c851a7aaba2fcce3b6121a","modified":1654760483479},{"_id":"public/tags/二叉树/index.html","hash":"17e7b8afff768e3fed3aa65d63c135d163e9f8ce","modified":1654760483479},{"_id":"public/tags/分布式/index.html","hash":"5b5d1455af371517ffc55ffc0976d44785845c60","modified":1654760483479},{"_id":"public/tags/CAP/index.html","hash":"d27e5c6e42160d98c9857114a339d150f8925080","modified":1654760483479},{"_id":"public/tags/递归/index.html","hash":"985caeec9c8f19f16623b0787543a473e7ba0de7","modified":1654760483479},{"_id":"public/tags/二分查找/index.html","hash":"74bf9522a117c66725d9264f602ae05a876a59ba","modified":1654760483479},{"_id":"public/tags/stack/index.html","hash":"8be2b074fde7223ab65120773be241032a767bca","modified":1654760483479},{"_id":"public/tags/数据结构/index.html","hash":"3670ee7faa64c72f48eccc4d13a8f3e38b25ec19","modified":1654760483479},{"_id":"public/tags/迭代/index.html","hash":"227e41837da2287f789ab82fd408448d1d23d6b2","modified":1654760483479},{"_id":"public/tags/数组/index.html","hash":"2778d94e15672ef3ca773ceefb96c7de780bf2a5","modified":1654760483479},{"_id":"public/tags/leedcode/index.html","hash":"c8521d8c636d5e6186266659db9f363b9d0d4965","modified":1654760483479},{"_id":"public/tags/滑动窗口/index.html","hash":"ed340c9eec42c6bab9a793ec5220144f7d1da7f2","modified":1654760483479},{"_id":"public/tags/hash/index.html","hash":"d9d01eb530451b293e3a7d30e75c72d93012c49f","modified":1654760483479},{"_id":"public/tags/死锁/index.html","hash":"4868020e0ad38074cf32ef5058e3dc13af73d4e2","modified":1654760483479},{"_id":"public/tags/线程池/index.html","hash":"ef5fd6eadf7005b1218f96ae8d76029bd4072296","modified":1654760483479},{"_id":"public/tags/组合/index.html","hash":"5898975ffc8f6cbedfa8b65f84cfb6fd8267982d","modified":1654760483479},{"_id":"public/tags/数据处理/index.html","hash":"75376c7382d40a19afacf1641374451de0838292","modified":1654760483479},{"_id":"public/tags/英语/index.html","hash":"7becece55dd32543ffa56f8164619eb1ea096182","modified":1654760483479},{"_id":"public/tags/双指针/index.html","hash":"04ded992d2d3bface1a0803b90a9b18148ca25d6","modified":1654760483479},{"_id":"public/tags/项目/index.html","hash":"3c2c5c462e7ba3cac1c4b1dc99899464c5df1fe0","modified":1654760483479},{"_id":"public/2022/06/07/二叉搜索树与双向链表/index.html","hash":"e94193ac975e908b995778565bbc451f7de9a799","modified":1654760483479},{"_id":"public/2022/06/07/长度最小的子数组/index.html","hash":"aa94ded9b39e82fa73151a40e1f4c61fcc69d9d2","modified":1654760483479},{"_id":"public/2022/06/07/复制带随机指针的链表/index.html","hash":"b400b78d4363c03187d7d5e3b160cf895b665d09","modified":1654760483479},{"_id":"public/2022/06/05/打家劫舍/index.html","hash":"c2fe1abf4cd4a01322d3c0901d6fde514228ae74","modified":1654760483479},{"_id":"public/2022/06/05/基本计算器II/index.html","hash":"29572cc2a21a8c72b935f2b9e37a39d65e3d1a18","modified":1654760483479},{"_id":"public/2022/06/05/英文面试自我介绍/index.html","hash":"9fa117858075805713d07799b9d67a01d5584325","modified":1654760483479},{"_id":"public/2022/06/04/Redis数据结构底层原/index.html","hash":"131e3c4348fa9b0aeae058aa40a64bea8a8e2c29","modified":1654760483479},{"_id":"public/2022/06/04/TCP半连接队列和全连接队列溢出/index.html","hash":"a459bfaaa323bcd41700fc04817cedeea3cb3370","modified":1654760483479},{"_id":"public/2022/06/04/结构化-半结构化和非结构化数据/index.html","hash":"9a2c0189b2a79a83540e51e679f01764f996e101","modified":1654760483479},{"_id":"public/2022/06/04/MySQL命令explain/index.html","hash":"859380996872a6e17fa74d3fbbbeaa72141fbf08","modified":1654760483479},{"_id":"public/2022/06/04/Sql-面试/index.html","hash":"ccd19ece61a3d9e06141558bcadedc11740d9404","modified":1654760483479},{"_id":"public/2022/06/04/乘积最大子数组/index.html","hash":"cc2e15b5cc1b21aabf9f3b24bb0e2eae2bc5fa69","modified":1654760483479},{"_id":"public/2022/06/04/字符串解码/index.html","hash":"53b804aeb7f0af79ebaa2b783cd4ff040fa04512","modified":1654760483479},{"_id":"public/2022/06/03/岛屿的最大面积/index.html","hash":"856879a399e33e012d069a458e4578ea2865d88c","modified":1654760483479},{"_id":"public/2022/06/03/最长连续序列/index.html","hash":"c7799ef1fd47c19d2eb0a7f7db967e6240fe266f","modified":1654760483479},{"_id":"public/2022/06/03/不同路径/index.html","hash":"b5c4b300c2354080cd7e92b01e2d44fe0a53559e","modified":1654760483479},{"_id":"public/2022/06/03/删除排序链表中的重复元素/index.html","hash":"076361df6a606a55f1548480b04fbbcb610e5f8a","modified":1654760483479},{"_id":"public/2022/06/03/在排序数组中查找元素的第一个和最后一个位置/index.html","hash":"47d50d1abccd8158df3f17de6f158044699084d2","modified":1654760483479},{"_id":"public/2022/06/03/最长重复子数组/index.html","hash":"613ffa97bb798e4f3ce200902e5a655b0daf84eb","modified":1654760483479},{"_id":"public/2022/06/03/组合总和/index.html","hash":"1dee91de072d07676cb76f689f5f68af976ae737","modified":1654760483479},{"_id":"public/2022/06/03/旋转图像/index.html","hash":"577401e8bcd96ba523e809dfc4a1321f11b9bba8","modified":1654760483479},{"_id":"public/2022/06/02/最小路径和/index.html","hash":"9d47d11cd6fff7d377fe8644ca00ac43496f9b97","modified":1654760483479},{"_id":"public/2022/06/02/二叉树的直径/index.html","hash":"3bfb565479f6017e7f87c16159f381728ea96a45","modified":1654760483479},{"_id":"public/2022/06/02/路径总和-II/index.html","hash":"4e65602c3aa295135a1549baec77a60b90283c2c","modified":1654760483479},{"_id":"public/2022/06/02/验证二叉搜索树/index.html","hash":"727289e94c561541128f0be957bbe364bcdcec7f","modified":1654760483479},{"_id":"public/2022/06/02/Kubernetes基础概念/index.html","hash":"3c4146bdd28419dc97c3eccbda554dcf7d5d2505","modified":1654760483479},{"_id":"public/2022/06/01/零钱兑换/index.html","hash":"50031e656d96eef30a187961a4f609c5eaf3e56d","modified":1654760483479},{"_id":"public/2022/06/01/最长有效括号/index.html","hash":"09027c9e6c589a9d92f445c8296543dcd1076cf7","modified":1654760483479},{"_id":"public/2022/06/01/RESTful/index.html","hash":"e1d2171c46fbd749a02b3d1b93f8e4a2142fa6a5","modified":1654760483479},{"_id":"public/2022/05/31/滑动窗口最大值/index.html","hash":"b32ab1a32d980e8d3f1709442ef377895ed25104","modified":1654760483479},{"_id":"public/2022/05/31/从前序与中序遍历序列构造二叉树/index.html","hash":"c2fcff13c1406b9c917329fbc72145d41918c4c3","modified":1654760483479},{"_id":"public/2022/05/31/AQS/index.html","hash":"3ca541e56bb6e652737f34db4b8ca29123d07520","modified":1654760483479},{"_id":"public/2022/05/31/Synchronized/index.html","hash":"5f8c4d71466e82aa621633bbb742a9c3990468fb","modified":1654760483479},{"_id":"public/2022/05/30/Java-基础/index.html","hash":"e4b6c74c8bc5124eea4b81c3c0270e15e27cf903","modified":1654760483479},{"_id":"public/2022/05/30/项目介绍之亮点与难点/index.html","hash":"5dd4457bdf79b3a687d45e45a25e73bf0528aad4","modified":1654760483479},{"_id":"public/index.html","hash":"ede5d29019096b13cc053424df1223a06fa9fc58","modified":1654760483479},{"_id":"public/page/2/index.html","hash":"d7790afb089c0bb2012b687b46a7bf9e5a07e971","modified":1654760483479},{"_id":"public/page/3/index.html","hash":"35506d1035b51e9e4242477cd0c6a04f29fc553b","modified":1654760483479},{"_id":"public/page/4/index.html","hash":"3bbc3b2dc0fe0d8cc316db27583aac83be93fb1f","modified":1654760483479},{"_id":"public/page/5/index.html","hash":"179859303acb68fcc9f9ec7a30bac33c90120aa9","modified":1654760483479},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1654760483479},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1654760483479},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1654760483479},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1654760483479},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1654760483479},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1654760483479},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1654760483479},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1654760483479},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1654760483479},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1654760483479},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1654760483479},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1654760483479},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1654760483479},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1654760483479},{"_id":"public/2022/06/04/Redis数据结构底层原/listpack节点.png","hash":"5d6de5d8060c4a57888dbac669f6b9091ae51bfe","modified":1654760483479},{"_id":"public/2022/06/04/Redis数据结构底层原/quicklist.png","hash":"6876f800ee4e28f37de26e31a68512175f80c12f","modified":1654760483479},{"_id":"public/2022/06/04/Redis数据结构底层原/哈希表结构.png","hash":"ac7438cf8d9e4d9385077246e9347ad95b569f5c","modified":1654760483479},{"_id":"public/2022/06/04/Redis数据结构底层原/压缩列表节点结构.png","hash":"e2d704e0fc43afa5a3ec00cc98696ffaadd75db7","modified":1654760483479},{"_id":"public/2022/05/31/ThreadLoacl/640.jpeg","hash":"8127f2e21aadd24a255a1dc83586fb45212faddd","modified":1654760483479},{"_id":"public/2022/06/03/不同路径/robot_maze.png","hash":"4b426c3adb98bd889d6b6c9b80ce0229a2dc0778","modified":1654760483479},{"_id":"public/2022/06/07/二叉搜索树与双向链表/bstdllreturndll.png","hash":"657e2e48aad8c03f7542d601cd3293ab4159d595","modified":1654760483479},{"_id":"public/2022/06/03/删除排序链表中的重复元素/list1.jpg","hash":"1259812f50665b4ae19693c17e41cc36187cbf74","modified":1654760483479},{"_id":"public/2022/06/03/旋转图像/mat1.jpg","hash":"909611016f48da823bed5ebfffb3a1862acf7093","modified":1654760483479},{"_id":"public/2022/06/05/英文面试自我介绍/v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg.png","hash":"8da9e2fd3697a68d0fd4317b1a5a6239b2f00158","modified":1654760483479},{"_id":"public/2022/06/07/二叉搜索树与双向链表/bstdlloriginalbst.png","hash":"6d62209dab3863e0b800c4001e8d7a1f73b0d297","modified":1654760483479},{"_id":"public/2022/06/02/验证二叉搜索树/tree1.jpg","hash":"caeb731bf33ae5af2eb1dad04a87563c9519d4fb","modified":1654760483479},{"_id":"public/2022/06/02/路径总和-II/pathsumii1.jpg","hash":"7747e8c542f6606b82ff7d0bdc122cb6c48047aa","modified":1654760483479},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1654760483479},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1654760483479},{"_id":"public/2022/06/02/Kubernetes基础概念/components-of-kubernetes.svg","hash":"2475489eaf20163ec0f54ddc1d92aa8d4c87c96b","modified":1654760483479},{"_id":"public/2022/06/04/Redis数据结构底层原/redis数据结构-lastnew.png","hash":"df613a953d247ae44ee0e7169d645c45542face0","modified":1654760483479},{"_id":"public/2022/06/04/Redis数据结构底层原/键值对结构.png","hash":"d441182e9eff9e7a8e23ae35e65efd3a4cc16182","modified":1654760483479},{"_id":"public/2022/06/04/TCP半连接队列和全连接队列溢出/3d05f574867b70d1134e685e5f5ac137.jpg","hash":"84ba3a54ea5945a84f1cf08fd4f42d02e4a9a676","modified":1654760483479},{"_id":"public/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1654760483479},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1654760483479},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1654760483479},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1654760483479},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1654760483479},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1654760483479},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1654760483479},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1654760483479},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1654760483479},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1654760483479},{"_id":"public/css/main.css","hash":"94c2f6bbb48a59da0d75cf7cd4b098f84072d12c","modified":1654760483479},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1654760483479},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1654760483479},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1654760483479},{"_id":"public/2022/06/04/Redis数据结构底层原/redis全景图.png","hash":"bda04331f3afa42a44856296b06390bc947dec4f","modified":1654760483479},{"_id":"public/2022/06/03/岛屿的最大面积/maxarea1-grid.jpg","hash":"19d3a850bc97a2db82cfd8c385e9b430e61f1d9a","modified":1654760483479},{"_id":"public/2022/05/30/Hexo-图片/20200707101943_hCjji.jpeg","hash":"658b53ae28379a44889bbd55c9a7f079a77bb3b9","modified":1654760483479},{"_id":"public/2022/05/31/ThreadLoacl/image-20220531114220950.png","hash":"293074650194def2700bfcc08e92331ee2c6aac1","modified":1654760483479},{"_id":"public/2022/06/05/英文面试自我介绍/v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r.jpg","hash":"b59fb0b1a3fd52d6de6bc98d666c331d705949a2","modified":1654760483479}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2022-05-29T04:27:32.000Z","_content":"\nNOT FOUND!\n","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-05-29 12:27:32\n---\n\nNOT FOUND!\n","updated":"2022-05-29T04:27:53.418Z","path":"404/index.html","comments":1,"layout":"page","_id":"cl46po0yt0000wuh8d5gj8nbj","content":"<p>NOT FOUND!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>NOT FOUND!</p>\n"},{"title":"categories","date":"2022-05-30T08:38:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-30 16:38:10\ntype: \"categories\"\n---\n","updated":"2022-05-30T08:40:34.105Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl46po0yz0002wuh8ehy67qkh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-05-30T08:40:48.000Z","type":"tags","comments":1,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-30 16:40:48\ntype: \"tags\"\ncomments: true\n---\n\n","updated":"2022-05-30T08:49:08.972Z","path":"tags/index.html","layout":"page","_id":"cl46po0z20005wuh86u2wdu3f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-05-29T04:19:04.000Z","_content":"# ABOUT ME\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-05-29 12:19:04\n---\n# ABOUT ME\n","updated":"2022-05-29T04:20:28.086Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl46po0z30007wuh81kag9u4t","content":"<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT ME\"></a>ABOUT ME</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT ME\"></a>ABOUT ME</h1>"}],"Post":[{"title":"AQS","date":"2022-05-31T01:59:15.000Z","_content":"\nAbstractQueueSynchroinzer。提供了一个锁框架。内部有一个Integer类型state和一个双向队列。封装了线程锁请求入FIFO双向队列入队出队以及线程挂起唤醒等过程，实现线程安全。\n\n# **两种模式**\n\n独占：State作为一个独占资源\n\n共享：State的32位拆分为多个资源。\n\n# **公平非公平**\n\n公平锁：通过FIFO队列，新锁请求放入队尾\n\n非公平锁：锁请求先尝试获取锁，获取失败再入队列\n\n# **加锁执行流程**（独占非公平锁为例）\n\n- 调用`lock()`方法\n- CAS尝试修改State获取锁\n- 获取锁成功\n- 获取失败，加入锁队列，前驱节点设置为`Signal`状态（有后继节点需要唤醒），挂起当前线程\n- 等待前驱节点获取锁唤醒执行后，唤醒后继线程获取锁继续执行\n\n# **解锁执行流程**\n\n- 调用`unlock()`方法\n- CAS尝试修改State\n- 修改成功释放锁\n- 唤醒下一个节点\n\n# Condition\n\n```java\n// 初始化\nLock lock = new ReentrantLock();\nCondition condition = lock.newCondition();\n\n// await\ntry {\n  lock.lock();\n  condition.await();\n} catch (InterruptedException e) {\n  e.printStackTrace();\n} finally {\n  lock.unlock();\n}\n\n// lock\ntry {\n  lock.lock();\n  condition.signal();\n} finally {\n  lock.unlock();\n}\n```\n\nCondition内部维护条件队列（单向链表）。当调用`awit()`时，加入条件队列中。调用`signal()`时将头节点转移到AQS队列尾部，等待唤醒执行。`signalAll()`会将所有条件队列的节点计入AQS队列。\n\n\n\n# Synchronized VS AQS\n\n- Synchronized 无需手动解锁，AQS需要\n- Synchronized膨胀为重量级锁后无法回退，AQS会自适应调整\n- Synchronized 的wait/notifyAll没有AQS Condition灵活\n- AQS可中断锁\n- AQS可以实现公平锁\n\n","source":"_posts/AQS.md","raw":"---\ntitle: AQS\ndate: 2022-05-31 09:59:15\ntags:\n  - AQS\n  - 线程安全\n---\n\nAbstractQueueSynchroinzer。提供了一个锁框架。内部有一个Integer类型state和一个双向队列。封装了线程锁请求入FIFO双向队列入队出队以及线程挂起唤醒等过程，实现线程安全。\n\n# **两种模式**\n\n独占：State作为一个独占资源\n\n共享：State的32位拆分为多个资源。\n\n# **公平非公平**\n\n公平锁：通过FIFO队列，新锁请求放入队尾\n\n非公平锁：锁请求先尝试获取锁，获取失败再入队列\n\n# **加锁执行流程**（独占非公平锁为例）\n\n- 调用`lock()`方法\n- CAS尝试修改State获取锁\n- 获取锁成功\n- 获取失败，加入锁队列，前驱节点设置为`Signal`状态（有后继节点需要唤醒），挂起当前线程\n- 等待前驱节点获取锁唤醒执行后，唤醒后继线程获取锁继续执行\n\n# **解锁执行流程**\n\n- 调用`unlock()`方法\n- CAS尝试修改State\n- 修改成功释放锁\n- 唤醒下一个节点\n\n# Condition\n\n```java\n// 初始化\nLock lock = new ReentrantLock();\nCondition condition = lock.newCondition();\n\n// await\ntry {\n  lock.lock();\n  condition.await();\n} catch (InterruptedException e) {\n  e.printStackTrace();\n} finally {\n  lock.unlock();\n}\n\n// lock\ntry {\n  lock.lock();\n  condition.signal();\n} finally {\n  lock.unlock();\n}\n```\n\nCondition内部维护条件队列（单向链表）。当调用`awit()`时，加入条件队列中。调用`signal()`时将头节点转移到AQS队列尾部，等待唤醒执行。`signalAll()`会将所有条件队列的节点计入AQS队列。\n\n\n\n# Synchronized VS AQS\n\n- Synchronized 无需手动解锁，AQS需要\n- Synchronized膨胀为重量级锁后无法回退，AQS会自适应调整\n- Synchronized 的wait/notifyAll没有AQS Condition灵活\n- AQS可中断锁\n- AQS可以实现公平锁\n\n","slug":"AQS","published":1,"updated":"2022-05-31T08:17:28.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0yw0001wuh8dsx7cf09","content":"<p>AbstractQueueSynchroinzer。提供了一个锁框架。内部有一个Integer类型state和一个双向队列。封装了线程锁请求入FIFO双向队列入队出队以及线程挂起唤醒等过程，实现线程安全。</p>\n<h1 id=\"两种模式\"><a href=\"#两种模式\" class=\"headerlink\" title=\"两种模式\"></a><strong>两种模式</strong></h1><p>独占：State作为一个独占资源</p>\n<p>共享：State的32位拆分为多个资源。</p>\n<h1 id=\"公平非公平\"><a href=\"#公平非公平\" class=\"headerlink\" title=\"公平非公平\"></a><strong>公平非公平</strong></h1><p>公平锁：通过FIFO队列，新锁请求放入队尾</p>\n<p>非公平锁：锁请求先尝试获取锁，获取失败再入队列</p>\n<h1 id=\"加锁执行流程（独占非公平锁为例）\"><a href=\"#加锁执行流程（独占非公平锁为例）\" class=\"headerlink\" title=\"加锁执行流程（独占非公平锁为例）\"></a><strong>加锁执行流程</strong>（独占非公平锁为例）</h1><ul>\n<li>调用<code>lock()</code>方法</li>\n<li>CAS尝试修改State获取锁</li>\n<li>获取锁成功</li>\n<li>获取失败，加入锁队列，前驱节点设置为<code>Signal</code>状态（有后继节点需要唤醒），挂起当前线程</li>\n<li>等待前驱节点获取锁唤醒执行后，唤醒后继线程获取锁继续执行</li>\n</ul>\n<h1 id=\"解锁执行流程\"><a href=\"#解锁执行流程\" class=\"headerlink\" title=\"解锁执行流程\"></a><strong>解锁执行流程</strong></h1><ul>\n<li>调用<code>unlock()</code>方法</li>\n<li>CAS尝试修改State</li>\n<li>修改成功释放锁</li>\n<li>唤醒下一个节点</li>\n</ul>\n<h1 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"><span class=\"type\">Condition</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// await</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  lock.lock();</span><br><span class=\"line\">  condition.await();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">  e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lock</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  lock.lock();</span><br><span class=\"line\">  condition.signal();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Condition内部维护条件队列（单向链表）。当调用<code>awit()</code>时，加入条件队列中。调用<code>signal()</code>时将头节点转移到AQS队列尾部，等待唤醒执行。<code>signalAll()</code>会将所有条件队列的节点计入AQS队列。</p>\n<h1 id=\"Synchronized-VS-AQS\"><a href=\"#Synchronized-VS-AQS\" class=\"headerlink\" title=\"Synchronized VS AQS\"></a>Synchronized VS AQS</h1><ul>\n<li>Synchronized 无需手动解锁，AQS需要</li>\n<li>Synchronized膨胀为重量级锁后无法回退，AQS会自适应调整</li>\n<li>Synchronized 的wait&#x2F;notifyAll没有AQS Condition灵活</li>\n<li>AQS可中断锁</li>\n<li>AQS可以实现公平锁</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>AbstractQueueSynchroinzer。提供了一个锁框架。内部有一个Integer类型state和一个双向队列。封装了线程锁请求入FIFO双向队列入队出队以及线程挂起唤醒等过程，实现线程安全。</p>\n<h1 id=\"两种模式\"><a href=\"#两种模式\" class=\"headerlink\" title=\"两种模式\"></a><strong>两种模式</strong></h1><p>独占：State作为一个独占资源</p>\n<p>共享：State的32位拆分为多个资源。</p>\n<h1 id=\"公平非公平\"><a href=\"#公平非公平\" class=\"headerlink\" title=\"公平非公平\"></a><strong>公平非公平</strong></h1><p>公平锁：通过FIFO队列，新锁请求放入队尾</p>\n<p>非公平锁：锁请求先尝试获取锁，获取失败再入队列</p>\n<h1 id=\"加锁执行流程（独占非公平锁为例）\"><a href=\"#加锁执行流程（独占非公平锁为例）\" class=\"headerlink\" title=\"加锁执行流程（独占非公平锁为例）\"></a><strong>加锁执行流程</strong>（独占非公平锁为例）</h1><ul>\n<li>调用<code>lock()</code>方法</li>\n<li>CAS尝试修改State获取锁</li>\n<li>获取锁成功</li>\n<li>获取失败，加入锁队列，前驱节点设置为<code>Signal</code>状态（有后继节点需要唤醒），挂起当前线程</li>\n<li>等待前驱节点获取锁唤醒执行后，唤醒后继线程获取锁继续执行</li>\n</ul>\n<h1 id=\"解锁执行流程\"><a href=\"#解锁执行流程\" class=\"headerlink\" title=\"解锁执行流程\"></a><strong>解锁执行流程</strong></h1><ul>\n<li>调用<code>unlock()</code>方法</li>\n<li>CAS尝试修改State</li>\n<li>修改成功释放锁</li>\n<li>唤醒下一个节点</li>\n</ul>\n<h1 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"><span class=\"type\">Condition</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// await</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  lock.lock();</span><br><span class=\"line\">  condition.await();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">  e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lock</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  lock.lock();</span><br><span class=\"line\">  condition.signal();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Condition内部维护条件队列（单向链表）。当调用<code>awit()</code>时，加入条件队列中。调用<code>signal()</code>时将头节点转移到AQS队列尾部，等待唤醒执行。<code>signalAll()</code>会将所有条件队列的节点计入AQS队列。</p>\n<h1 id=\"Synchronized-VS-AQS\"><a href=\"#Synchronized-VS-AQS\" class=\"headerlink\" title=\"Synchronized VS AQS\"></a>Synchronized VS AQS</h1><ul>\n<li>Synchronized 无需手动解锁，AQS需要</li>\n<li>Synchronized膨胀为重量级锁后无法回退，AQS会自适应调整</li>\n<li>Synchronized 的wait&#x2F;notifyAll没有AQS Condition灵活</li>\n<li>AQS可中断锁</li>\n<li>AQS可以实现公平锁</li>\n</ul>\n"},{"title":"AtomInteger与LongAdder","date":"2022-05-31T00:59:49.000Z","_content":"\n\n\n# CAS\n\nCompare And Swap：通过原子的进行比较交换操作保证数据安全。\n\n具体流程：每次更新前先判断当前值是否相等，如果相等就进行替换。否则自旋等待锁释放。\n\n存在问题：ABA问题，就是存在另外线程将值改回之前的值，此时另一个不该获取锁的线程可以拿到锁\n\n如何避免：通过对信息加版本号，例如：使用AtomicStampedReference作为版本信息保证不会回退旧数据\n\n# AtomInteger\n\n底层通过CAS，能够原子的进行累加，保证线程安全。\n\n缺点：只有一个共享资源，高并发下大部分线程自旋等待。性能不佳\n\n改进：使用`LongAdder`\n\n\n\n# LongAdder\n\n底层同样采用CAS，但是内部类似分段锁机制通过一个Cell数据将资源划分开，降低失败次数并减小自旋性能损失。所以在高并发情况下推荐使用`LongAdder`\n","source":"_posts/AtomInteger与LongAdder.md","raw":"---\ntitle: AtomInteger与LongAdder\ndate: 2022-05-31 08:59:49\ntags:\n  - AtomInteger\n  - LongAdder\n  - 线程安全\n  - CAS\n---\n\n\n\n# CAS\n\nCompare And Swap：通过原子的进行比较交换操作保证数据安全。\n\n具体流程：每次更新前先判断当前值是否相等，如果相等就进行替换。否则自旋等待锁释放。\n\n存在问题：ABA问题，就是存在另外线程将值改回之前的值，此时另一个不该获取锁的线程可以拿到锁\n\n如何避免：通过对信息加版本号，例如：使用AtomicStampedReference作为版本信息保证不会回退旧数据\n\n# AtomInteger\n\n底层通过CAS，能够原子的进行累加，保证线程安全。\n\n缺点：只有一个共享资源，高并发下大部分线程自旋等待。性能不佳\n\n改进：使用`LongAdder`\n\n\n\n# LongAdder\n\n底层同样采用CAS，但是内部类似分段锁机制通过一个Cell数据将资源划分开，降低失败次数并减小自旋性能损失。所以在高并发情况下推荐使用`LongAdder`\n","slug":"AtomInteger与LongAdder","published":1,"updated":"2022-05-31T01:12:09.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z00003wuh8gmxnaq99","content":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p>Compare And Swap：通过原子的进行比较交换操作保证数据安全。</p>\n<p>具体流程：每次更新前先判断当前值是否相等，如果相等就进行替换。否则自旋等待锁释放。</p>\n<p>存在问题：ABA问题，就是存在另外线程将值改回之前的值，此时另一个不该获取锁的线程可以拿到锁</p>\n<p>如何避免：通过对信息加版本号，例如：使用AtomicStampedReference作为版本信息保证不会回退旧数据</p>\n<h1 id=\"AtomInteger\"><a href=\"#AtomInteger\" class=\"headerlink\" title=\"AtomInteger\"></a>AtomInteger</h1><p>底层通过CAS，能够原子的进行累加，保证线程安全。</p>\n<p>缺点：只有一个共享资源，高并发下大部分线程自旋等待。性能不佳</p>\n<p>改进：使用<code>LongAdder</code></p>\n<h1 id=\"LongAdder\"><a href=\"#LongAdder\" class=\"headerlink\" title=\"LongAdder\"></a>LongAdder</h1><p>底层同样采用CAS，但是内部类似分段锁机制通过一个Cell数据将资源划分开，降低失败次数并减小自旋性能损失。所以在高并发情况下推荐使用<code>LongAdder</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p>Compare And Swap：通过原子的进行比较交换操作保证数据安全。</p>\n<p>具体流程：每次更新前先判断当前值是否相等，如果相等就进行替换。否则自旋等待锁释放。</p>\n<p>存在问题：ABA问题，就是存在另外线程将值改回之前的值，此时另一个不该获取锁的线程可以拿到锁</p>\n<p>如何避免：通过对信息加版本号，例如：使用AtomicStampedReference作为版本信息保证不会回退旧数据</p>\n<h1 id=\"AtomInteger\"><a href=\"#AtomInteger\" class=\"headerlink\" title=\"AtomInteger\"></a>AtomInteger</h1><p>底层通过CAS，能够原子的进行累加，保证线程安全。</p>\n<p>缺点：只有一个共享资源，高并发下大部分线程自旋等待。性能不佳</p>\n<p>改进：使用<code>LongAdder</code></p>\n<h1 id=\"LongAdder\"><a href=\"#LongAdder\" class=\"headerlink\" title=\"LongAdder\"></a>LongAdder</h1><p>底层同样采用CAS，但是内部类似分段锁机制通过一个Cell数据将资源划分开，降低失败次数并减小自旋性能损失。所以在高并发情况下推荐使用<code>LongAdder</code></p>\n"},{"title":"CountDownLatch和CycilBarrier","date":"2022-05-31T06:46:31.000Z","_content":"\n# CountDownLatch\n\n内部采用AQS实现，初始化时设置State。\n\n`countDown()`方法调用时调用`tryRelease()`将state减一并通过CAS更新state；\n\n`await()`主线程调用时，会判断state是否为0，是0的话直接退出，否则加入AQS队列等待唤醒。\n\n\n\n# CyclicBarrier\n\n借助 ReentrantLock的Condition等待唤醒实现。\n\n在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）\n\n每次调用await时，会将count -1 ，操作count值是直接使用ReentrantLock来保证线程安全性；\n\n如果count不为0，则添加则condition队列中\n\n如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）\n\n\n\n# 总结\n\nCountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown()就是在利用CAS将state减-1，await()实际就是让头节点一直在等待state为0时，释放等待的线程\n\nCyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。\n\n","source":"_posts/CountDownLatch和CycilBarrier.md","raw":"---\ntitle: CountDownLatch和CycilBarrier\ndate: 2022-05-31 14:46:31\ntags:\n  - 并发\n  - 线程同步\n---\n\n# CountDownLatch\n\n内部采用AQS实现，初始化时设置State。\n\n`countDown()`方法调用时调用`tryRelease()`将state减一并通过CAS更新state；\n\n`await()`主线程调用时，会判断state是否为0，是0的话直接退出，否则加入AQS队列等待唤醒。\n\n\n\n# CyclicBarrier\n\n借助 ReentrantLock的Condition等待唤醒实现。\n\n在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）\n\n每次调用await时，会将count -1 ，操作count值是直接使用ReentrantLock来保证线程安全性；\n\n如果count不为0，则添加则condition队列中\n\n如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）\n\n\n\n# 总结\n\nCountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown()就是在利用CAS将state减-1，await()实际就是让头节点一直在等待state为0时，释放等待的线程\n\nCyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。\n\n","slug":"CountDownLatch和CycilBarrier","published":1,"updated":"2022-05-31T07:14:51.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z30006wuh80e993987","content":"<h1 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h1><p>内部采用AQS实现，初始化时设置State。</p>\n<p><code>countDown()</code>方法调用时调用<code>tryRelease()</code>将state减一并通过CAS更新state；</p>\n<p><code>await()</code>主线程调用时，会判断state是否为0，是0的话直接退出，否则加入AQS队列等待唤醒。</p>\n<h1 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h1><p>借助 ReentrantLock的Condition等待唤醒实现。</p>\n<p>在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）</p>\n<p>每次调用await时，会将count -1 ，操作count值是直接使用ReentrantLock来保证线程安全性；</p>\n<p>如果count不为0，则添加则condition队列中</p>\n<p>如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown()就是在利用CAS将state减-1，await()实际就是让头节点一直在等待state为0时，释放等待的线程</p>\n<p>CyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h1><p>内部采用AQS实现，初始化时设置State。</p>\n<p><code>countDown()</code>方法调用时调用<code>tryRelease()</code>将state减一并通过CAS更新state；</p>\n<p><code>await()</code>主线程调用时，会判断state是否为0，是0的话直接退出，否则加入AQS队列等待唤醒。</p>\n<h1 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h1><p>借助 ReentrantLock的Condition等待唤醒实现。</p>\n<p>在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）</p>\n<p>每次调用await时，会将count -1 ，操作count值是直接使用ReentrantLock来保证线程安全性；</p>\n<p>如果count不为0，则添加则condition队列中</p>\n<p>如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown()就是在利用CAS将state减-1，await()实际就是让头节点一直在等待state为0时，释放等待的线程</p>\n<p>CyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。</p>\n"},{"title":"Docker 网络原理与资源隔离","date":"2022-06-04T03:36:52.000Z","_content":"\nDocker底层通过`namespace`和`cgroup`实现. 通过`namespace`实现资源隔离. 通过cgroup实现资源限制.\n\n# 网络原理\n\n- Bridge(桥接)\n\n  容器的默认网络模式，docker在安装时会创建一个名为docker0的Linux bridge，在不指定--network的情况下，创建的容器都会默认挂到docker0上面。bridge模式为容器创建独立的网络栈，保证容器内的进程使用独立的网络环境，使容器之间，容器和docker host之间实现网络隔离。\n\n- Host\n\n  使用宿主机的网卡进行网络访问, 无需转发,网络性能比较好\n\n- Container\n\n  A容器使用B容器的共享网络(??)\n\n- None\n\n  这样创建出来的容器完全没有网络\n\n- User-defined\n\n  用户自定义模式主要可选的有三种网络驱动：bridge、overlay、macvlan。bridge驱动用于创建类似于前面提到的bridge网络;overlay和macvlan驱动用于创建跨主机的网络、IP等。  \n\nlinux网络基础参考:[虚拟网络](https://www.cnblogs.com/jmilkfan-fanguiju/p/12789756.html)\n\n# 资源隔离\n\n- namespace\n\n  参考namespace: [linux namespace](https://www.cnblogs.com/sparkdev/p/9365405.html)\n\n- cgroup\n\n  参考cgroup: [linux cgroup](https://tech.meituan.com/2015/03/31/cgroups.html)\n","source":"_posts/Docker-网络原理与资源隔离.md","raw":"---\ntitle: Docker 网络原理与资源隔离\ndate: 2022-06-04 11:36:52\ntags:\n  - Docker\n  - 网络原理\n---\n\nDocker底层通过`namespace`和`cgroup`实现. 通过`namespace`实现资源隔离. 通过cgroup实现资源限制.\n\n# 网络原理\n\n- Bridge(桥接)\n\n  容器的默认网络模式，docker在安装时会创建一个名为docker0的Linux bridge，在不指定--network的情况下，创建的容器都会默认挂到docker0上面。bridge模式为容器创建独立的网络栈，保证容器内的进程使用独立的网络环境，使容器之间，容器和docker host之间实现网络隔离。\n\n- Host\n\n  使用宿主机的网卡进行网络访问, 无需转发,网络性能比较好\n\n- Container\n\n  A容器使用B容器的共享网络(??)\n\n- None\n\n  这样创建出来的容器完全没有网络\n\n- User-defined\n\n  用户自定义模式主要可选的有三种网络驱动：bridge、overlay、macvlan。bridge驱动用于创建类似于前面提到的bridge网络;overlay和macvlan驱动用于创建跨主机的网络、IP等。  \n\nlinux网络基础参考:[虚拟网络](https://www.cnblogs.com/jmilkfan-fanguiju/p/12789756.html)\n\n# 资源隔离\n\n- namespace\n\n  参考namespace: [linux namespace](https://www.cnblogs.com/sparkdev/p/9365405.html)\n\n- cgroup\n\n  参考cgroup: [linux cgroup](https://tech.meituan.com/2015/03/31/cgroups.html)\n","slug":"Docker-网络原理与资源隔离","published":1,"updated":"2022-06-04T08:42:55.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z40008wuh89yjocg31","content":"<p>Docker底层通过<code>namespace</code>和<code>cgroup</code>实现. 通过<code>namespace</code>实现资源隔离. 通过cgroup实现资源限制.</p>\n<h1 id=\"网络原理\"><a href=\"#网络原理\" class=\"headerlink\" title=\"网络原理\"></a>网络原理</h1><ul>\n<li><p>Bridge(桥接)</p>\n<p>容器的默认网络模式，docker在安装时会创建一个名为docker0的Linux bridge，在不指定–network的情况下，创建的容器都会默认挂到docker0上面。bridge模式为容器创建独立的网络栈，保证容器内的进程使用独立的网络环境，使容器之间，容器和docker host之间实现网络隔离。</p>\n</li>\n<li><p>Host</p>\n<p>使用宿主机的网卡进行网络访问, 无需转发,网络性能比较好</p>\n</li>\n<li><p>Container</p>\n<p>A容器使用B容器的共享网络(??)</p>\n</li>\n<li><p>None</p>\n<p>这样创建出来的容器完全没有网络</p>\n</li>\n<li><p>User-defined</p>\n<p>用户自定义模式主要可选的有三种网络驱动：bridge、overlay、macvlan。bridge驱动用于创建类似于前面提到的bridge网络;overlay和macvlan驱动用于创建跨主机的网络、IP等。</p>\n</li>\n</ul>\n<p>linux网络基础参考:<a href=\"https://www.cnblogs.com/jmilkfan-fanguiju/p/12789756.html\">虚拟网络</a></p>\n<h1 id=\"资源隔离\"><a href=\"#资源隔离\" class=\"headerlink\" title=\"资源隔离\"></a>资源隔离</h1><ul>\n<li><p>namespace</p>\n<p>参考namespace: <a href=\"https://www.cnblogs.com/sparkdev/p/9365405.html\">linux namespace</a></p>\n</li>\n<li><p>cgroup</p>\n<p>参考cgroup: <a href=\"https://tech.meituan.com/2015/03/31/cgroups.html\">linux cgroup</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Docker底层通过<code>namespace</code>和<code>cgroup</code>实现. 通过<code>namespace</code>实现资源隔离. 通过cgroup实现资源限制.</p>\n<h1 id=\"网络原理\"><a href=\"#网络原理\" class=\"headerlink\" title=\"网络原理\"></a>网络原理</h1><ul>\n<li><p>Bridge(桥接)</p>\n<p>容器的默认网络模式，docker在安装时会创建一个名为docker0的Linux bridge，在不指定–network的情况下，创建的容器都会默认挂到docker0上面。bridge模式为容器创建独立的网络栈，保证容器内的进程使用独立的网络环境，使容器之间，容器和docker host之间实现网络隔离。</p>\n</li>\n<li><p>Host</p>\n<p>使用宿主机的网卡进行网络访问, 无需转发,网络性能比较好</p>\n</li>\n<li><p>Container</p>\n<p>A容器使用B容器的共享网络(??)</p>\n</li>\n<li><p>None</p>\n<p>这样创建出来的容器完全没有网络</p>\n</li>\n<li><p>User-defined</p>\n<p>用户自定义模式主要可选的有三种网络驱动：bridge、overlay、macvlan。bridge驱动用于创建类似于前面提到的bridge网络;overlay和macvlan驱动用于创建跨主机的网络、IP等。</p>\n</li>\n</ul>\n<p>linux网络基础参考:<a href=\"https://www.cnblogs.com/jmilkfan-fanguiju/p/12789756.html\">虚拟网络</a></p>\n<h1 id=\"资源隔离\"><a href=\"#资源隔离\" class=\"headerlink\" title=\"资源隔离\"></a>资源隔离</h1><ul>\n<li><p>namespace</p>\n<p>参考namespace: <a href=\"https://www.cnblogs.com/sparkdev/p/9365405.html\">linux namespace</a></p>\n</li>\n<li><p>cgroup</p>\n<p>参考cgroup: <a href=\"https://tech.meituan.com/2015/03/31/cgroups.html\">linux cgroup</a></p>\n</li>\n</ul>\n"},{"title":"Hexo 图片","date":"2022-05-30T15:24:16.000Z","_content":"\n参考：https://blog.csdn.net/m0_43401436/article/details/107191688\n\n\n\n![20200707101943_hCjji](20200707101943_hCjji.jpeg)\n\n","source":"_posts/Hexo-图片.md","raw":"---\ntitle: Hexo 图片\ndate: 2022-05-30 23:24:16\ntags: \n  - hexo\n  - 教程\n---\n\n参考：https://blog.csdn.net/m0_43401436/article/details/107191688\n\n\n\n![20200707101943_hCjji](20200707101943_hCjji.jpeg)\n\n","slug":"Hexo-图片","published":1,"updated":"2022-05-31T00:37:10.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z50009wuh85g425y9u","content":"<p>参考：<a href=\"https://blog.csdn.net/m0_43401436/article/details/107191688\">https://blog.csdn.net/m0_43401436/article/details/107191688</a></p>\n<p><img src=\"/2022/05/30/Hexo-%E5%9B%BE%E7%89%87/20200707101943_hCjji.jpeg\" alt=\"20200707101943_hCjji\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：<a href=\"https://blog.csdn.net/m0_43401436/article/details/107191688\">https://blog.csdn.net/m0_43401436/article/details/107191688</a></p>\n<p><img src=\"/2022/05/30/Hexo-%E5%9B%BE%E7%89%87/20200707101943_hCjji.jpeg\" alt=\"20200707101943_hCjji\"></p>\n"},{"title":"How to use hexo","date":"2022-05-29T01:06:33.000Z","_content":"\n# 参考  \n\nhttps://hexo.io/docs/\n\n# 准备  \n\n## Nodejs  \n\n## Git\n\n# 初始化  \n\n```bash\nnode hexo init blog  # create dir blog and init\ncd blog \nnpm init\n```\n\n# 配置  \n\n修改_config.yml文件，具体配置项参考文章顶部链接\n\n# 日常使用  \n\n```bash\nnode hexo clean  # clean\nnode hexo s  # start server to preview\n```\n\n修改主题：\n\n下载主题到theme目录下，修改_config.yml下theme配置即可\n\n# 配合github pages使用\n\n_config.yml配置github仓库以及branch\n\n一键deploy需要安装插件：hexo-github-dploy\n\nsearch功能插件：hexo-search-db\n\n具体参考文章顶部链接\n","source":"_posts/How-to-use-hexo.md","raw":"---\ntitle: How to use hexo\ndate: 2022-05-29 09:06:33\ntags:\n  - hexo\n  - blog\n  - 工具\n---\n\n# 参考  \n\nhttps://hexo.io/docs/\n\n# 准备  \n\n## Nodejs  \n\n## Git\n\n# 初始化  \n\n```bash\nnode hexo init blog  # create dir blog and init\ncd blog \nnpm init\n```\n\n# 配置  \n\n修改_config.yml文件，具体配置项参考文章顶部链接\n\n# 日常使用  \n\n```bash\nnode hexo clean  # clean\nnode hexo s  # start server to preview\n```\n\n修改主题：\n\n下载主题到theme目录下，修改_config.yml下theme配置即可\n\n# 配合github pages使用\n\n_config.yml配置github仓库以及branch\n\n一键deploy需要安装插件：hexo-github-dploy\n\nsearch功能插件：hexo-search-db\n\n具体参考文章顶部链接\n","slug":"How-to-use-hexo","published":1,"updated":"2022-05-30T10:08:15.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z6000bwuh8f7l7614j","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://hexo.io/docs/\">https://hexo.io/docs/</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h2><h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node hexo init blog  <span class=\"comment\"># create dir blog and init</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog </span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>修改_config.yml文件，具体配置项参考文章顶部链接</p>\n<h1 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node hexo clean  <span class=\"comment\"># clean</span></span><br><span class=\"line\">node hexo s  <span class=\"comment\"># start server to preview</span></span><br></pre></td></tr></table></figure>\n\n<p>修改主题：</p>\n<p>下载主题到theme目录下，修改_config.yml下theme配置即可</p>\n<h1 id=\"配合github-pages使用\"><a href=\"#配合github-pages使用\" class=\"headerlink\" title=\"配合github pages使用\"></a>配合github pages使用</h1><p>_config.yml配置github仓库以及branch</p>\n<p>一键deploy需要安装插件：hexo-github-dploy</p>\n<p>search功能插件：hexo-search-db</p>\n<p>具体参考文章顶部链接</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://hexo.io/docs/\">https://hexo.io/docs/</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h2><h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node hexo init blog  <span class=\"comment\"># create dir blog and init</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog </span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>修改_config.yml文件，具体配置项参考文章顶部链接</p>\n<h1 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node hexo clean  <span class=\"comment\"># clean</span></span><br><span class=\"line\">node hexo s  <span class=\"comment\"># start server to preview</span></span><br></pre></td></tr></table></figure>\n\n<p>修改主题：</p>\n<p>下载主题到theme目录下，修改_config.yml下theme配置即可</p>\n<h1 id=\"配合github-pages使用\"><a href=\"#配合github-pages使用\" class=\"headerlink\" title=\"配合github pages使用\"></a>配合github pages使用</h1><p>_config.yml配置github仓库以及branch</p>\n<p>一键deploy需要安装插件：hexo-github-dploy</p>\n<p>search功能插件：hexo-search-db</p>\n<p>具体参考文章顶部链接</p>\n"},{"title":"Java IO","date":"2022-05-31T00:37:56.000Z","_content":"\n# BIO -> NIO\n\n>  BIO： Blocking IO 阻塞IO，按字节进行处理\n>\n> NIO：No-Blocking IO（New-IO），非阻塞。按缓冲区处理\n\n\n\n# NIO\n\n3个组件：\n\n- Selector：检查Channel状态变化\n- Channel：运输数据通道\n- Buffer：数据存储\n\n零拷贝：\n\n- mmap（内核缓冲区与用户缓冲区的共享）\n\n- sendfile（系统底层函数支持）\n\n\n\n# 操作系统支持\n\nselect，poll，epoll\n\n\n\n\n\n","source":"_posts/Java-IO.md","raw":"---\ntitle: Java IO\ndate: 2022-05-31 08:37:56\ntags: \n  - Java\n  - IO\n---\n\n# BIO -> NIO\n\n>  BIO： Blocking IO 阻塞IO，按字节进行处理\n>\n> NIO：No-Blocking IO（New-IO），非阻塞。按缓冲区处理\n\n\n\n# NIO\n\n3个组件：\n\n- Selector：检查Channel状态变化\n- Channel：运输数据通道\n- Buffer：数据存储\n\n零拷贝：\n\n- mmap（内核缓冲区与用户缓冲区的共享）\n\n- sendfile（系统底层函数支持）\n\n\n\n# 操作系统支持\n\nselect，poll，epoll\n\n\n\n\n\n","slug":"Java-IO","published":1,"updated":"2022-05-31T00:50:33.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z6000cwuh89r6ldgnc","content":"<h1 id=\"BIO-gt-NIO\"><a href=\"#BIO-gt-NIO\" class=\"headerlink\" title=\"BIO -&gt; NIO\"></a>BIO -&gt; NIO</h1><blockquote>\n<p> BIO： Blocking IO 阻塞IO，按字节进行处理</p>\n<p>NIO：No-Blocking IO（New-IO），非阻塞。按缓冲区处理</p>\n</blockquote>\n<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>3个组件：</p>\n<ul>\n<li>Selector：检查Channel状态变化</li>\n<li>Channel：运输数据通道</li>\n<li>Buffer：数据存储</li>\n</ul>\n<p>零拷贝：</p>\n<ul>\n<li><p>mmap（内核缓冲区与用户缓冲区的共享）</p>\n</li>\n<li><p>sendfile（系统底层函数支持）</p>\n</li>\n</ul>\n<h1 id=\"操作系统支持\"><a href=\"#操作系统支持\" class=\"headerlink\" title=\"操作系统支持\"></a>操作系统支持</h1><p>select，poll，epoll</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"BIO-gt-NIO\"><a href=\"#BIO-gt-NIO\" class=\"headerlink\" title=\"BIO -&gt; NIO\"></a>BIO -&gt; NIO</h1><blockquote>\n<p> BIO： Blocking IO 阻塞IO，按字节进行处理</p>\n<p>NIO：No-Blocking IO（New-IO），非阻塞。按缓冲区处理</p>\n</blockquote>\n<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>3个组件：</p>\n<ul>\n<li>Selector：检查Channel状态变化</li>\n<li>Channel：运输数据通道</li>\n<li>Buffer：数据存储</li>\n</ul>\n<p>零拷贝：</p>\n<ul>\n<li><p>mmap（内核缓冲区与用户缓冲区的共享）</p>\n</li>\n<li><p>sendfile（系统底层函数支持）</p>\n</li>\n</ul>\n<h1 id=\"操作系统支持\"><a href=\"#操作系统支持\" class=\"headerlink\" title=\"操作系统支持\"></a>操作系统支持</h1><p>select，poll，epoll</p>\n"},{"title":"Java 基础","date":"2022-05-30T02:29:11.000Z","_content":"\n# 语言特性\n\n- 面向对象（封装、继承、多态）\n- 跨平台\n- 多线程支持\n- 编译与解释执行（class文件编译与JIT即时编译（编译为机器码），JVM执行时解释执行）\n\n\n\n# 基础\n\n1. 基础数据类型\n\n   | 基本类型  | 位数 | 字节 | 默认值  | 取值范围                                   |\n   | --------- | ---- | ---- | ------- | ------------------------------------------ |\n   | `byte`    | 8    | 1    | 0       | -128 ~ 127                                 |\n   | `short`   | 16   | 2    | 0       | -32768 ~ 32767                             |\n   | `int`     | 32   | 4    | 0       | -2147483648 ~ 2147483647                   |\n   | `long`    | 64   | 8    | 0L      | -9223372036854775808 ~ 9223372036854775807 |\n   | `char`    | 16   | 2    | 'u0000' | 0 ~ 65535                                  |\n   | `float`   | 32   | 4    | 0f      | 1.4E-45 ~ 3.4028235E38                     |\n   | `double`  | 64   | 8    | 0d      | 4.9E-324 ~ 1.7976931348623157E308          |\n   | `boolean` | 1    |      | false   | true、false                                |\n\n   注意：boolean长度为明确。取决于JVM实现，逻辑上是占用1位。\n\n2. 自动拆装箱\n\n   装箱其实就是调用了 包装类的`valueOf()`方法，拆箱其实就是调用了 `xxxValue()`方法。\n\n   1. **装箱**：将基本类型用它们对应的引用类型包装起来；\n   2. **拆箱**：将包装类型转换为基本数据类型；\n\n3. 局部变量与成员变量\n\n   局部变量通常在栈中，随方法调用结束而回收。无默认值需设置；\n\n   成员变量通常在堆中，随对象创建而存在。有默认值。\n\n4. 集合\n\n   List，Map，Set以及线程安全相关集合\n\n   集合操作参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md\n\n5. 并发\n\n6. 异常\n\n   共同祖先：java.lang.Throwable\n\n   重要子类：Exception与Error\n\n   **`Exception`** ：程序本身可以处理的异常，可以通过 `catch` 来进行捕获。`Exception` 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\n\n   - Checked Excpetion:\n     - IOException\n     - ClassNotFoundException\n     - SQLException\n     - FileNotFoundException\n   - Unchecked Exception:\n     - ArithmeticException\n     - ClassCastException\n     - NullPointException\n     - IllegalThreadStateException\n     - IndexOutOfBoundsException\n\n   **`Error`**：`Error` 属于程序无法处理的错误 ，~~我们没办法通过 `catch` 来进行捕获~~不建议通过`catch`捕获 。例如 Java 虚拟机运行错误（`Virtual MachineError`）、虚拟机内存不够错误(`OutOfMemoryError`)、类定义错误（`NoClassDefFoundError`）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\n\n   - OutOfMemoryError\n   - StackOverFlowError\n   - AssertionError\n   - VritualMachineError\n\n   注意：不要再finally中使用return！在try中return返回值会放在一个本地变量中，后续执行到finally中的return，会覆盖并返回。\n\n   JVM官方文档明确提到：\n\n   If the `try` clause executes a *return*, the compiled code does the following:\n\n   1. Saves the return value (if any) in a local variable.\n   2. Executes a *jsr* to the code for the `finally` clause.\n   3. Upon return from the `finally` clause, returns the value saved in the local variable.\n\n   异常使用规范：异常信息有意义；日志打印异常与抛出异常不要并存。\n\n7. 泛型\n\n   一套工具适配多种类型\n\n   提供编译时检查避免错误\n\n   泛型擦出：运行时泛型会去掉\n\n8. 反射\n\n   优点：灵活\n\n   缺点：性能问题，参考：https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow\n\n   应用场景：各种框架配置与调用都有用到反射。\n\n9. IO\n\n   操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 **用户空间（User space）** 和 **内核空间（Kernel space ）** 。\n\n   **从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。**\n\n   UNIX 系统下， IO 模型一共有 5 种： **同步阻塞 I/O**、**同步非阻塞 I/O**、**I/O 多路复用**、**信号驱动 I/O** 和**异步 I/O**。\n\n   - BIO\n\n     - 同步阻塞 I/O\n\n       阻塞每次读写，等到内核态数据拷贝完成返回。\n\n     - 同步非阻塞 I/O\n\n       多次读取不阻塞，内核态数据拷贝时时阻塞。\n\n   - NIO\n\n     - select \n\n       维护很多socket连接（创建链接时维护socket集合），通过询问内核是否已准备好数据，如果准备好再发器read（读取过程依旧是阻塞的），内核轮询socket集合，找到准备完成的socket进行数据读取（可能只有部分socket活跃，每次轮训耗时长且无意义）。每次需要将socket集合传递给内核，有一定开销。进程被唤醒拿到相应还需要遍历确定哪个socket收到数据，共需要两次遍历。select有最大文件描述符数量限制。\n\n       ```c\n       int select(int nfds, fd_set *readfds, fd_set *writefds,\n                  fd_set *exceptfds, struct timeval *timeout);\n       ```\n\n       \n\n     - pool 同select，但是无最大文件描述符限制\n\n       ```c\n       int poll(struct pollfd fds[], nfds_t nfds, int timeout)；\n       ```\n\n       \n\n     - epool\n\n       基于事件\n\n       ```c\n       struct epitem {\n         struct rb_node  rbn;      \n         struct list_head  rdllink; \n         struct epitem  *next;      \n         struct epoll_filefd  ffd;  \n         int  nwait;                 \n         struct list_head  pwqlist;  \n         struct eventpoll  *ep;      \n         struct list_head  fllink;   \n         struct epoll_event  event;  \n       };\n       \n       struct eventpoll {\n         spin_lock_t       lock; \n         struct mutex      mtx;  \n         wait_queue_head_t     wq; \n         wait_queue_head_t   poll_wait; \n         struct list_head    rdllist;   //就绪链表\n         struct rb_root      rbr;      //红黑树根节点 \n         struct epitem      *ovflist;\n       };\n       \n       //用户数据载体\n       typedef union epoll_data {\n          void    *ptr;\n          int      fd;\n          uint32_t u32;\n          uint64_t u64;\n       } epoll_data_t;\n       //fd装载入内核的载体\n        struct epoll_event {\n            uint32_t     events;    /* Epoll events */\n            epoll_data_t data;      /* User data variable */\n        };\n        //三板斧api\n       int epoll_create(int size); \n       int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);  \n       int epoll_wait(int epfd, struct epoll_event *events,\n                        int maxevents, int timeout);\n       ```\n\n       \n\n   - AIO\n\n     拿回数据异步\n\n   参考链接：https://www.jianshu.com/p/722819425dbd\n\n   \n\n   10. JVM\n\n       可以先看看这个：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md\n\n       \n\n       - 内存分配\n\n       堆：eden区，2个suvivor区，old区。对象创建会在eden创建，经过一次回收会搬到suvivor区，后续每经过一次回收对象年龄加一，直到到达老年代阈值（默认15岁），对象进入老年代。老年代阈值会根据配置动态计算。\n\n       栈：本地方法栈、虚拟机栈以及程序计数器\n\n       方法区：加载的类信息以及运行时常量池以及JIT编译代码缓存。字符串常量池与静态变量均在堆中。\n\n       参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md\n\n       \n\n       - 对象创建流程\n\n         1. 类加载\n\n            检查是否已加载过，如果没有进行类加载\n\n         2. 申请内存\n\n            类加载完成即可确定需要的内存，随后便申请内存分配\n\n            分配策略：\n\n            - 指针碰撞\n\n              维护一个指针，区分已使用空间与未使用空间。\n\n            - 空闲列表\n\n              维护一个列表，记录哪些内存块可用\n\n            并发分配内存：\n\n            - CAS+失败重试：通过CAS保证操作原子性\n            - TLAB（Thread Local Allocation Buffer：本地分配缓存区，在线程初始化时申请Eden一部分空间）：分配内存时先在TLAB分配，到达一定量后通过CAS刷新到堆上。缺点：空间较小大对象无法适配。\n\n         3. 类初始化\n\n            - 初始化零值\n\n              设置初始值，对象头不调整\n\n            - 设置对象头\n\n              **虚拟机要对对象进行必要的设置**，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 **这些信息存放在对象头中。** 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。\n\n            - init方法执行\n\n       - 对象内存布局\n\n         对象头，实例数据，对齐填充\n\n         **Hotspot 虚拟机的对象头包括两部分信息**，**第一部分用于存储对象自身的运行时数据**（哈希码、GC 分代年龄、锁状态标志等等），**另一部分是类型指针**，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。\n\n         **实例数据部分是对象真正存储的有效信息**，也是在程序中所定义的各种类型的字段内容。\n\n         **对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。** 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。\n\n         \n\n       - 对象访问方式\n\n         句柄和直接指针\n\n         - 句柄指向句柄池数据（堆），再由句柄池指向实例数据（堆）和对象类型数据（栈）\n\n         - 直接指针直接执行对象实例数据（堆），其对象头存在指向对象类型数据（栈）的指针\n\n         优缺点：句柄在对象变化过程后用户的引用无需变化，而直接指针需要变化。但是直接指针少一次指针定位开销，速度更快。\n\n       - 类加载模型\n\n         双亲委托\n\n         如果自定义类加载器：继承`ClassLoader`，重写`findClass()`方法，如果需要打破双亲委托，则需要重写`loadClass()`方法\n\n       - JVM参数与优化\n\n         参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md\n\n# 面试问题整理\n\n1. 字符型常量与字符串常量的区别？\n\n   字符常量相当于一个整形ASCII值，可以参与运算；字符串是内存地址。字符串常量2个字节；字符串若干个字节\n\n2. 重写遵循规范\n\n   1. 方法名，形参需要相同\n   2. 返回值类型以及声明异常均小于或等于父类方法\n   3. 访问权限需大于或等于父类方法\n\n3. 可变长参数\n\n   可以传入不等长参数：\n\n   ```java\n   public static void method(String... args) {\n      //......\n   }\n   ```\n\n   需要注意的：如果方法重载，固定参数方法优先级会高于变长参数方法\n\n   \n\n   \n\n4. 基本数据类型与包装类的区别？\n\n   1. 包装类型默认值null\n   2. 包装类型可用于泛型\n   3. 基本数据类型局部变量存储与Java虚拟机栈局部变量表中，基本数据类型的成员变量存在堆中，包装类型都在堆中\n\n5. 构造方否可以override？\n\n   不能override，可以overload\n\n6. java 9为何将String底层由 char[] 改成了 byte[] ?\n\n   新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，`byte` 占一个字节(8 位)，`char` 占用 2 个字节（16），`byte` 相较 `char` 节省一半的内存空间。\n\n7. String采用运算符“+”拼接为何耗费内存？\n\n   内部采用StringBuillder.append() 方法实现，拼接完后调用toString() 得到Stirng对象。这样就会存在大量的StringBuilder对象。\n\n8. 字符串常量池什么作用？\n\n   创建字符串后会在堆中创建具体对象，然后在常量池中创建对应的引用。访问字符串是直接返回常量池中的引用即可。字节码命令“ldc” 可以判断字符串常量池是否保存对应的字符串对象引用。\n\n9. intern方法作用\n\n   native方法：如果字符串常量池不包含字符串饮用添加。然后返回字符串引用。\n\n10. 常量折叠\n\n    对于源代码中存在的可以确定的static final修饰的基础变量数据类型以及String，会对其进行计算并作为常量嵌入最终生成代码中。这事javac编译器做的优化\n\n11. finally代码一定执行吗？\n\n    不一定！虚拟机异常终止便不会执行了。比如调用：System.exit(1); 还有所在线程死亡，CPU停止执行。\n\n12. Java只有值传递吗？\n\n    是的，无论是基础类型还是引用类型。如果要修改对象值，通过引用修改即可。\n\n13. 通过类加载器与Class.forName()差异\n\n    Class.forName() 可以指定是否初始化Class，类加载器不会初始化。如果不出实话静态代码不会得到执行。\n\n14. 精度丢失与BigDecimal\n\n    由于float，double等表示小数时由于二进制存储原理，对于一些小数没有精确的2进制表示形式所以存在精度丢失。BigDecimal实现利用了BigInteger，并加入小数位的概念实现避免了精读丢失。\n\n    \n\n    \n\n\n\n\n\n","source":"_posts/Java-基础.md","raw":"---\ntitle: Java 基础\ndate: 2022-05-30 10:29:11\ntags: \n  - 面试 \n  - Java \n  - 基础\n---\n\n# 语言特性\n\n- 面向对象（封装、继承、多态）\n- 跨平台\n- 多线程支持\n- 编译与解释执行（class文件编译与JIT即时编译（编译为机器码），JVM执行时解释执行）\n\n\n\n# 基础\n\n1. 基础数据类型\n\n   | 基本类型  | 位数 | 字节 | 默认值  | 取值范围                                   |\n   | --------- | ---- | ---- | ------- | ------------------------------------------ |\n   | `byte`    | 8    | 1    | 0       | -128 ~ 127                                 |\n   | `short`   | 16   | 2    | 0       | -32768 ~ 32767                             |\n   | `int`     | 32   | 4    | 0       | -2147483648 ~ 2147483647                   |\n   | `long`    | 64   | 8    | 0L      | -9223372036854775808 ~ 9223372036854775807 |\n   | `char`    | 16   | 2    | 'u0000' | 0 ~ 65535                                  |\n   | `float`   | 32   | 4    | 0f      | 1.4E-45 ~ 3.4028235E38                     |\n   | `double`  | 64   | 8    | 0d      | 4.9E-324 ~ 1.7976931348623157E308          |\n   | `boolean` | 1    |      | false   | true、false                                |\n\n   注意：boolean长度为明确。取决于JVM实现，逻辑上是占用1位。\n\n2. 自动拆装箱\n\n   装箱其实就是调用了 包装类的`valueOf()`方法，拆箱其实就是调用了 `xxxValue()`方法。\n\n   1. **装箱**：将基本类型用它们对应的引用类型包装起来；\n   2. **拆箱**：将包装类型转换为基本数据类型；\n\n3. 局部变量与成员变量\n\n   局部变量通常在栈中，随方法调用结束而回收。无默认值需设置；\n\n   成员变量通常在堆中，随对象创建而存在。有默认值。\n\n4. 集合\n\n   List，Map，Set以及线程安全相关集合\n\n   集合操作参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md\n\n5. 并发\n\n6. 异常\n\n   共同祖先：java.lang.Throwable\n\n   重要子类：Exception与Error\n\n   **`Exception`** ：程序本身可以处理的异常，可以通过 `catch` 来进行捕获。`Exception` 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\n\n   - Checked Excpetion:\n     - IOException\n     - ClassNotFoundException\n     - SQLException\n     - FileNotFoundException\n   - Unchecked Exception:\n     - ArithmeticException\n     - ClassCastException\n     - NullPointException\n     - IllegalThreadStateException\n     - IndexOutOfBoundsException\n\n   **`Error`**：`Error` 属于程序无法处理的错误 ，~~我们没办法通过 `catch` 来进行捕获~~不建议通过`catch`捕获 。例如 Java 虚拟机运行错误（`Virtual MachineError`）、虚拟机内存不够错误(`OutOfMemoryError`)、类定义错误（`NoClassDefFoundError`）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\n\n   - OutOfMemoryError\n   - StackOverFlowError\n   - AssertionError\n   - VritualMachineError\n\n   注意：不要再finally中使用return！在try中return返回值会放在一个本地变量中，后续执行到finally中的return，会覆盖并返回。\n\n   JVM官方文档明确提到：\n\n   If the `try` clause executes a *return*, the compiled code does the following:\n\n   1. Saves the return value (if any) in a local variable.\n   2. Executes a *jsr* to the code for the `finally` clause.\n   3. Upon return from the `finally` clause, returns the value saved in the local variable.\n\n   异常使用规范：异常信息有意义；日志打印异常与抛出异常不要并存。\n\n7. 泛型\n\n   一套工具适配多种类型\n\n   提供编译时检查避免错误\n\n   泛型擦出：运行时泛型会去掉\n\n8. 反射\n\n   优点：灵活\n\n   缺点：性能问题，参考：https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow\n\n   应用场景：各种框架配置与调用都有用到反射。\n\n9. IO\n\n   操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 **用户空间（User space）** 和 **内核空间（Kernel space ）** 。\n\n   **从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。**\n\n   UNIX 系统下， IO 模型一共有 5 种： **同步阻塞 I/O**、**同步非阻塞 I/O**、**I/O 多路复用**、**信号驱动 I/O** 和**异步 I/O**。\n\n   - BIO\n\n     - 同步阻塞 I/O\n\n       阻塞每次读写，等到内核态数据拷贝完成返回。\n\n     - 同步非阻塞 I/O\n\n       多次读取不阻塞，内核态数据拷贝时时阻塞。\n\n   - NIO\n\n     - select \n\n       维护很多socket连接（创建链接时维护socket集合），通过询问内核是否已准备好数据，如果准备好再发器read（读取过程依旧是阻塞的），内核轮询socket集合，找到准备完成的socket进行数据读取（可能只有部分socket活跃，每次轮训耗时长且无意义）。每次需要将socket集合传递给内核，有一定开销。进程被唤醒拿到相应还需要遍历确定哪个socket收到数据，共需要两次遍历。select有最大文件描述符数量限制。\n\n       ```c\n       int select(int nfds, fd_set *readfds, fd_set *writefds,\n                  fd_set *exceptfds, struct timeval *timeout);\n       ```\n\n       \n\n     - pool 同select，但是无最大文件描述符限制\n\n       ```c\n       int poll(struct pollfd fds[], nfds_t nfds, int timeout)；\n       ```\n\n       \n\n     - epool\n\n       基于事件\n\n       ```c\n       struct epitem {\n         struct rb_node  rbn;      \n         struct list_head  rdllink; \n         struct epitem  *next;      \n         struct epoll_filefd  ffd;  \n         int  nwait;                 \n         struct list_head  pwqlist;  \n         struct eventpoll  *ep;      \n         struct list_head  fllink;   \n         struct epoll_event  event;  \n       };\n       \n       struct eventpoll {\n         spin_lock_t       lock; \n         struct mutex      mtx;  \n         wait_queue_head_t     wq; \n         wait_queue_head_t   poll_wait; \n         struct list_head    rdllist;   //就绪链表\n         struct rb_root      rbr;      //红黑树根节点 \n         struct epitem      *ovflist;\n       };\n       \n       //用户数据载体\n       typedef union epoll_data {\n          void    *ptr;\n          int      fd;\n          uint32_t u32;\n          uint64_t u64;\n       } epoll_data_t;\n       //fd装载入内核的载体\n        struct epoll_event {\n            uint32_t     events;    /* Epoll events */\n            epoll_data_t data;      /* User data variable */\n        };\n        //三板斧api\n       int epoll_create(int size); \n       int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);  \n       int epoll_wait(int epfd, struct epoll_event *events,\n                        int maxevents, int timeout);\n       ```\n\n       \n\n   - AIO\n\n     拿回数据异步\n\n   参考链接：https://www.jianshu.com/p/722819425dbd\n\n   \n\n   10. JVM\n\n       可以先看看这个：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md\n\n       \n\n       - 内存分配\n\n       堆：eden区，2个suvivor区，old区。对象创建会在eden创建，经过一次回收会搬到suvivor区，后续每经过一次回收对象年龄加一，直到到达老年代阈值（默认15岁），对象进入老年代。老年代阈值会根据配置动态计算。\n\n       栈：本地方法栈、虚拟机栈以及程序计数器\n\n       方法区：加载的类信息以及运行时常量池以及JIT编译代码缓存。字符串常量池与静态变量均在堆中。\n\n       参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md\n\n       \n\n       - 对象创建流程\n\n         1. 类加载\n\n            检查是否已加载过，如果没有进行类加载\n\n         2. 申请内存\n\n            类加载完成即可确定需要的内存，随后便申请内存分配\n\n            分配策略：\n\n            - 指针碰撞\n\n              维护一个指针，区分已使用空间与未使用空间。\n\n            - 空闲列表\n\n              维护一个列表，记录哪些内存块可用\n\n            并发分配内存：\n\n            - CAS+失败重试：通过CAS保证操作原子性\n            - TLAB（Thread Local Allocation Buffer：本地分配缓存区，在线程初始化时申请Eden一部分空间）：分配内存时先在TLAB分配，到达一定量后通过CAS刷新到堆上。缺点：空间较小大对象无法适配。\n\n         3. 类初始化\n\n            - 初始化零值\n\n              设置初始值，对象头不调整\n\n            - 设置对象头\n\n              **虚拟机要对对象进行必要的设置**，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 **这些信息存放在对象头中。** 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。\n\n            - init方法执行\n\n       - 对象内存布局\n\n         对象头，实例数据，对齐填充\n\n         **Hotspot 虚拟机的对象头包括两部分信息**，**第一部分用于存储对象自身的运行时数据**（哈希码、GC 分代年龄、锁状态标志等等），**另一部分是类型指针**，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。\n\n         **实例数据部分是对象真正存储的有效信息**，也是在程序中所定义的各种类型的字段内容。\n\n         **对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。** 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。\n\n         \n\n       - 对象访问方式\n\n         句柄和直接指针\n\n         - 句柄指向句柄池数据（堆），再由句柄池指向实例数据（堆）和对象类型数据（栈）\n\n         - 直接指针直接执行对象实例数据（堆），其对象头存在指向对象类型数据（栈）的指针\n\n         优缺点：句柄在对象变化过程后用户的引用无需变化，而直接指针需要变化。但是直接指针少一次指针定位开销，速度更快。\n\n       - 类加载模型\n\n         双亲委托\n\n         如果自定义类加载器：继承`ClassLoader`，重写`findClass()`方法，如果需要打破双亲委托，则需要重写`loadClass()`方法\n\n       - JVM参数与优化\n\n         参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md\n\n# 面试问题整理\n\n1. 字符型常量与字符串常量的区别？\n\n   字符常量相当于一个整形ASCII值，可以参与运算；字符串是内存地址。字符串常量2个字节；字符串若干个字节\n\n2. 重写遵循规范\n\n   1. 方法名，形参需要相同\n   2. 返回值类型以及声明异常均小于或等于父类方法\n   3. 访问权限需大于或等于父类方法\n\n3. 可变长参数\n\n   可以传入不等长参数：\n\n   ```java\n   public static void method(String... args) {\n      //......\n   }\n   ```\n\n   需要注意的：如果方法重载，固定参数方法优先级会高于变长参数方法\n\n   \n\n   \n\n4. 基本数据类型与包装类的区别？\n\n   1. 包装类型默认值null\n   2. 包装类型可用于泛型\n   3. 基本数据类型局部变量存储与Java虚拟机栈局部变量表中，基本数据类型的成员变量存在堆中，包装类型都在堆中\n\n5. 构造方否可以override？\n\n   不能override，可以overload\n\n6. java 9为何将String底层由 char[] 改成了 byte[] ?\n\n   新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，`byte` 占一个字节(8 位)，`char` 占用 2 个字节（16），`byte` 相较 `char` 节省一半的内存空间。\n\n7. String采用运算符“+”拼接为何耗费内存？\n\n   内部采用StringBuillder.append() 方法实现，拼接完后调用toString() 得到Stirng对象。这样就会存在大量的StringBuilder对象。\n\n8. 字符串常量池什么作用？\n\n   创建字符串后会在堆中创建具体对象，然后在常量池中创建对应的引用。访问字符串是直接返回常量池中的引用即可。字节码命令“ldc” 可以判断字符串常量池是否保存对应的字符串对象引用。\n\n9. intern方法作用\n\n   native方法：如果字符串常量池不包含字符串饮用添加。然后返回字符串引用。\n\n10. 常量折叠\n\n    对于源代码中存在的可以确定的static final修饰的基础变量数据类型以及String，会对其进行计算并作为常量嵌入最终生成代码中。这事javac编译器做的优化\n\n11. finally代码一定执行吗？\n\n    不一定！虚拟机异常终止便不会执行了。比如调用：System.exit(1); 还有所在线程死亡，CPU停止执行。\n\n12. Java只有值传递吗？\n\n    是的，无论是基础类型还是引用类型。如果要修改对象值，通过引用修改即可。\n\n13. 通过类加载器与Class.forName()差异\n\n    Class.forName() 可以指定是否初始化Class，类加载器不会初始化。如果不出实话静态代码不会得到执行。\n\n14. 精度丢失与BigDecimal\n\n    由于float，double等表示小数时由于二进制存储原理，对于一些小数没有精确的2进制表示形式所以存在精度丢失。BigDecimal实现利用了BigInteger，并加入小数位的概念实现避免了精读丢失。\n\n    \n\n    \n\n\n\n\n\n","slug":"Java-基础","published":1,"updated":"2022-05-30T09:00:28.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z7000ewuh80cd07vha","content":"<h1 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h1><ul>\n<li>面向对象（封装、继承、多态）</li>\n<li>跨平台</li>\n<li>多线程支持</li>\n<li>编译与解释执行（class文件编译与JIT即时编译（编译为机器码），JVM执行时解释执行）</li>\n</ul>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><p>基础数据类型</p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>位数</th>\n<th>字节</th>\n<th>默认值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td>0</td>\n<td>-128 ~ 127</td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td>0</td>\n<td>-32768 ~ 32767</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td>0</td>\n<td>-2147483648 ~ 2147483647</td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td>0L</td>\n<td>-9223372036854775808 ~ 9223372036854775807</td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td>‘u0000’</td>\n<td>0 ~ 65535</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td>0f</td>\n<td>1.4E-45 ~ 3.4028235E38</td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td>0d</td>\n<td>4.9E-324 ~ 1.7976931348623157E308</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>1</td>\n<td></td>\n<td>false</td>\n<td>true、false</td>\n</tr>\n</tbody></table>\n<p>注意：boolean长度为明确。取决于JVM实现，逻辑上是占用1位。</p>\n</li>\n<li><p>自动拆装箱</p>\n<p>装箱其实就是调用了 包装类的<code>valueOf()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p>\n<ol>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ol>\n</li>\n<li><p>局部变量与成员变量</p>\n<p>局部变量通常在栈中，随方法调用结束而回收。无默认值需设置；</p>\n<p>成员变量通常在堆中，随对象创建而存在。有默认值。</p>\n</li>\n<li><p>集合</p>\n<p>List，Map，Set以及线程安全相关集合</p>\n<p>集合操作参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md</a></p>\n</li>\n<li><p>并发</p>\n</li>\n<li><p>异常</p>\n<p>共同祖先：java.lang.Throwable</p>\n<p>重要子类：Exception与Error</p>\n<p><strong><code>Exception</code></strong> ：程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</p>\n<ul>\n<li>Checked Excpetion:<ul>\n<li>IOException</li>\n<li>ClassNotFoundException</li>\n<li>SQLException</li>\n<li>FileNotFoundException</li>\n</ul>\n</li>\n<li>Unchecked Exception:<ul>\n<li>ArithmeticException</li>\n<li>ClassCastException</li>\n<li>NullPointException</li>\n<li>IllegalThreadStateException</li>\n<li>IndexOutOfBoundsException</li>\n</ul>\n</li>\n</ul>\n<p>**<code>Error</code>**：<code>Error</code> 属于程序无法处理的错误 ，<del>我们没办法通过 <code>catch</code> 来进行捕获</del>不建议通过<code>catch</code>捕获 。例如 Java 虚拟机运行错误（<code>Virtual MachineError</code>）、虚拟机内存不够错误(<code>OutOfMemoryError</code>)、类定义错误（<code>NoClassDefFoundError</code>）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p>\n<ul>\n<li>OutOfMemoryError</li>\n<li>StackOverFlowError</li>\n<li>AssertionError</li>\n<li>VritualMachineError</li>\n</ul>\n<p>注意：不要再finally中使用return！在try中return返回值会放在一个本地变量中，后续执行到finally中的return，会覆盖并返回。</p>\n<p>JVM官方文档明确提到：</p>\n<p>If the <code>try</code> clause executes a <em>return</em>, the compiled code does the following:</p>\n<ol>\n<li>Saves the return value (if any) in a local variable.</li>\n<li>Executes a <em>jsr</em> to the code for the <code>finally</code> clause.</li>\n<li>Upon return from the <code>finally</code> clause, returns the value saved in the local variable.</li>\n</ol>\n<p>异常使用规范：异常信息有意义；日志打印异常与抛出异常不要并存。</p>\n</li>\n<li><p>泛型</p>\n<p>一套工具适配多种类型</p>\n<p>提供编译时检查避免错误</p>\n<p>泛型擦出：运行时泛型会去掉</p>\n</li>\n<li><p>反射</p>\n<p>优点：灵活</p>\n<p>缺点：性能问题，参考：<a href=\"https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow\">https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow</a></p>\n<p>应用场景：各种框架配置与调用都有用到反射。</p>\n</li>\n<li><p>IO</p>\n<p>操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 <strong>用户空间（User space）</strong> 和 <strong>内核空间（Kernel space ）</strong> 。</p>\n<p><strong>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。</strong></p>\n<p>UNIX 系统下， IO 模型一共有 5 种： <strong>同步阻塞 I&#x2F;O</strong>、<strong>同步非阻塞 I&#x2F;O</strong>、<strong>I&#x2F;O 多路复用</strong>、<strong>信号驱动 I&#x2F;O</strong> 和<strong>异步 I&#x2F;O</strong>。</p>\n<ul>\n<li><p>BIO</p>\n<ul>\n<li><p>同步阻塞 I&#x2F;O</p>\n<p>阻塞每次读写，等到内核态数据拷贝完成返回。</p>\n</li>\n<li><p>同步非阻塞 I&#x2F;O</p>\n<p>多次读取不阻塞，内核态数据拷贝时时阻塞。</p>\n</li>\n</ul>\n</li>\n<li><p>NIO</p>\n<ul>\n<li><p>select </p>\n<p>维护很多socket连接（创建链接时维护socket集合），通过询问内核是否已准备好数据，如果准备好再发器read（读取过程依旧是阻塞的），内核轮询socket集合，找到准备完成的socket进行数据读取（可能只有部分socket活跃，每次轮训耗时长且无意义）。每次需要将socket集合传递给内核，有一定开销。进程被唤醒拿到相应还需要遍历确定哪个socket收到数据，共需要两次遍历。select有最大文件描述符数量限制。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class=\"line\"><span class=\"params\">           fd_set *exceptfds, <span class=\"keyword\">struct</span> timeval *timeout)</span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>pool 同select，但是无最大文件描述符限制</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">poll</span><span class=\"params\">(<span class=\"keyword\">struct</span> pollfd fds[], <span class=\"type\">nfds_t</span> nfds, <span class=\"type\">int</span> timeout)</span>；</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>epool</p>\n<p>基于事件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_node</span>  <span class=\"title\">rbn</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">rdllink</span>;</span> </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span>  *<span class=\"title\">next</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_filefd</span>  <span class=\"title\">ffd</span>;</span>  </span><br><span class=\"line\">  <span class=\"type\">int</span>  nwait;                 </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">pwqlist</span>;</span>  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span>  *<span class=\"title\">ep</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">fllink</span>;</span>   </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span>  <span class=\"title\">event</span>;</span>  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">spin_lock_t</span>       lock; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mutex</span>      <span class=\"title\">mtx</span>;</span>  </span><br><span class=\"line\">  <span class=\"type\">wait_queue_head_t</span>     wq; </span><br><span class=\"line\">  <span class=\"type\">wait_queue_head_t</span>   poll_wait; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>    <span class=\"title\">rdllist</span>;</span>   <span class=\"comment\">//就绪链表</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_root</span>      <span class=\"title\">rbr</span>;</span>      <span class=\"comment\">//红黑树根节点 </span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span>      *<span class=\"title\">ovflist</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用户数据载体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">epoll_data</span> &#123;</span></span><br><span class=\"line\">   <span class=\"type\">void</span>    *ptr;</span><br><span class=\"line\">   <span class=\"type\">int</span>      fd;</span><br><span class=\"line\">   <span class=\"type\">uint32_t</span> u32;</span><br><span class=\"line\">   <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\">&#125; <span class=\"type\">epoll_data_t</span>;</span><br><span class=\"line\"><span class=\"comment\">//fd装载入内核的载体</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span> &#123;</span></span><br><span class=\"line\">     <span class=\"type\">uint32_t</span>     events;    <span class=\"comment\">/* Epoll events */</span></span><br><span class=\"line\">     <span class=\"type\">epoll_data_t</span> data;      <span class=\"comment\">/* User data variable */</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">//三板斧api</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_create</span><span class=\"params\">(<span class=\"type\">int</span> size)</span>; </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_ctl</span><span class=\"params\">(<span class=\"type\">int</span> epfd, <span class=\"type\">int</span> op, <span class=\"type\">int</span> fd, <span class=\"keyword\">struct</span> epoll_event *event)</span>;  </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_wait</span><span class=\"params\">(<span class=\"type\">int</span> epfd, <span class=\"keyword\">struct</span> epoll_event *events,</span></span><br><span class=\"line\"><span class=\"params\">                 <span class=\"type\">int</span> maxevents, <span class=\"type\">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>AIO</p>\n<p>拿回数据异步</p>\n</li>\n</ul>\n<p>参考链接：<a href=\"https://www.jianshu.com/p/722819425dbd\">https://www.jianshu.com/p/722819425dbd</a></p>\n<ol start=\"10\">\n<li><p>JVM</p>\n<p>可以先看看这个：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md</a></p>\n<ul>\n<li>内存分配</li>\n</ul>\n<p>堆：eden区，2个suvivor区，old区。对象创建会在eden创建，经过一次回收会搬到suvivor区，后续每经过一次回收对象年龄加一，直到到达老年代阈值（默认15岁），对象进入老年代。老年代阈值会根据配置动态计算。</p>\n<p>栈：本地方法栈、虚拟机栈以及程序计数器</p>\n<p>方法区：加载的类信息以及运行时常量池以及JIT编译代码缓存。字符串常量池与静态变量均在堆中。</p>\n<p>参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md</a></p>\n<ul>\n<li><p>对象创建流程</p>\n<ol>\n<li><p>类加载</p>\n<p>检查是否已加载过，如果没有进行类加载</p>\n</li>\n<li><p>申请内存</p>\n<p>类加载完成即可确定需要的内存，随后便申请内存分配</p>\n<p>分配策略：</p>\n<ul>\n<li><p>指针碰撞</p>\n<p>维护一个指针，区分已使用空间与未使用空间。</p>\n</li>\n<li><p>空闲列表</p>\n<p>维护一个列表，记录哪些内存块可用</p>\n</li>\n</ul>\n<p>并发分配内存：</p>\n<ul>\n<li>CAS+失败重试：通过CAS保证操作原子性</li>\n<li>TLAB（Thread Local Allocation Buffer：本地分配缓存区，在线程初始化时申请Eden一部分空间）：分配内存时先在TLAB分配，到达一定量后通过CAS刷新到堆上。缺点：空间较小大对象无法适配。</li>\n</ul>\n</li>\n<li><p>类初始化</p>\n<ul>\n<li><p>初始化零值</p>\n<p>设置初始值，对象头不调整</p>\n</li>\n<li><p>设置对象头</p>\n<p><strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>\n</li>\n<li><p>init方法执行</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>对象内存布局</p>\n<p>对象头，实例数据，对齐填充</p>\n<p><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>\n<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>\n<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>\n</li>\n<li><p>对象访问方式</p>\n<p>句柄和直接指针</p>\n<ul>\n<li><p>句柄指向句柄池数据（堆），再由句柄池指向实例数据（堆）和对象类型数据（栈）</p>\n</li>\n<li><p>直接指针直接执行对象实例数据（堆），其对象头存在指向对象类型数据（栈）的指针</p>\n</li>\n</ul>\n<p>优缺点：句柄在对象变化过程后用户的引用无需变化，而直接指针需要变化。但是直接指针少一次指针定位开销，速度更快。</p>\n</li>\n<li><p>类加载模型</p>\n<p>双亲委托</p>\n<p>如果自定义类加载器：继承<code>ClassLoader</code>，重写<code>findClass()</code>方法，如果需要打破双亲委托，则需要重写<code>loadClass()</code>方法</p>\n</li>\n<li><p>JVM参数与优化</p>\n<p>参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"面试问题整理\"><a href=\"#面试问题整理\" class=\"headerlink\" title=\"面试问题整理\"></a>面试问题整理</h1><ol>\n<li><p>字符型常量与字符串常量的区别？</p>\n<p>字符常量相当于一个整形ASCII值，可以参与运算；字符串是内存地址。字符串常量2个字节；字符串若干个字节</p>\n</li>\n<li><p>重写遵循规范</p>\n<ol>\n<li>方法名，形参需要相同</li>\n<li>返回值类型以及声明异常均小于或等于父类方法</li>\n<li>访问权限需大于或等于父类方法</li>\n</ol>\n</li>\n<li><p>可变长参数</p>\n<p>可以传入不等长参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的：如果方法重载，固定参数方法优先级会高于变长参数方法</p>\n</li>\n<li><p>基本数据类型与包装类的区别？</p>\n<ol>\n<li>包装类型默认值null</li>\n<li>包装类型可用于泛型</li>\n<li>基本数据类型局部变量存储与Java虚拟机栈局部变量表中，基本数据类型的成员变量存在堆中，包装类型都在堆中</li>\n</ol>\n</li>\n<li><p>构造方否可以override？</p>\n<p>不能override，可以overload</p>\n</li>\n<li><p>java 9为何将String底层由 char[] 改成了 byte[] ?</p>\n<p>新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，<code>byte</code> 占一个字节(8 位)，<code>char</code> 占用 2 个字节（16），<code>byte</code> 相较 <code>char</code> 节省一半的内存空间。</p>\n</li>\n<li><p>String采用运算符“+”拼接为何耗费内存？</p>\n<p>内部采用StringBuillder.append() 方法实现，拼接完后调用toString() 得到Stirng对象。这样就会存在大量的StringBuilder对象。</p>\n</li>\n<li><p>字符串常量池什么作用？</p>\n<p>创建字符串后会在堆中创建具体对象，然后在常量池中创建对应的引用。访问字符串是直接返回常量池中的引用即可。字节码命令“ldc” 可以判断字符串常量池是否保存对应的字符串对象引用。</p>\n</li>\n<li><p>intern方法作用</p>\n<p>native方法：如果字符串常量池不包含字符串饮用添加。然后返回字符串引用。</p>\n</li>\n<li><p>常量折叠</p>\n<p>对于源代码中存在的可以确定的static final修饰的基础变量数据类型以及String，会对其进行计算并作为常量嵌入最终生成代码中。这事javac编译器做的优化</p>\n</li>\n<li><p>finally代码一定执行吗？</p>\n<p>不一定！虚拟机异常终止便不会执行了。比如调用：System.exit(1); 还有所在线程死亡，CPU停止执行。</p>\n</li>\n<li><p>Java只有值传递吗？</p>\n<p>是的，无论是基础类型还是引用类型。如果要修改对象值，通过引用修改即可。</p>\n</li>\n<li><p>通过类加载器与Class.forName()差异</p>\n<p>Class.forName() 可以指定是否初始化Class，类加载器不会初始化。如果不出实话静态代码不会得到执行。</p>\n</li>\n<li><p>精度丢失与BigDecimal</p>\n<p>由于float，double等表示小数时由于二进制存储原理，对于一些小数没有精确的2进制表示形式所以存在精度丢失。BigDecimal实现利用了BigInteger，并加入小数位的概念实现避免了精读丢失。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h1><ul>\n<li>面向对象（封装、继承、多态）</li>\n<li>跨平台</li>\n<li>多线程支持</li>\n<li>编译与解释执行（class文件编译与JIT即时编译（编译为机器码），JVM执行时解释执行）</li>\n</ul>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><p>基础数据类型</p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>位数</th>\n<th>字节</th>\n<th>默认值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td>0</td>\n<td>-128 ~ 127</td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td>0</td>\n<td>-32768 ~ 32767</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td>0</td>\n<td>-2147483648 ~ 2147483647</td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td>0L</td>\n<td>-9223372036854775808 ~ 9223372036854775807</td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td>‘u0000’</td>\n<td>0 ~ 65535</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td>0f</td>\n<td>1.4E-45 ~ 3.4028235E38</td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td>0d</td>\n<td>4.9E-324 ~ 1.7976931348623157E308</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>1</td>\n<td></td>\n<td>false</td>\n<td>true、false</td>\n</tr>\n</tbody></table>\n<p>注意：boolean长度为明确。取决于JVM实现，逻辑上是占用1位。</p>\n</li>\n<li><p>自动拆装箱</p>\n<p>装箱其实就是调用了 包装类的<code>valueOf()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p>\n<ol>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ol>\n</li>\n<li><p>局部变量与成员变量</p>\n<p>局部变量通常在栈中，随方法调用结束而回收。无默认值需设置；</p>\n<p>成员变量通常在堆中，随对象创建而存在。有默认值。</p>\n</li>\n<li><p>集合</p>\n<p>List，Map，Set以及线程安全相关集合</p>\n<p>集合操作参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md</a></p>\n</li>\n<li><p>并发</p>\n</li>\n<li><p>异常</p>\n<p>共同祖先：java.lang.Throwable</p>\n<p>重要子类：Exception与Error</p>\n<p><strong><code>Exception</code></strong> ：程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</p>\n<ul>\n<li>Checked Excpetion:<ul>\n<li>IOException</li>\n<li>ClassNotFoundException</li>\n<li>SQLException</li>\n<li>FileNotFoundException</li>\n</ul>\n</li>\n<li>Unchecked Exception:<ul>\n<li>ArithmeticException</li>\n<li>ClassCastException</li>\n<li>NullPointException</li>\n<li>IllegalThreadStateException</li>\n<li>IndexOutOfBoundsException</li>\n</ul>\n</li>\n</ul>\n<p>**<code>Error</code>**：<code>Error</code> 属于程序无法处理的错误 ，<del>我们没办法通过 <code>catch</code> 来进行捕获</del>不建议通过<code>catch</code>捕获 。例如 Java 虚拟机运行错误（<code>Virtual MachineError</code>）、虚拟机内存不够错误(<code>OutOfMemoryError</code>)、类定义错误（<code>NoClassDefFoundError</code>）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p>\n<ul>\n<li>OutOfMemoryError</li>\n<li>StackOverFlowError</li>\n<li>AssertionError</li>\n<li>VritualMachineError</li>\n</ul>\n<p>注意：不要再finally中使用return！在try中return返回值会放在一个本地变量中，后续执行到finally中的return，会覆盖并返回。</p>\n<p>JVM官方文档明确提到：</p>\n<p>If the <code>try</code> clause executes a <em>return</em>, the compiled code does the following:</p>\n<ol>\n<li>Saves the return value (if any) in a local variable.</li>\n<li>Executes a <em>jsr</em> to the code for the <code>finally</code> clause.</li>\n<li>Upon return from the <code>finally</code> clause, returns the value saved in the local variable.</li>\n</ol>\n<p>异常使用规范：异常信息有意义；日志打印异常与抛出异常不要并存。</p>\n</li>\n<li><p>泛型</p>\n<p>一套工具适配多种类型</p>\n<p>提供编译时检查避免错误</p>\n<p>泛型擦出：运行时泛型会去掉</p>\n</li>\n<li><p>反射</p>\n<p>优点：灵活</p>\n<p>缺点：性能问题，参考：<a href=\"https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow\">https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow</a></p>\n<p>应用场景：各种框架配置与调用都有用到反射。</p>\n</li>\n<li><p>IO</p>\n<p>操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 <strong>用户空间（User space）</strong> 和 <strong>内核空间（Kernel space ）</strong> 。</p>\n<p><strong>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。</strong></p>\n<p>UNIX 系统下， IO 模型一共有 5 种： <strong>同步阻塞 I&#x2F;O</strong>、<strong>同步非阻塞 I&#x2F;O</strong>、<strong>I&#x2F;O 多路复用</strong>、<strong>信号驱动 I&#x2F;O</strong> 和<strong>异步 I&#x2F;O</strong>。</p>\n<ul>\n<li><p>BIO</p>\n<ul>\n<li><p>同步阻塞 I&#x2F;O</p>\n<p>阻塞每次读写，等到内核态数据拷贝完成返回。</p>\n</li>\n<li><p>同步非阻塞 I&#x2F;O</p>\n<p>多次读取不阻塞，内核态数据拷贝时时阻塞。</p>\n</li>\n</ul>\n</li>\n<li><p>NIO</p>\n<ul>\n<li><p>select </p>\n<p>维护很多socket连接（创建链接时维护socket集合），通过询问内核是否已准备好数据，如果准备好再发器read（读取过程依旧是阻塞的），内核轮询socket集合，找到准备完成的socket进行数据读取（可能只有部分socket活跃，每次轮训耗时长且无意义）。每次需要将socket集合传递给内核，有一定开销。进程被唤醒拿到相应还需要遍历确定哪个socket收到数据，共需要两次遍历。select有最大文件描述符数量限制。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class=\"line\"><span class=\"params\">           fd_set *exceptfds, <span class=\"keyword\">struct</span> timeval *timeout)</span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>pool 同select，但是无最大文件描述符限制</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">poll</span><span class=\"params\">(<span class=\"keyword\">struct</span> pollfd fds[], <span class=\"type\">nfds_t</span> nfds, <span class=\"type\">int</span> timeout)</span>；</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>epool</p>\n<p>基于事件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_node</span>  <span class=\"title\">rbn</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">rdllink</span>;</span> </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span>  *<span class=\"title\">next</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_filefd</span>  <span class=\"title\">ffd</span>;</span>  </span><br><span class=\"line\">  <span class=\"type\">int</span>  nwait;                 </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">pwqlist</span>;</span>  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span>  *<span class=\"title\">ep</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">fllink</span>;</span>   </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span>  <span class=\"title\">event</span>;</span>  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">spin_lock_t</span>       lock; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mutex</span>      <span class=\"title\">mtx</span>;</span>  </span><br><span class=\"line\">  <span class=\"type\">wait_queue_head_t</span>     wq; </span><br><span class=\"line\">  <span class=\"type\">wait_queue_head_t</span>   poll_wait; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>    <span class=\"title\">rdllist</span>;</span>   <span class=\"comment\">//就绪链表</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_root</span>      <span class=\"title\">rbr</span>;</span>      <span class=\"comment\">//红黑树根节点 </span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span>      *<span class=\"title\">ovflist</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用户数据载体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">epoll_data</span> &#123;</span></span><br><span class=\"line\">   <span class=\"type\">void</span>    *ptr;</span><br><span class=\"line\">   <span class=\"type\">int</span>      fd;</span><br><span class=\"line\">   <span class=\"type\">uint32_t</span> u32;</span><br><span class=\"line\">   <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\">&#125; <span class=\"type\">epoll_data_t</span>;</span><br><span class=\"line\"><span class=\"comment\">//fd装载入内核的载体</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span> &#123;</span></span><br><span class=\"line\">     <span class=\"type\">uint32_t</span>     events;    <span class=\"comment\">/* Epoll events */</span></span><br><span class=\"line\">     <span class=\"type\">epoll_data_t</span> data;      <span class=\"comment\">/* User data variable */</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">//三板斧api</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_create</span><span class=\"params\">(<span class=\"type\">int</span> size)</span>; </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_ctl</span><span class=\"params\">(<span class=\"type\">int</span> epfd, <span class=\"type\">int</span> op, <span class=\"type\">int</span> fd, <span class=\"keyword\">struct</span> epoll_event *event)</span>;  </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_wait</span><span class=\"params\">(<span class=\"type\">int</span> epfd, <span class=\"keyword\">struct</span> epoll_event *events,</span></span><br><span class=\"line\"><span class=\"params\">                 <span class=\"type\">int</span> maxevents, <span class=\"type\">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>AIO</p>\n<p>拿回数据异步</p>\n</li>\n</ul>\n<p>参考链接：<a href=\"https://www.jianshu.com/p/722819425dbd\">https://www.jianshu.com/p/722819425dbd</a></p>\n<ol start=\"10\">\n<li><p>JVM</p>\n<p>可以先看看这个：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md</a></p>\n<ul>\n<li>内存分配</li>\n</ul>\n<p>堆：eden区，2个suvivor区，old区。对象创建会在eden创建，经过一次回收会搬到suvivor区，后续每经过一次回收对象年龄加一，直到到达老年代阈值（默认15岁），对象进入老年代。老年代阈值会根据配置动态计算。</p>\n<p>栈：本地方法栈、虚拟机栈以及程序计数器</p>\n<p>方法区：加载的类信息以及运行时常量池以及JIT编译代码缓存。字符串常量池与静态变量均在堆中。</p>\n<p>参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md</a></p>\n<ul>\n<li><p>对象创建流程</p>\n<ol>\n<li><p>类加载</p>\n<p>检查是否已加载过，如果没有进行类加载</p>\n</li>\n<li><p>申请内存</p>\n<p>类加载完成即可确定需要的内存，随后便申请内存分配</p>\n<p>分配策略：</p>\n<ul>\n<li><p>指针碰撞</p>\n<p>维护一个指针，区分已使用空间与未使用空间。</p>\n</li>\n<li><p>空闲列表</p>\n<p>维护一个列表，记录哪些内存块可用</p>\n</li>\n</ul>\n<p>并发分配内存：</p>\n<ul>\n<li>CAS+失败重试：通过CAS保证操作原子性</li>\n<li>TLAB（Thread Local Allocation Buffer：本地分配缓存区，在线程初始化时申请Eden一部分空间）：分配内存时先在TLAB分配，到达一定量后通过CAS刷新到堆上。缺点：空间较小大对象无法适配。</li>\n</ul>\n</li>\n<li><p>类初始化</p>\n<ul>\n<li><p>初始化零值</p>\n<p>设置初始值，对象头不调整</p>\n</li>\n<li><p>设置对象头</p>\n<p><strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>\n</li>\n<li><p>init方法执行</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>对象内存布局</p>\n<p>对象头，实例数据，对齐填充</p>\n<p><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>\n<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>\n<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>\n</li>\n<li><p>对象访问方式</p>\n<p>句柄和直接指针</p>\n<ul>\n<li><p>句柄指向句柄池数据（堆），再由句柄池指向实例数据（堆）和对象类型数据（栈）</p>\n</li>\n<li><p>直接指针直接执行对象实例数据（堆），其对象头存在指向对象类型数据（栈）的指针</p>\n</li>\n</ul>\n<p>优缺点：句柄在对象变化过程后用户的引用无需变化，而直接指针需要变化。但是直接指针少一次指针定位开销，速度更快。</p>\n</li>\n<li><p>类加载模型</p>\n<p>双亲委托</p>\n<p>如果自定义类加载器：继承<code>ClassLoader</code>，重写<code>findClass()</code>方法，如果需要打破双亲委托，则需要重写<code>loadClass()</code>方法</p>\n</li>\n<li><p>JVM参数与优化</p>\n<p>参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"面试问题整理\"><a href=\"#面试问题整理\" class=\"headerlink\" title=\"面试问题整理\"></a>面试问题整理</h1><ol>\n<li><p>字符型常量与字符串常量的区别？</p>\n<p>字符常量相当于一个整形ASCII值，可以参与运算；字符串是内存地址。字符串常量2个字节；字符串若干个字节</p>\n</li>\n<li><p>重写遵循规范</p>\n<ol>\n<li>方法名，形参需要相同</li>\n<li>返回值类型以及声明异常均小于或等于父类方法</li>\n<li>访问权限需大于或等于父类方法</li>\n</ol>\n</li>\n<li><p>可变长参数</p>\n<p>可以传入不等长参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的：如果方法重载，固定参数方法优先级会高于变长参数方法</p>\n</li>\n<li><p>基本数据类型与包装类的区别？</p>\n<ol>\n<li>包装类型默认值null</li>\n<li>包装类型可用于泛型</li>\n<li>基本数据类型局部变量存储与Java虚拟机栈局部变量表中，基本数据类型的成员变量存在堆中，包装类型都在堆中</li>\n</ol>\n</li>\n<li><p>构造方否可以override？</p>\n<p>不能override，可以overload</p>\n</li>\n<li><p>java 9为何将String底层由 char[] 改成了 byte[] ?</p>\n<p>新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，<code>byte</code> 占一个字节(8 位)，<code>char</code> 占用 2 个字节（16），<code>byte</code> 相较 <code>char</code> 节省一半的内存空间。</p>\n</li>\n<li><p>String采用运算符“+”拼接为何耗费内存？</p>\n<p>内部采用StringBuillder.append() 方法实现，拼接完后调用toString() 得到Stirng对象。这样就会存在大量的StringBuilder对象。</p>\n</li>\n<li><p>字符串常量池什么作用？</p>\n<p>创建字符串后会在堆中创建具体对象，然后在常量池中创建对应的引用。访问字符串是直接返回常量池中的引用即可。字节码命令“ldc” 可以判断字符串常量池是否保存对应的字符串对象引用。</p>\n</li>\n<li><p>intern方法作用</p>\n<p>native方法：如果字符串常量池不包含字符串饮用添加。然后返回字符串引用。</p>\n</li>\n<li><p>常量折叠</p>\n<p>对于源代码中存在的可以确定的static final修饰的基础变量数据类型以及String，会对其进行计算并作为常量嵌入最终生成代码中。这事javac编译器做的优化</p>\n</li>\n<li><p>finally代码一定执行吗？</p>\n<p>不一定！虚拟机异常终止便不会执行了。比如调用：System.exit(1); 还有所在线程死亡，CPU停止执行。</p>\n</li>\n<li><p>Java只有值传递吗？</p>\n<p>是的，无论是基础类型还是引用类型。如果要修改对象值，通过引用修改即可。</p>\n</li>\n<li><p>通过类加载器与Class.forName()差异</p>\n<p>Class.forName() 可以指定是否初始化Class，类加载器不会初始化。如果不出实话静态代码不会得到执行。</p>\n</li>\n<li><p>精度丢失与BigDecimal</p>\n<p>由于float，double等表示小数时由于二进制存储原理，对于一些小数没有精确的2进制表示形式所以存在精度丢失。BigDecimal实现利用了BigInteger，并加入小数位的概念实现避免了精读丢失。</p>\n</li>\n</ol>\n"},{"title":"Kubernetes基础概念","date":"2022-06-02T02:51:41.000Z","_content":"\n# 什么是Kubernetes\n\n开源的容器管理平台。通过配置即可自动调度管理容器。拥有以下功能：\n\n- **服务发现与负载均衡** k8s可以通过DNS或者IP暴露容器服务并自动发现，如果对于容器服务请求过高，k8s可以进行负载均衡流量，使服务平稳运行\n- **存储编排** 可以自由挂在存储资源，例如本地存储，云存储等\n- **自动状态更新** 通过配置新的容器状态，随后k8s将创建新的容器并进行资源转移\n- **机器资源配置** 可以为每个容器配置需要的CPU以及内存资源\n- **自愈** 发现服务异常自动重启\n- **敏感信息配置** 对于密码，token，keys等敏感信息由k8s私密管理\n\n\n\n# Kubernates集群组件\n\nk8s集群包换了一些`worker`机器，被称为`nodes`。worker上会运行容器程序，每个集群至少有一个`worker`。`control plan`管理这些worker nodes 以及 Pods，通常在生产环境会运行于多个节点上。提供high availability服务。\n\n组件：\n\n![components-of-kubernetes](components-of-kubernetes.svg)\n\n## Control Plane Components\n\nControl Plane Components 主要用来做一些决策，例如启动新的副本如果副本数不足。一些请求事件响应，如创建了dployment就同步创建启动pod。通常情况下部署在相同节点下，并且不在该节点下运行用户容器。参考：[Kubbernetes Components](https://kubernetes.io/docs/concepts/overview/components/)\n\n\n\n- kube-apiserver\n\n  用于暴露k8s api\n\n- etcd\n\n  高可用键值数据库\n\n- kube-scheduler\n\n  根据resource定义分配满足执行条件节点并运行\n\n- kube-controller-manager\n\n  运行控制器进程的控制组件。从逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都编译成单个二进制文件并在单个进程中运行。\n\n  这些控制器的某些类型是：\n\n  - 节点控制器：负责节点发生故障时的注意和响应。\n\n  - 作业控制器：监视表示一次性任务的作业对象，然后创建Pod来运行这些任务完成。\n\n  - 端点控制器：填充端点对象（即加入服务和Pod）。\n\n  - 服务帐户和令牌控制器：为新命名空间创建默认帐户和API访问令牌。\n\n- cloud-controller-manager\n\n  可以将当前集群加入云集群，具体参考[Kubbernetes Components](https://kubernetes.io/docs/concepts/overview/components/)\n\n## Node Components\n\n- kubelet\n- kube-proxy\n- Container runtime\n\n\n\n## Addons\n\n- DNS\n- Web UI（Dashboard）\n- Container Resource Monitoring\n- Cluster-level Logging\n\n# Kubernetes常用对象\n\nKubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。具体来说，他们可以描述：\n\n- 正在运行哪些容器化应用程序（以及哪些节点）\n\n- 这些应用程序可用的资源\n\n- 围绕这些应用程序行为的策略，例如重新启动策略、升级和容错性\n\nKubernetes对象是“意图记录”，一旦您创建对象，Kubernetes系统将不断工作以确保该对象的存在。通过创建对象，您可以有效地告诉Kubernetes系统您希望集群的工作负载是什么样子；这是集群所需的状态。\n\n要使用Kubernetes对象，无论是创建、修改还是删除它们——您需要使用Kubernetes API。例如，当您使用kubectl命令行界面时，CLI会为您进行必要的Kubernetes API调用。您还可以使用客户端库之一直接在自己的程序中使用Kubernetes API。\n\n## Object Spec and Status\n\n对象规格和状态\n\n几乎每个Kubernetes对象都包含两个控制对象配置的嵌套对象字段：对象规范和对象状态。对于具有规范的对象，您必须在创建对象时设置此设置，并描述您希望资源具有的特征：其所需的状态。\n\n该状态描述了对象的当前状态，由Kubernetes系统及其组件提供和更新。Kubernetes控制平面持续并主动地管理每个对象的实际状态，以匹配您提供的期望状态。\n\n例如：在Kubernetes中，部署是一个可以表示在集群上运行的应用程序的对象。当您创建部署时，您可以将部署规范设置为指定您希望运行应用程序的三个副本。Kubernetes系统读取部署规范，并启动所需应用程序的三个实例——更新状态以匹配您的规范。如果其中任何实例出现故障（状态更改），Kubernetes系统会通过更正来响应规范和状态之间的差异——在这种情况下，启动替换实例。\n\n有关对象规范、状态和元数据的更多信息，请参阅[Kubernetes API Conventions](https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md).\n\n## Describing a Kubernetes object\n\n当您在Kubernetes中创建对象时，您必须提供描述其所需状态的对象规范，以及有关对象的一些基本信息（例如名称）。当您使用Kubernetes API创建对象（直接或通过kubectl）时，该API请求必须在请求主体中包含该信息作为JSON。通常，您在.yaml文件中向kubectl提供信息。kubectl在提出API请求时将信息转换为JSON。\n\n这里有一个.yaml文件示例，显示Kubernetes部署的必填字段和对象规范：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2 # tells deployment to run 2 pods matching the template\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n```\n\n可以使用`kubectl apply`命令创建Deployment\n\n```bash\nkubectl apply -f https://k8s.io/examples/application/deployment.yaml\n# output:\n# deployment.apps/nginx-deployment created\n```\n\n## 必须字段\n\n在您要创建的Kubernetes对象的.yaml文件中，您需要为以下字段设置值：\n\n- apiVersion - 您正在使用哪个版本的Kubernetes API来创建此对象\n- kind - 您想创建哪种对象\n\n- metadata - 有助于唯一识别对象的数据，包括名称字符串、UID和可选命名空间\n\n- spec - 您希望对象处于什么状态\n\n- 对象规范的精确格式对每个Kubernetes对象都不同，并包含特定于该对象的嵌套字段。Kubernetes API参考可以帮助您找到可以使用Kubernetes创建的所有对象的规范格式。\n\n例如，请参阅Pod API参考的规范字段。对于每个Pod，.spec字段指定pod及其所需状态（例如该pod中每个容器的容器映像名称）。对象规范的另一个例子是StatefulSet API的规范字段。对于StatefulSet，.spec字段指定StatefulSet及其所需状态。在StatefulSet的.spec中是Pod对象的模板。该模板描述了StatefulSet控制器为满足StatefulSet规范而创建的Pod。不同类型的对象也可以具有不同的.status；同样，API参考页面详细说明了该.status字段的结构，以及每种不同类型对象的内容。\n\n# 其他\n\n- namespace\n- node\n- pod\n- deployment\n- service\n- volumn\n\n# 待补充。。。。。。\n\n","source":"_posts/Kubernetes基础概念.md","raw":"---\ntitle: Kubernetes基础概念\ndate: 2022-06-02 10:51:41\ntags:\n  - k8s\n---\n\n# 什么是Kubernetes\n\n开源的容器管理平台。通过配置即可自动调度管理容器。拥有以下功能：\n\n- **服务发现与负载均衡** k8s可以通过DNS或者IP暴露容器服务并自动发现，如果对于容器服务请求过高，k8s可以进行负载均衡流量，使服务平稳运行\n- **存储编排** 可以自由挂在存储资源，例如本地存储，云存储等\n- **自动状态更新** 通过配置新的容器状态，随后k8s将创建新的容器并进行资源转移\n- **机器资源配置** 可以为每个容器配置需要的CPU以及内存资源\n- **自愈** 发现服务异常自动重启\n- **敏感信息配置** 对于密码，token，keys等敏感信息由k8s私密管理\n\n\n\n# Kubernates集群组件\n\nk8s集群包换了一些`worker`机器，被称为`nodes`。worker上会运行容器程序，每个集群至少有一个`worker`。`control plan`管理这些worker nodes 以及 Pods，通常在生产环境会运行于多个节点上。提供high availability服务。\n\n组件：\n\n![components-of-kubernetes](components-of-kubernetes.svg)\n\n## Control Plane Components\n\nControl Plane Components 主要用来做一些决策，例如启动新的副本如果副本数不足。一些请求事件响应，如创建了dployment就同步创建启动pod。通常情况下部署在相同节点下，并且不在该节点下运行用户容器。参考：[Kubbernetes Components](https://kubernetes.io/docs/concepts/overview/components/)\n\n\n\n- kube-apiserver\n\n  用于暴露k8s api\n\n- etcd\n\n  高可用键值数据库\n\n- kube-scheduler\n\n  根据resource定义分配满足执行条件节点并运行\n\n- kube-controller-manager\n\n  运行控制器进程的控制组件。从逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都编译成单个二进制文件并在单个进程中运行。\n\n  这些控制器的某些类型是：\n\n  - 节点控制器：负责节点发生故障时的注意和响应。\n\n  - 作业控制器：监视表示一次性任务的作业对象，然后创建Pod来运行这些任务完成。\n\n  - 端点控制器：填充端点对象（即加入服务和Pod）。\n\n  - 服务帐户和令牌控制器：为新命名空间创建默认帐户和API访问令牌。\n\n- cloud-controller-manager\n\n  可以将当前集群加入云集群，具体参考[Kubbernetes Components](https://kubernetes.io/docs/concepts/overview/components/)\n\n## Node Components\n\n- kubelet\n- kube-proxy\n- Container runtime\n\n\n\n## Addons\n\n- DNS\n- Web UI（Dashboard）\n- Container Resource Monitoring\n- Cluster-level Logging\n\n# Kubernetes常用对象\n\nKubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。具体来说，他们可以描述：\n\n- 正在运行哪些容器化应用程序（以及哪些节点）\n\n- 这些应用程序可用的资源\n\n- 围绕这些应用程序行为的策略，例如重新启动策略、升级和容错性\n\nKubernetes对象是“意图记录”，一旦您创建对象，Kubernetes系统将不断工作以确保该对象的存在。通过创建对象，您可以有效地告诉Kubernetes系统您希望集群的工作负载是什么样子；这是集群所需的状态。\n\n要使用Kubernetes对象，无论是创建、修改还是删除它们——您需要使用Kubernetes API。例如，当您使用kubectl命令行界面时，CLI会为您进行必要的Kubernetes API调用。您还可以使用客户端库之一直接在自己的程序中使用Kubernetes API。\n\n## Object Spec and Status\n\n对象规格和状态\n\n几乎每个Kubernetes对象都包含两个控制对象配置的嵌套对象字段：对象规范和对象状态。对于具有规范的对象，您必须在创建对象时设置此设置，并描述您希望资源具有的特征：其所需的状态。\n\n该状态描述了对象的当前状态，由Kubernetes系统及其组件提供和更新。Kubernetes控制平面持续并主动地管理每个对象的实际状态，以匹配您提供的期望状态。\n\n例如：在Kubernetes中，部署是一个可以表示在集群上运行的应用程序的对象。当您创建部署时，您可以将部署规范设置为指定您希望运行应用程序的三个副本。Kubernetes系统读取部署规范，并启动所需应用程序的三个实例——更新状态以匹配您的规范。如果其中任何实例出现故障（状态更改），Kubernetes系统会通过更正来响应规范和状态之间的差异——在这种情况下，启动替换实例。\n\n有关对象规范、状态和元数据的更多信息，请参阅[Kubernetes API Conventions](https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md).\n\n## Describing a Kubernetes object\n\n当您在Kubernetes中创建对象时，您必须提供描述其所需状态的对象规范，以及有关对象的一些基本信息（例如名称）。当您使用Kubernetes API创建对象（直接或通过kubectl）时，该API请求必须在请求主体中包含该信息作为JSON。通常，您在.yaml文件中向kubectl提供信息。kubectl在提出API请求时将信息转换为JSON。\n\n这里有一个.yaml文件示例，显示Kubernetes部署的必填字段和对象规范：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2 # tells deployment to run 2 pods matching the template\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n```\n\n可以使用`kubectl apply`命令创建Deployment\n\n```bash\nkubectl apply -f https://k8s.io/examples/application/deployment.yaml\n# output:\n# deployment.apps/nginx-deployment created\n```\n\n## 必须字段\n\n在您要创建的Kubernetes对象的.yaml文件中，您需要为以下字段设置值：\n\n- apiVersion - 您正在使用哪个版本的Kubernetes API来创建此对象\n- kind - 您想创建哪种对象\n\n- metadata - 有助于唯一识别对象的数据，包括名称字符串、UID和可选命名空间\n\n- spec - 您希望对象处于什么状态\n\n- 对象规范的精确格式对每个Kubernetes对象都不同，并包含特定于该对象的嵌套字段。Kubernetes API参考可以帮助您找到可以使用Kubernetes创建的所有对象的规范格式。\n\n例如，请参阅Pod API参考的规范字段。对于每个Pod，.spec字段指定pod及其所需状态（例如该pod中每个容器的容器映像名称）。对象规范的另一个例子是StatefulSet API的规范字段。对于StatefulSet，.spec字段指定StatefulSet及其所需状态。在StatefulSet的.spec中是Pod对象的模板。该模板描述了StatefulSet控制器为满足StatefulSet规范而创建的Pod。不同类型的对象也可以具有不同的.status；同样，API参考页面详细说明了该.status字段的结构，以及每种不同类型对象的内容。\n\n# 其他\n\n- namespace\n- node\n- pod\n- deployment\n- service\n- volumn\n\n# 待补充。。。。。。\n\n","slug":"Kubernetes基础概念","published":1,"updated":"2022-06-02T05:07:03.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z8000gwuh821xwatyr","content":"<h1 id=\"什么是Kubernetes\"><a href=\"#什么是Kubernetes\" class=\"headerlink\" title=\"什么是Kubernetes\"></a>什么是Kubernetes</h1><p>开源的容器管理平台。通过配置即可自动调度管理容器。拥有以下功能：</p>\n<ul>\n<li><strong>服务发现与负载均衡</strong> k8s可以通过DNS或者IP暴露容器服务并自动发现，如果对于容器服务请求过高，k8s可以进行负载均衡流量，使服务平稳运行</li>\n<li><strong>存储编排</strong> 可以自由挂在存储资源，例如本地存储，云存储等</li>\n<li><strong>自动状态更新</strong> 通过配置新的容器状态，随后k8s将创建新的容器并进行资源转移</li>\n<li><strong>机器资源配置</strong> 可以为每个容器配置需要的CPU以及内存资源</li>\n<li><strong>自愈</strong> 发现服务异常自动重启</li>\n<li><strong>敏感信息配置</strong> 对于密码，token，keys等敏感信息由k8s私密管理</li>\n</ul>\n<h1 id=\"Kubernates集群组件\"><a href=\"#Kubernates集群组件\" class=\"headerlink\" title=\"Kubernates集群组件\"></a>Kubernates集群组件</h1><p>k8s集群包换了一些<code>worker</code>机器，被称为<code>nodes</code>。worker上会运行容器程序，每个集群至少有一个<code>worker</code>。<code>control plan</code>管理这些worker nodes 以及 Pods，通常在生产环境会运行于多个节点上。提供high availability服务。</p>\n<p>组件：</p>\n<p><img src=\"/2022/06/02/Kubernetes%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/components-of-kubernetes.svg\" alt=\"components-of-kubernetes\"></p>\n<h2 id=\"Control-Plane-Components\"><a href=\"#Control-Plane-Components\" class=\"headerlink\" title=\"Control Plane Components\"></a>Control Plane Components</h2><p>Control Plane Components 主要用来做一些决策，例如启动新的副本如果副本数不足。一些请求事件响应，如创建了dployment就同步创建启动pod。通常情况下部署在相同节点下，并且不在该节点下运行用户容器。参考：<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">Kubbernetes Components</a></p>\n<ul>\n<li><p>kube-apiserver</p>\n<p>用于暴露k8s api</p>\n</li>\n<li><p>etcd</p>\n<p>高可用键值数据库</p>\n</li>\n<li><p>kube-scheduler</p>\n<p>根据resource定义分配满足执行条件节点并运行</p>\n</li>\n<li><p>kube-controller-manager</p>\n<p>运行控制器进程的控制组件。从逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都编译成单个二进制文件并在单个进程中运行。</p>\n<p>这些控制器的某些类型是：</p>\n<ul>\n<li><p>节点控制器：负责节点发生故障时的注意和响应。</p>\n</li>\n<li><p>作业控制器：监视表示一次性任务的作业对象，然后创建Pod来运行这些任务完成。</p>\n</li>\n<li><p>端点控制器：填充端点对象（即加入服务和Pod）。</p>\n</li>\n<li><p>服务帐户和令牌控制器：为新命名空间创建默认帐户和API访问令牌。</p>\n</li>\n</ul>\n</li>\n<li><p>cloud-controller-manager</p>\n<p>可以将当前集群加入云集群，具体参考<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">Kubbernetes Components</a></p>\n</li>\n</ul>\n<h2 id=\"Node-Components\"><a href=\"#Node-Components\" class=\"headerlink\" title=\"Node Components\"></a>Node Components</h2><ul>\n<li>kubelet</li>\n<li>kube-proxy</li>\n<li>Container runtime</li>\n</ul>\n<h2 id=\"Addons\"><a href=\"#Addons\" class=\"headerlink\" title=\"Addons\"></a>Addons</h2><ul>\n<li>DNS</li>\n<li>Web UI（Dashboard）</li>\n<li>Container Resource Monitoring</li>\n<li>Cluster-level Logging</li>\n</ul>\n<h1 id=\"Kubernetes常用对象\"><a href=\"#Kubernetes常用对象\" class=\"headerlink\" title=\"Kubernetes常用对象\"></a>Kubernetes常用对象</h1><p>Kubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。具体来说，他们可以描述：</p>\n<ul>\n<li><p>正在运行哪些容器化应用程序（以及哪些节点）</p>\n</li>\n<li><p>这些应用程序可用的资源</p>\n</li>\n<li><p>围绕这些应用程序行为的策略，例如重新启动策略、升级和容错性</p>\n</li>\n</ul>\n<p>Kubernetes对象是“意图记录”，一旦您创建对象，Kubernetes系统将不断工作以确保该对象的存在。通过创建对象，您可以有效地告诉Kubernetes系统您希望集群的工作负载是什么样子；这是集群所需的状态。</p>\n<p>要使用Kubernetes对象，无论是创建、修改还是删除它们——您需要使用Kubernetes API。例如，当您使用kubectl命令行界面时，CLI会为您进行必要的Kubernetes API调用。您还可以使用客户端库之一直接在自己的程序中使用Kubernetes API。</p>\n<h2 id=\"Object-Spec-and-Status\"><a href=\"#Object-Spec-and-Status\" class=\"headerlink\" title=\"Object Spec and Status\"></a>Object Spec and Status</h2><p>对象规格和状态</p>\n<p>几乎每个Kubernetes对象都包含两个控制对象配置的嵌套对象字段：对象规范和对象状态。对于具有规范的对象，您必须在创建对象时设置此设置，并描述您希望资源具有的特征：其所需的状态。</p>\n<p>该状态描述了对象的当前状态，由Kubernetes系统及其组件提供和更新。Kubernetes控制平面持续并主动地管理每个对象的实际状态，以匹配您提供的期望状态。</p>\n<p>例如：在Kubernetes中，部署是一个可以表示在集群上运行的应用程序的对象。当您创建部署时，您可以将部署规范设置为指定您希望运行应用程序的三个副本。Kubernetes系统读取部署规范，并启动所需应用程序的三个实例——更新状态以匹配您的规范。如果其中任何实例出现故障（状态更改），Kubernetes系统会通过更正来响应规范和状态之间的差异——在这种情况下，启动替换实例。</p>\n<p>有关对象规范、状态和元数据的更多信息，请参阅<a href=\"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md\">Kubernetes API Conventions</a>.</p>\n<h2 id=\"Describing-a-Kubernetes-object\"><a href=\"#Describing-a-Kubernetes-object\" class=\"headerlink\" title=\"Describing a Kubernetes object\"></a>Describing a Kubernetes object</h2><p>当您在Kubernetes中创建对象时，您必须提供描述其所需状态的对象规范，以及有关对象的一些基本信息（例如名称）。当您使用Kubernetes API创建对象（直接或通过kubectl）时，该API请求必须在请求主体中包含该信息作为JSON。通常，您在.yaml文件中向kubectl提供信息。kubectl在提出API请求时将信息转换为JSON。</p>\n<p>这里有一个.yaml文件示例，显示Kubernetes部署的必填字段和对象规范：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span> <span class=\"comment\"># tells deployment to run 2 pods matching the template</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.14.2</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>可以使用<code>kubectl apply</code>命令创建Deployment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://k8s.io/examples/application/deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># deployment.apps/nginx-deployment created</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"必须字段\"><a href=\"#必须字段\" class=\"headerlink\" title=\"必须字段\"></a>必须字段</h2><p>在您要创建的Kubernetes对象的.yaml文件中，您需要为以下字段设置值：</p>\n<ul>\n<li><p>apiVersion - 您正在使用哪个版本的Kubernetes API来创建此对象</p>\n</li>\n<li><p>kind - 您想创建哪种对象</p>\n</li>\n<li><p>metadata - 有助于唯一识别对象的数据，包括名称字符串、UID和可选命名空间</p>\n</li>\n<li><p>spec - 您希望对象处于什么状态</p>\n</li>\n<li><p>对象规范的精确格式对每个Kubernetes对象都不同，并包含特定于该对象的嵌套字段。Kubernetes API参考可以帮助您找到可以使用Kubernetes创建的所有对象的规范格式。</p>\n</li>\n</ul>\n<p>例如，请参阅Pod API参考的规范字段。对于每个Pod，.spec字段指定pod及其所需状态（例如该pod中每个容器的容器映像名称）。对象规范的另一个例子是StatefulSet API的规范字段。对于StatefulSet，.spec字段指定StatefulSet及其所需状态。在StatefulSet的.spec中是Pod对象的模板。该模板描述了StatefulSet控制器为满足StatefulSet规范而创建的Pod。不同类型的对象也可以具有不同的.status；同样，API参考页面详细说明了该.status字段的结构，以及每种不同类型对象的内容。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>namespace</li>\n<li>node</li>\n<li>pod</li>\n<li>deployment</li>\n<li>service</li>\n<li>volumn</li>\n</ul>\n<h1 id=\"待补充。。。。。。\"><a href=\"#待补充。。。。。。\" class=\"headerlink\" title=\"待补充。。。。。。\"></a>待补充。。。。。。</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是Kubernetes\"><a href=\"#什么是Kubernetes\" class=\"headerlink\" title=\"什么是Kubernetes\"></a>什么是Kubernetes</h1><p>开源的容器管理平台。通过配置即可自动调度管理容器。拥有以下功能：</p>\n<ul>\n<li><strong>服务发现与负载均衡</strong> k8s可以通过DNS或者IP暴露容器服务并自动发现，如果对于容器服务请求过高，k8s可以进行负载均衡流量，使服务平稳运行</li>\n<li><strong>存储编排</strong> 可以自由挂在存储资源，例如本地存储，云存储等</li>\n<li><strong>自动状态更新</strong> 通过配置新的容器状态，随后k8s将创建新的容器并进行资源转移</li>\n<li><strong>机器资源配置</strong> 可以为每个容器配置需要的CPU以及内存资源</li>\n<li><strong>自愈</strong> 发现服务异常自动重启</li>\n<li><strong>敏感信息配置</strong> 对于密码，token，keys等敏感信息由k8s私密管理</li>\n</ul>\n<h1 id=\"Kubernates集群组件\"><a href=\"#Kubernates集群组件\" class=\"headerlink\" title=\"Kubernates集群组件\"></a>Kubernates集群组件</h1><p>k8s集群包换了一些<code>worker</code>机器，被称为<code>nodes</code>。worker上会运行容器程序，每个集群至少有一个<code>worker</code>。<code>control plan</code>管理这些worker nodes 以及 Pods，通常在生产环境会运行于多个节点上。提供high availability服务。</p>\n<p>组件：</p>\n<p><img src=\"/2022/06/02/Kubernetes%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/components-of-kubernetes.svg\" alt=\"components-of-kubernetes\"></p>\n<h2 id=\"Control-Plane-Components\"><a href=\"#Control-Plane-Components\" class=\"headerlink\" title=\"Control Plane Components\"></a>Control Plane Components</h2><p>Control Plane Components 主要用来做一些决策，例如启动新的副本如果副本数不足。一些请求事件响应，如创建了dployment就同步创建启动pod。通常情况下部署在相同节点下，并且不在该节点下运行用户容器。参考：<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">Kubbernetes Components</a></p>\n<ul>\n<li><p>kube-apiserver</p>\n<p>用于暴露k8s api</p>\n</li>\n<li><p>etcd</p>\n<p>高可用键值数据库</p>\n</li>\n<li><p>kube-scheduler</p>\n<p>根据resource定义分配满足执行条件节点并运行</p>\n</li>\n<li><p>kube-controller-manager</p>\n<p>运行控制器进程的控制组件。从逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都编译成单个二进制文件并在单个进程中运行。</p>\n<p>这些控制器的某些类型是：</p>\n<ul>\n<li><p>节点控制器：负责节点发生故障时的注意和响应。</p>\n</li>\n<li><p>作业控制器：监视表示一次性任务的作业对象，然后创建Pod来运行这些任务完成。</p>\n</li>\n<li><p>端点控制器：填充端点对象（即加入服务和Pod）。</p>\n</li>\n<li><p>服务帐户和令牌控制器：为新命名空间创建默认帐户和API访问令牌。</p>\n</li>\n</ul>\n</li>\n<li><p>cloud-controller-manager</p>\n<p>可以将当前集群加入云集群，具体参考<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">Kubbernetes Components</a></p>\n</li>\n</ul>\n<h2 id=\"Node-Components\"><a href=\"#Node-Components\" class=\"headerlink\" title=\"Node Components\"></a>Node Components</h2><ul>\n<li>kubelet</li>\n<li>kube-proxy</li>\n<li>Container runtime</li>\n</ul>\n<h2 id=\"Addons\"><a href=\"#Addons\" class=\"headerlink\" title=\"Addons\"></a>Addons</h2><ul>\n<li>DNS</li>\n<li>Web UI（Dashboard）</li>\n<li>Container Resource Monitoring</li>\n<li>Cluster-level Logging</li>\n</ul>\n<h1 id=\"Kubernetes常用对象\"><a href=\"#Kubernetes常用对象\" class=\"headerlink\" title=\"Kubernetes常用对象\"></a>Kubernetes常用对象</h1><p>Kubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。具体来说，他们可以描述：</p>\n<ul>\n<li><p>正在运行哪些容器化应用程序（以及哪些节点）</p>\n</li>\n<li><p>这些应用程序可用的资源</p>\n</li>\n<li><p>围绕这些应用程序行为的策略，例如重新启动策略、升级和容错性</p>\n</li>\n</ul>\n<p>Kubernetes对象是“意图记录”，一旦您创建对象，Kubernetes系统将不断工作以确保该对象的存在。通过创建对象，您可以有效地告诉Kubernetes系统您希望集群的工作负载是什么样子；这是集群所需的状态。</p>\n<p>要使用Kubernetes对象，无论是创建、修改还是删除它们——您需要使用Kubernetes API。例如，当您使用kubectl命令行界面时，CLI会为您进行必要的Kubernetes API调用。您还可以使用客户端库之一直接在自己的程序中使用Kubernetes API。</p>\n<h2 id=\"Object-Spec-and-Status\"><a href=\"#Object-Spec-and-Status\" class=\"headerlink\" title=\"Object Spec and Status\"></a>Object Spec and Status</h2><p>对象规格和状态</p>\n<p>几乎每个Kubernetes对象都包含两个控制对象配置的嵌套对象字段：对象规范和对象状态。对于具有规范的对象，您必须在创建对象时设置此设置，并描述您希望资源具有的特征：其所需的状态。</p>\n<p>该状态描述了对象的当前状态，由Kubernetes系统及其组件提供和更新。Kubernetes控制平面持续并主动地管理每个对象的实际状态，以匹配您提供的期望状态。</p>\n<p>例如：在Kubernetes中，部署是一个可以表示在集群上运行的应用程序的对象。当您创建部署时，您可以将部署规范设置为指定您希望运行应用程序的三个副本。Kubernetes系统读取部署规范，并启动所需应用程序的三个实例——更新状态以匹配您的规范。如果其中任何实例出现故障（状态更改），Kubernetes系统会通过更正来响应规范和状态之间的差异——在这种情况下，启动替换实例。</p>\n<p>有关对象规范、状态和元数据的更多信息，请参阅<a href=\"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md\">Kubernetes API Conventions</a>.</p>\n<h2 id=\"Describing-a-Kubernetes-object\"><a href=\"#Describing-a-Kubernetes-object\" class=\"headerlink\" title=\"Describing a Kubernetes object\"></a>Describing a Kubernetes object</h2><p>当您在Kubernetes中创建对象时，您必须提供描述其所需状态的对象规范，以及有关对象的一些基本信息（例如名称）。当您使用Kubernetes API创建对象（直接或通过kubectl）时，该API请求必须在请求主体中包含该信息作为JSON。通常，您在.yaml文件中向kubectl提供信息。kubectl在提出API请求时将信息转换为JSON。</p>\n<p>这里有一个.yaml文件示例，显示Kubernetes部署的必填字段和对象规范：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span> <span class=\"comment\"># tells deployment to run 2 pods matching the template</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.14.2</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>可以使用<code>kubectl apply</code>命令创建Deployment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://k8s.io/examples/application/deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># deployment.apps/nginx-deployment created</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"必须字段\"><a href=\"#必须字段\" class=\"headerlink\" title=\"必须字段\"></a>必须字段</h2><p>在您要创建的Kubernetes对象的.yaml文件中，您需要为以下字段设置值：</p>\n<ul>\n<li><p>apiVersion - 您正在使用哪个版本的Kubernetes API来创建此对象</p>\n</li>\n<li><p>kind - 您想创建哪种对象</p>\n</li>\n<li><p>metadata - 有助于唯一识别对象的数据，包括名称字符串、UID和可选命名空间</p>\n</li>\n<li><p>spec - 您希望对象处于什么状态</p>\n</li>\n<li><p>对象规范的精确格式对每个Kubernetes对象都不同，并包含特定于该对象的嵌套字段。Kubernetes API参考可以帮助您找到可以使用Kubernetes创建的所有对象的规范格式。</p>\n</li>\n</ul>\n<p>例如，请参阅Pod API参考的规范字段。对于每个Pod，.spec字段指定pod及其所需状态（例如该pod中每个容器的容器映像名称）。对象规范的另一个例子是StatefulSet API的规范字段。对于StatefulSet，.spec字段指定StatefulSet及其所需状态。在StatefulSet的.spec中是Pod对象的模板。该模板描述了StatefulSet控制器为满足StatefulSet规范而创建的Pod。不同类型的对象也可以具有不同的.status；同样，API参考页面详细说明了该.status字段的结构，以及每种不同类型对象的内容。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>namespace</li>\n<li>node</li>\n<li>pod</li>\n<li>deployment</li>\n<li>service</li>\n<li>volumn</li>\n</ul>\n<h1 id=\"待补充。。。。。。\"><a href=\"#待补充。。。。。。\" class=\"headerlink\" title=\"待补充。。。。。。\"></a>待补充。。。。。。</h1>"},{"title":"MySQL命令explain","date":"2022-06-04T10:12:00.000Z","_content":"\n`explain`是MySQL查询优化的关键命令. 通过这个命令可以模拟优化器执行SQL查询语句, 分析执行结果可以优化查询语句以提升查询性能.\n\n语句:\n\n```sql\nexplain select * from xx where yy = 'zz'\n```\n\n相应字段介绍:\n\n- id : 语句中select查询子句的顺序\n\n- select_type : 查询类型\n\n  - SIMPLE : 简单查询, 不包含子查询与union查询\n\n  - PRIMARY : 主查询, 存在子查询时,外层查询被标记为主查询\n\n  - SUBQUERY : 子查询\n\n  - UNION : 在union命令后的语句为此类型\n\n  - UNION RESULT : 最终UNION结果会表示为此类型\n\n    ```\n        id  select_type   table       partitions  type    possible_keys        key      \n    ------  ------------  ----------  ----------  ------  -------------------  ------- \n         1  PRIMARY       student     (NULL)      const   PRIMARY,id_name_age  PRIMARY  \n         2  UNION         student     (NULL)      const   PRIMARY,id_name_age  PRIMARY \n    (NULL)  UNION RESULT  <union1,2>  (NULL)      ALL     (NULL)               (NULL)   \n    ```\n\n  - DERIVED : FROM列表中包含子查询的语句被标记为此类型, MySQL会递归执行这些子查询放入临时表(MySQL 5.7+ 优化后使用derived_merge加速查询效率. 无此状态)\n\n- table : 访问的表,结合id可以看到执行过程中表查询顺序\n\n- partitions : 匹配分区\n\n- type : 访问类型\n\n  10个状态,从好到差排序:\n\n  ```\n  NULL > system > const > eq_ref > ref > ref_or_null > index_merge > range > index > ALL\n  ```\n\n  - NULL : 无需访问表和索引的查询. 例: \n\n    ```sql\n    EXPLAIN SELECT 5*7  -- 不访问表,计算数值\n    EXPLAIN SELECT MAX(id) FROM student  -- 查询最大索引,直接取索引树叶子结点获取 \n    ```\n\n  - SYSTEM : 表只有一行记录（等于系统表），这是`const`类型的特列，平时不大会出现，可以忽略。\n\n  - const : 一次索引查找到,主键索引或唯一索引查询时\n\n  - eq_ref : 联表join查询时, 按联表的主键或唯一键查询\n\n  - ref : 联表join查询时, 按联表的索引查询, 匹配多行不唯一\n\n  - ref_or_null : 类似ref, 可以搜索值为NULL的行\n\n  - index_merge : 查询了多个索引,然后取交集并集. 常见于在`and`, 'or'的条件下使用了不同的索引. 大部分性能不如`range`\n\n  - range : 索引范围查询,常见于 <>, >, >=, <, <=, IS NULL, <=>, BETWEEN, IN()或者like等运算符的查询中\n\n  - ALL : 全表扫描, 务必优化!!!\n\n- possible_keys : 可能使用的索引\n\n- key : 实际使用的索引, 为null时表示没使用索引\n\n- key_len : 索引中使用的字节数\n\n- ref : 索引的哪一列被使用\n\n- rows : 根据表统计信息以及索引选用情况,估算查找所需记录需要读取的行数. 数值越小效率越高\n\n- filtere : 查询数据占表的百分比. 类似rows,数值越小效率越高\n\n- extra : 其他重要的额外信息\n\n  - Using filesort : SQL需要排序, 但是优化器找不到可以使用的索引, 此时使用外部排序(多次磁盘IO访问,效率极低)\n  - Using tempporary : 查询结果排序时, 使用临时表协助. 效率低于外部排序.\n  - Using index : 使用了索引 👍🏻👍🏻👍🏻\n  - Using where : 使用了where\n  - Using join buffer : 多表join使用了连接缓存\n  - impossible where : 筛选条件啥也没找到\n  - distinct : 优化distinct操作, 找到匹配后立即停止同样值的动作\n","source":"_posts/MySQL命令explain.md","raw":"---\ntitle: MySQL命令explain\ndate: 2022-06-04 18:12:00\ntags:\n  - 数据库\n  - MySQL\n  - 优化\n---\n\n`explain`是MySQL查询优化的关键命令. 通过这个命令可以模拟优化器执行SQL查询语句, 分析执行结果可以优化查询语句以提升查询性能.\n\n语句:\n\n```sql\nexplain select * from xx where yy = 'zz'\n```\n\n相应字段介绍:\n\n- id : 语句中select查询子句的顺序\n\n- select_type : 查询类型\n\n  - SIMPLE : 简单查询, 不包含子查询与union查询\n\n  - PRIMARY : 主查询, 存在子查询时,外层查询被标记为主查询\n\n  - SUBQUERY : 子查询\n\n  - UNION : 在union命令后的语句为此类型\n\n  - UNION RESULT : 最终UNION结果会表示为此类型\n\n    ```\n        id  select_type   table       partitions  type    possible_keys        key      \n    ------  ------------  ----------  ----------  ------  -------------------  ------- \n         1  PRIMARY       student     (NULL)      const   PRIMARY,id_name_age  PRIMARY  \n         2  UNION         student     (NULL)      const   PRIMARY,id_name_age  PRIMARY \n    (NULL)  UNION RESULT  <union1,2>  (NULL)      ALL     (NULL)               (NULL)   \n    ```\n\n  - DERIVED : FROM列表中包含子查询的语句被标记为此类型, MySQL会递归执行这些子查询放入临时表(MySQL 5.7+ 优化后使用derived_merge加速查询效率. 无此状态)\n\n- table : 访问的表,结合id可以看到执行过程中表查询顺序\n\n- partitions : 匹配分区\n\n- type : 访问类型\n\n  10个状态,从好到差排序:\n\n  ```\n  NULL > system > const > eq_ref > ref > ref_or_null > index_merge > range > index > ALL\n  ```\n\n  - NULL : 无需访问表和索引的查询. 例: \n\n    ```sql\n    EXPLAIN SELECT 5*7  -- 不访问表,计算数值\n    EXPLAIN SELECT MAX(id) FROM student  -- 查询最大索引,直接取索引树叶子结点获取 \n    ```\n\n  - SYSTEM : 表只有一行记录（等于系统表），这是`const`类型的特列，平时不大会出现，可以忽略。\n\n  - const : 一次索引查找到,主键索引或唯一索引查询时\n\n  - eq_ref : 联表join查询时, 按联表的主键或唯一键查询\n\n  - ref : 联表join查询时, 按联表的索引查询, 匹配多行不唯一\n\n  - ref_or_null : 类似ref, 可以搜索值为NULL的行\n\n  - index_merge : 查询了多个索引,然后取交集并集. 常见于在`and`, 'or'的条件下使用了不同的索引. 大部分性能不如`range`\n\n  - range : 索引范围查询,常见于 <>, >, >=, <, <=, IS NULL, <=>, BETWEEN, IN()或者like等运算符的查询中\n\n  - ALL : 全表扫描, 务必优化!!!\n\n- possible_keys : 可能使用的索引\n\n- key : 实际使用的索引, 为null时表示没使用索引\n\n- key_len : 索引中使用的字节数\n\n- ref : 索引的哪一列被使用\n\n- rows : 根据表统计信息以及索引选用情况,估算查找所需记录需要读取的行数. 数值越小效率越高\n\n- filtere : 查询数据占表的百分比. 类似rows,数值越小效率越高\n\n- extra : 其他重要的额外信息\n\n  - Using filesort : SQL需要排序, 但是优化器找不到可以使用的索引, 此时使用外部排序(多次磁盘IO访问,效率极低)\n  - Using tempporary : 查询结果排序时, 使用临时表协助. 效率低于外部排序.\n  - Using index : 使用了索引 👍🏻👍🏻👍🏻\n  - Using where : 使用了where\n  - Using join buffer : 多表join使用了连接缓存\n  - impossible where : 筛选条件啥也没找到\n  - distinct : 优化distinct操作, 找到匹配后立即停止同样值的动作\n","slug":"MySQL命令explain","published":1,"updated":"2022-06-04T10:50:46.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0z9000jwuh8bil4eg0a","content":"<p><code>explain</code>是MySQL查询优化的关键命令. 通过这个命令可以模拟优化器执行SQL查询语句, 分析执行结果可以优化查询语句以提升查询性能.</p>\n<p>语句:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> xx <span class=\"keyword\">where</span> yy <span class=\"operator\">=</span> <span class=\"string\">&#x27;zz&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>相应字段介绍:</p>\n<ul>\n<li><p>id : 语句中select查询子句的顺序</p>\n</li>\n<li><p>select_type : 查询类型</p>\n<ul>\n<li><p>SIMPLE : 简单查询, 不包含子查询与union查询</p>\n</li>\n<li><p>PRIMARY : 主查询, 存在子查询时,外层查询被标记为主查询</p>\n</li>\n<li><p>SUBQUERY : 子查询</p>\n</li>\n<li><p>UNION : 在union命令后的语句为此类型</p>\n</li>\n<li><p>UNION RESULT : 最终UNION结果会表示为此类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    id  select_type   table       partitions  type    possible_keys        key      </span><br><span class=\"line\">------  ------------  ----------  ----------  ------  -------------------  ------- </span><br><span class=\"line\">     1  PRIMARY       student     (NULL)      const   PRIMARY,id_name_age  PRIMARY  </span><br><span class=\"line\">     2  UNION         student     (NULL)      const   PRIMARY,id_name_age  PRIMARY </span><br><span class=\"line\">(NULL)  UNION RESULT  &lt;union1,2&gt;  (NULL)      ALL     (NULL)               (NULL)   </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DERIVED : FROM列表中包含子查询的语句被标记为此类型, MySQL会递归执行这些子查询放入临时表(MySQL 5.7+ 优化后使用derived_merge加速查询效率. 无此状态)</p>\n</li>\n</ul>\n</li>\n<li><p>table : 访问的表,结合id可以看到执行过程中表查询顺序</p>\n</li>\n<li><p>partitions : 匹配分区</p>\n</li>\n<li><p>type : 访问类型</p>\n<p>10个状态,从好到差排序:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; ref_or_null &gt; index_merge &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>NULL : 无需访问表和索引的查询. 例: </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"number\">5</span><span class=\"operator\">*</span><span class=\"number\">7</span>  <span class=\"comment\">-- 不访问表,计算数值</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(id) <span class=\"keyword\">FROM</span> student  <span class=\"comment\">-- 查询最大索引,直接取索引树叶子结点获取 </span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SYSTEM : 表只有一行记录（等于系统表），这是<code>const</code>类型的特列，平时不大会出现，可以忽略。</p>\n</li>\n<li><p>const : 一次索引查找到,主键索引或唯一索引查询时</p>\n</li>\n<li><p>eq_ref : 联表join查询时, 按联表的主键或唯一键查询</p>\n</li>\n<li><p>ref : 联表join查询时, 按联表的索引查询, 匹配多行不唯一</p>\n</li>\n<li><p>ref_or_null : 类似ref, 可以搜索值为NULL的行</p>\n</li>\n<li><p>index_merge : 查询了多个索引,然后取交集并集. 常见于在<code>and</code>, ‘or’的条件下使用了不同的索引. 大部分性能不如<code>range</code></p>\n</li>\n<li><p>range : 索引范围查询,常见于 &lt;&gt;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, IS NULL, &lt;&#x3D;&gt;, BETWEEN, IN()或者like等运算符的查询中</p>\n</li>\n<li><p>ALL : 全表扫描, 务必优化!!!</p>\n</li>\n</ul>\n</li>\n<li><p>possible_keys : 可能使用的索引</p>\n</li>\n<li><p>key : 实际使用的索引, 为null时表示没使用索引</p>\n</li>\n<li><p>key_len : 索引中使用的字节数</p>\n</li>\n<li><p>ref : 索引的哪一列被使用</p>\n</li>\n<li><p>rows : 根据表统计信息以及索引选用情况,估算查找所需记录需要读取的行数. 数值越小效率越高</p>\n</li>\n<li><p>filtere : 查询数据占表的百分比. 类似rows,数值越小效率越高</p>\n</li>\n<li><p>extra : 其他重要的额外信息</p>\n<ul>\n<li>Using filesort : SQL需要排序, 但是优化器找不到可以使用的索引, 此时使用外部排序(多次磁盘IO访问,效率极低)</li>\n<li>Using tempporary : 查询结果排序时, 使用临时表协助. 效率低于外部排序.</li>\n<li>Using index : 使用了索引 👍🏻👍🏻👍🏻</li>\n<li>Using where : 使用了where</li>\n<li>Using join buffer : 多表join使用了连接缓存</li>\n<li>impossible where : 筛选条件啥也没找到</li>\n<li>distinct : 优化distinct操作, 找到匹配后立即停止同样值的动作</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>explain</code>是MySQL查询优化的关键命令. 通过这个命令可以模拟优化器执行SQL查询语句, 分析执行结果可以优化查询语句以提升查询性能.</p>\n<p>语句:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> xx <span class=\"keyword\">where</span> yy <span class=\"operator\">=</span> <span class=\"string\">&#x27;zz&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>相应字段介绍:</p>\n<ul>\n<li><p>id : 语句中select查询子句的顺序</p>\n</li>\n<li><p>select_type : 查询类型</p>\n<ul>\n<li><p>SIMPLE : 简单查询, 不包含子查询与union查询</p>\n</li>\n<li><p>PRIMARY : 主查询, 存在子查询时,外层查询被标记为主查询</p>\n</li>\n<li><p>SUBQUERY : 子查询</p>\n</li>\n<li><p>UNION : 在union命令后的语句为此类型</p>\n</li>\n<li><p>UNION RESULT : 最终UNION结果会表示为此类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    id  select_type   table       partitions  type    possible_keys        key      </span><br><span class=\"line\">------  ------------  ----------  ----------  ------  -------------------  ------- </span><br><span class=\"line\">     1  PRIMARY       student     (NULL)      const   PRIMARY,id_name_age  PRIMARY  </span><br><span class=\"line\">     2  UNION         student     (NULL)      const   PRIMARY,id_name_age  PRIMARY </span><br><span class=\"line\">(NULL)  UNION RESULT  &lt;union1,2&gt;  (NULL)      ALL     (NULL)               (NULL)   </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DERIVED : FROM列表中包含子查询的语句被标记为此类型, MySQL会递归执行这些子查询放入临时表(MySQL 5.7+ 优化后使用derived_merge加速查询效率. 无此状态)</p>\n</li>\n</ul>\n</li>\n<li><p>table : 访问的表,结合id可以看到执行过程中表查询顺序</p>\n</li>\n<li><p>partitions : 匹配分区</p>\n</li>\n<li><p>type : 访问类型</p>\n<p>10个状态,从好到差排序:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; ref_or_null &gt; index_merge &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>NULL : 无需访问表和索引的查询. 例: </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"number\">5</span><span class=\"operator\">*</span><span class=\"number\">7</span>  <span class=\"comment\">-- 不访问表,计算数值</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(id) <span class=\"keyword\">FROM</span> student  <span class=\"comment\">-- 查询最大索引,直接取索引树叶子结点获取 </span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SYSTEM : 表只有一行记录（等于系统表），这是<code>const</code>类型的特列，平时不大会出现，可以忽略。</p>\n</li>\n<li><p>const : 一次索引查找到,主键索引或唯一索引查询时</p>\n</li>\n<li><p>eq_ref : 联表join查询时, 按联表的主键或唯一键查询</p>\n</li>\n<li><p>ref : 联表join查询时, 按联表的索引查询, 匹配多行不唯一</p>\n</li>\n<li><p>ref_or_null : 类似ref, 可以搜索值为NULL的行</p>\n</li>\n<li><p>index_merge : 查询了多个索引,然后取交集并集. 常见于在<code>and</code>, ‘or’的条件下使用了不同的索引. 大部分性能不如<code>range</code></p>\n</li>\n<li><p>range : 索引范围查询,常见于 &lt;&gt;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, IS NULL, &lt;&#x3D;&gt;, BETWEEN, IN()或者like等运算符的查询中</p>\n</li>\n<li><p>ALL : 全表扫描, 务必优化!!!</p>\n</li>\n</ul>\n</li>\n<li><p>possible_keys : 可能使用的索引</p>\n</li>\n<li><p>key : 实际使用的索引, 为null时表示没使用索引</p>\n</li>\n<li><p>key_len : 索引中使用的字节数</p>\n</li>\n<li><p>ref : 索引的哪一列被使用</p>\n</li>\n<li><p>rows : 根据表统计信息以及索引选用情况,估算查找所需记录需要读取的行数. 数值越小效率越高</p>\n</li>\n<li><p>filtere : 查询数据占表的百分比. 类似rows,数值越小效率越高</p>\n</li>\n<li><p>extra : 其他重要的额外信息</p>\n<ul>\n<li>Using filesort : SQL需要排序, 但是优化器找不到可以使用的索引, 此时使用外部排序(多次磁盘IO访问,效率极低)</li>\n<li>Using tempporary : 查询结果排序时, 使用临时表协助. 效率低于外部排序.</li>\n<li>Using index : 使用了索引 👍🏻👍🏻👍🏻</li>\n<li>Using where : 使用了where</li>\n<li>Using join buffer : 多表join使用了连接缓存</li>\n<li>impossible where : 筛选条件啥也没找到</li>\n<li>distinct : 优化distinct操作, 找到匹配后立即停止同样值的动作</li>\n</ul>\n</li>\n</ul>\n"},{"title":"RAFT算法","date":"2022-06-01T01:43:50.000Z","_content":"","source":"_posts/RAFT算法.md","raw":"---\ntitle: RAFT算法\ndate: 2022-06-01 09:43:50\ntags:\n---\n","slug":"RAFT算法","published":1,"updated":"2022-06-01T01:43:50.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0za000kwuh89ran5sw8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RESTful","date":"2022-06-01T01:11:01.000Z","_content":"\n# REST\n\n## `Resource Representational State Transfer`：\n\n- **资源（Resource）** ：URL即资源，指向具体操作的对象\n- **表现形式（Representational）**：请求数据类型（`json`, `xml`,`file`等）\n- **状态转移（State Transfer）** ：通过具体的`method`行为（`GET`,`POST`,`PUT`,`PATCH`,`DELETE`）操作资源并改变资源状态\n\n## 动作\n\n- `GET` 获取资源\n- `POST` 保存资源\n- `PUT` 更新资源（全量更新）\n- `PATCH` 更新资源（部分更新）\n- `DELETE` 删除资源\n\n## URL设计规则\n\n- 不可包含动词，仅描述资源\n- 使用小写字母\n- 设置版本号规则，实现版本化\n\n## \n\n# HATEOAS\n\n`Hypermedia as the Engine of Application State`\n\n可以被简单的理解为为 REST API 中的 Resource 提供必要的链接，对，就像是 HTML 页面上的链接。我们在访问一个 web 站点的时候从来没有说要看一个说明文档并在其中找到我们所需要的资源的 URI，而是通过一个入口页面（当然，搜索引擎也提供了入口）所包含的链接，一步一步找到我们想要的内容。HATEOAS 是 REST 架构风格重要的组成部分，然而对于现在的诸多 REST 接口中却并没有它的身影。它被 [Richardson Maturity Model](https://martinfowler.com/articles/richardsonMaturityModel.html) 定义为 REST 的最终形态。[参考链接](https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/)\n\n\n\n# SpringBoot\n\n参考1：[SpringBoot Restful](https://spring.io/guides/tutorials/rest/)\n\n参考2：[SpringBoot & HATEOAS](https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/)\n\n参考3：[Spring HATEOAS](https://docs.spring.io/spring-hateoas/docs/1.5.0/reference/html/)\n\n","source":"_posts/RESTful.md","raw":"---\ntitle: RESTful\ndate: 2022-06-01 09:11:01\ntags:\n  - RESTful\n  - HATEOAS\n---\n\n# REST\n\n## `Resource Representational State Transfer`：\n\n- **资源（Resource）** ：URL即资源，指向具体操作的对象\n- **表现形式（Representational）**：请求数据类型（`json`, `xml`,`file`等）\n- **状态转移（State Transfer）** ：通过具体的`method`行为（`GET`,`POST`,`PUT`,`PATCH`,`DELETE`）操作资源并改变资源状态\n\n## 动作\n\n- `GET` 获取资源\n- `POST` 保存资源\n- `PUT` 更新资源（全量更新）\n- `PATCH` 更新资源（部分更新）\n- `DELETE` 删除资源\n\n## URL设计规则\n\n- 不可包含动词，仅描述资源\n- 使用小写字母\n- 设置版本号规则，实现版本化\n\n## \n\n# HATEOAS\n\n`Hypermedia as the Engine of Application State`\n\n可以被简单的理解为为 REST API 中的 Resource 提供必要的链接，对，就像是 HTML 页面上的链接。我们在访问一个 web 站点的时候从来没有说要看一个说明文档并在其中找到我们所需要的资源的 URI，而是通过一个入口页面（当然，搜索引擎也提供了入口）所包含的链接，一步一步找到我们想要的内容。HATEOAS 是 REST 架构风格重要的组成部分，然而对于现在的诸多 REST 接口中却并没有它的身影。它被 [Richardson Maturity Model](https://martinfowler.com/articles/richardsonMaturityModel.html) 定义为 REST 的最终形态。[参考链接](https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/)\n\n\n\n# SpringBoot\n\n参考1：[SpringBoot Restful](https://spring.io/guides/tutorials/rest/)\n\n参考2：[SpringBoot & HATEOAS](https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/)\n\n参考3：[Spring HATEOAS](https://docs.spring.io/spring-hateoas/docs/1.5.0/reference/html/)\n\n","slug":"RESTful","published":1,"updated":"2022-06-01T01:36:03.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zb000mwuh86i502n7i","content":"<h1 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h1><h2 id=\"Resource-Representational-State-Transfer：\"><a href=\"#Resource-Representational-State-Transfer：\" class=\"headerlink\" title=\"Resource Representational State Transfer：\"></a><code>Resource Representational State Transfer</code>：</h2><ul>\n<li><strong>资源（Resource）</strong> ：URL即资源，指向具体操作的对象</li>\n<li><strong>表现形式（Representational）</strong>：请求数据类型（<code>json</code>, <code>xml</code>,<code>file</code>等）</li>\n<li><strong>状态转移（State Transfer）</strong> ：通过具体的<code>method</code>行为（<code>GET</code>,<code>POST</code>,<code>PUT</code>,<code>PATCH</code>,<code>DELETE</code>）操作资源并改变资源状态</li>\n</ul>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><ul>\n<li><code>GET</code> 获取资源</li>\n<li><code>POST</code> 保存资源</li>\n<li><code>PUT</code> 更新资源（全量更新）</li>\n<li><code>PATCH</code> 更新资源（部分更新）</li>\n<li><code>DELETE</code> 删除资源</li>\n</ul>\n<h2 id=\"URL设计规则\"><a href=\"#URL设计规则\" class=\"headerlink\" title=\"URL设计规则\"></a>URL设计规则</h2><ul>\n<li>不可包含动词，仅描述资源</li>\n<li>使用小写字母</li>\n<li>设置版本号规则，实现版本化</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"HATEOAS\"><a href=\"#HATEOAS\" class=\"headerlink\" title=\"HATEOAS\"></a>HATEOAS</h1><p><code>Hypermedia as the Engine of Application State</code></p>\n<p>可以被简单的理解为为 REST API 中的 Resource 提供必要的链接，对，就像是 HTML 页面上的链接。我们在访问一个 web 站点的时候从来没有说要看一个说明文档并在其中找到我们所需要的资源的 URI，而是通过一个入口页面（当然，搜索引擎也提供了入口）所包含的链接，一步一步找到我们想要的内容。HATEOAS 是 REST 架构风格重要的组成部分，然而对于现在的诸多 REST 接口中却并没有它的身影。它被 <a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">Richardson Maturity Model</a> 定义为 REST 的最终形态。<a href=\"https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/\">参考链接</a></p>\n<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><p>参考1：<a href=\"https://spring.io/guides/tutorials/rest/\">SpringBoot Restful</a></p>\n<p>参考2：<a href=\"https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/\">SpringBoot &amp; HATEOAS</a></p>\n<p>参考3：<a href=\"https://docs.spring.io/spring-hateoas/docs/1.5.0/reference/html/\">Spring HATEOAS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h1><h2 id=\"Resource-Representational-State-Transfer：\"><a href=\"#Resource-Representational-State-Transfer：\" class=\"headerlink\" title=\"Resource Representational State Transfer：\"></a><code>Resource Representational State Transfer</code>：</h2><ul>\n<li><strong>资源（Resource）</strong> ：URL即资源，指向具体操作的对象</li>\n<li><strong>表现形式（Representational）</strong>：请求数据类型（<code>json</code>, <code>xml</code>,<code>file</code>等）</li>\n<li><strong>状态转移（State Transfer）</strong> ：通过具体的<code>method</code>行为（<code>GET</code>,<code>POST</code>,<code>PUT</code>,<code>PATCH</code>,<code>DELETE</code>）操作资源并改变资源状态</li>\n</ul>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><ul>\n<li><code>GET</code> 获取资源</li>\n<li><code>POST</code> 保存资源</li>\n<li><code>PUT</code> 更新资源（全量更新）</li>\n<li><code>PATCH</code> 更新资源（部分更新）</li>\n<li><code>DELETE</code> 删除资源</li>\n</ul>\n<h2 id=\"URL设计规则\"><a href=\"#URL设计规则\" class=\"headerlink\" title=\"URL设计规则\"></a>URL设计规则</h2><ul>\n<li>不可包含动词，仅描述资源</li>\n<li>使用小写字母</li>\n<li>设置版本号规则，实现版本化</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"HATEOAS\"><a href=\"#HATEOAS\" class=\"headerlink\" title=\"HATEOAS\"></a>HATEOAS</h1><p><code>Hypermedia as the Engine of Application State</code></p>\n<p>可以被简单的理解为为 REST API 中的 Resource 提供必要的链接，对，就像是 HTML 页面上的链接。我们在访问一个 web 站点的时候从来没有说要看一个说明文档并在其中找到我们所需要的资源的 URI，而是通过一个入口页面（当然，搜索引擎也提供了入口）所包含的链接，一步一步找到我们想要的内容。HATEOAS 是 REST 架构风格重要的组成部分，然而对于现在的诸多 REST 接口中却并没有它的身影。它被 <a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">Richardson Maturity Model</a> 定义为 REST 的最终形态。<a href=\"https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/\">参考链接</a></p>\n<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><p>参考1：<a href=\"https://spring.io/guides/tutorials/rest/\">SpringBoot Restful</a></p>\n<p>参考2：<a href=\"https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/\">SpringBoot &amp; HATEOAS</a></p>\n<p>参考3：<a href=\"https://docs.spring.io/spring-hateoas/docs/1.5.0/reference/html/\">Spring HATEOAS</a></p>\n"},{"title":"Redis数据结构底层原","date":"2022-06-04T14:10:02.000Z","_content":"\n参考: [Redis数据结构](https://www.cnblogs.com/xiaolincoding/p/15628854.html)\n\n![redis数据结构-lastnew](redis数据结构-lastnew.png)\n\n![redis全景图](redis全景图.png)\n\n*redis存储访问流程\n\n- redisDb 结构，表示 Redis 数据库的结构，结构体里存放了指向了 dict 结构的指针；\n- dict 结构，结构体里存放了 2 个哈希表，正常情况下都是用「哈希表1」，「哈希表2」只有在 rehash 的时候才用；\n- ditctht 结构，表示哈希表的结构，结构里存放了哈希表数组，数组中的每个元素都是指向一个哈希表节点结构（dictEntry）的指针；\n- dictEntry 结构，表示哈希表节点的结构，结构里存放了 **void \\* key 和 void \\* value 指针， \\*key 指向的是 String 对象，而 \\*value 则可以指向 String 对象，也可以指向集合类型的对象，比如 List 对象、Hash 对象、Set 对象和 Zset 对象**。\n\n# string：字符串\n\nredis使用c语言开发, 在redis中，其自己定义了一种字符串格式，叫做SDS（Simple Dynamic String），即简单动态字符串. 结构定义sds.h:\n\n```c\ntypedef char *sds;\n```\n\nsds包含以下属性:\n\n- len：已使用的长度，即字符串的真实长度. 降低获取字符串长度复杂度到O(1). 同时帮助二进制安全\n- alloc：分配的长度, 除去标头和终止符('\\0')后的长度. 减少而内存分配次数\n- flags：表示不同类型的SDS, 低3位表示\n- buf[]：存储字符数据\n\n# list：列表\n\n使用双向链表, 获取节点前后节点时间复杂度O(1),获取头尾节点也是O(1). 同时链表使用指针保存值, 可以保存各种类型的数据.\n\n```c\ntypedef struct list {\n    //链表头节点\n    listNode *head;\n    //链表尾节点\n    listNode *tail;\n    //节点值复制函数\n    void *(*dup)(void *ptr);\n    //节点值释放函数\n    void (*free)(void *ptr);\n    //节点值比较函数\n    int (*match)(void *ptr, void *key);\n    //链表节点数量\n    unsigned long len;\n} list;\n\n```\n\n- ziplist\n\n  ![压缩列表节点结构](压缩列表节点结构.png)\n\n  相比链表, 设计为更为内存紧凑的数据结构, 可以有效利用CPU缓存. 而且针对不同长度数据进行编码以节省内存开销. 同样存在缺陷: 不可以保存过多的元素,新增修改元素时,内存需要重分配和引发连锁更新问题.\n  \n  - zlbytes：4个字节（32bits），表示ziplist占用的总字节数\n  - zltail：4个字节（32bits），表示ziplist中最后一个节点在ziplist中的偏移字节数\n  - entries：2个字节（16bits），表示ziplist中的元素数\n  - entry：长度不定，表示ziplist中的数据 (内部包含prevlen: 记录前一个节点长度(如果内存重新分配,后续的该字段都要更新,造成性能下降--**连锁更新问题**), encoding: 记录当前节点类型与长度, data: 数据)\n  - zlend：1个字节（8bits），表示结束标记，这个值固定为ff（255）\n\n  这些数据均为小端存储，所以可能有些人查看数据的二进制流与其含义对应不上，其实是因为读数据的方式错了\n\n  ziplist内部采取数据压缩的方式进行存储，压缩方式就不是重点了，我们仅从宏观来看，ziplist类似一个封装的数组，通过zltail可以方便地进行追加和删除尾部数据、使用entries可以方便地计算长度\n  \n  但是其依然有数组的缺点，就是当插入和删除数据时会频繁地引起数据移动，所以就引出了quicklist数据类型\n  \n- quick list\n\n  「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表。\n\n  ![quicklist](quicklist.png)\n  \n- listpack\n\n  ![listpack节点](listpack节点.png)\n\n# hash：散列表\n\n![哈希表结构](哈希表结构.png)\n\n- 哈希冲突\n- 链式哈希\n- rehash\n- 渐进式 rehash\n- rehash 触发条件\n\n# set：无序集合\n\n整数集合是 Set 对象的底层实现之一。当一个 Set 对象只包含整数值元素，并且元素数量不时，就会使用整数集这个数据结构作为底层实现。\n\n- 整数集合\n\n# zset：有序集合\n\n内部使用跳表\n\n- 跳表\n\n待补充\n","source":"_posts/Redis数据结构底层原.md","raw":"---\ntitle: Redis数据结构底层原\ndate: 2022-06-04 22:10:02\ntags:\n  - Redis\n---\n\n参考: [Redis数据结构](https://www.cnblogs.com/xiaolincoding/p/15628854.html)\n\n![redis数据结构-lastnew](redis数据结构-lastnew.png)\n\n![redis全景图](redis全景图.png)\n\n*redis存储访问流程\n\n- redisDb 结构，表示 Redis 数据库的结构，结构体里存放了指向了 dict 结构的指针；\n- dict 结构，结构体里存放了 2 个哈希表，正常情况下都是用「哈希表1」，「哈希表2」只有在 rehash 的时候才用；\n- ditctht 结构，表示哈希表的结构，结构里存放了哈希表数组，数组中的每个元素都是指向一个哈希表节点结构（dictEntry）的指针；\n- dictEntry 结构，表示哈希表节点的结构，结构里存放了 **void \\* key 和 void \\* value 指针， \\*key 指向的是 String 对象，而 \\*value 则可以指向 String 对象，也可以指向集合类型的对象，比如 List 对象、Hash 对象、Set 对象和 Zset 对象**。\n\n# string：字符串\n\nredis使用c语言开发, 在redis中，其自己定义了一种字符串格式，叫做SDS（Simple Dynamic String），即简单动态字符串. 结构定义sds.h:\n\n```c\ntypedef char *sds;\n```\n\nsds包含以下属性:\n\n- len：已使用的长度，即字符串的真实长度. 降低获取字符串长度复杂度到O(1). 同时帮助二进制安全\n- alloc：分配的长度, 除去标头和终止符('\\0')后的长度. 减少而内存分配次数\n- flags：表示不同类型的SDS, 低3位表示\n- buf[]：存储字符数据\n\n# list：列表\n\n使用双向链表, 获取节点前后节点时间复杂度O(1),获取头尾节点也是O(1). 同时链表使用指针保存值, 可以保存各种类型的数据.\n\n```c\ntypedef struct list {\n    //链表头节点\n    listNode *head;\n    //链表尾节点\n    listNode *tail;\n    //节点值复制函数\n    void *(*dup)(void *ptr);\n    //节点值释放函数\n    void (*free)(void *ptr);\n    //节点值比较函数\n    int (*match)(void *ptr, void *key);\n    //链表节点数量\n    unsigned long len;\n} list;\n\n```\n\n- ziplist\n\n  ![压缩列表节点结构](压缩列表节点结构.png)\n\n  相比链表, 设计为更为内存紧凑的数据结构, 可以有效利用CPU缓存. 而且针对不同长度数据进行编码以节省内存开销. 同样存在缺陷: 不可以保存过多的元素,新增修改元素时,内存需要重分配和引发连锁更新问题.\n  \n  - zlbytes：4个字节（32bits），表示ziplist占用的总字节数\n  - zltail：4个字节（32bits），表示ziplist中最后一个节点在ziplist中的偏移字节数\n  - entries：2个字节（16bits），表示ziplist中的元素数\n  - entry：长度不定，表示ziplist中的数据 (内部包含prevlen: 记录前一个节点长度(如果内存重新分配,后续的该字段都要更新,造成性能下降--**连锁更新问题**), encoding: 记录当前节点类型与长度, data: 数据)\n  - zlend：1个字节（8bits），表示结束标记，这个值固定为ff（255）\n\n  这些数据均为小端存储，所以可能有些人查看数据的二进制流与其含义对应不上，其实是因为读数据的方式错了\n\n  ziplist内部采取数据压缩的方式进行存储，压缩方式就不是重点了，我们仅从宏观来看，ziplist类似一个封装的数组，通过zltail可以方便地进行追加和删除尾部数据、使用entries可以方便地计算长度\n  \n  但是其依然有数组的缺点，就是当插入和删除数据时会频繁地引起数据移动，所以就引出了quicklist数据类型\n  \n- quick list\n\n  「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表。\n\n  ![quicklist](quicklist.png)\n  \n- listpack\n\n  ![listpack节点](listpack节点.png)\n\n# hash：散列表\n\n![哈希表结构](哈希表结构.png)\n\n- 哈希冲突\n- 链式哈希\n- rehash\n- 渐进式 rehash\n- rehash 触发条件\n\n# set：无序集合\n\n整数集合是 Set 对象的底层实现之一。当一个 Set 对象只包含整数值元素，并且元素数量不时，就会使用整数集这个数据结构作为底层实现。\n\n- 整数集合\n\n# zset：有序集合\n\n内部使用跳表\n\n- 跳表\n\n待补充\n","slug":"Redis数据结构底层原","published":1,"updated":"2022-06-05T03:59:52.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zd000nwuh88mhr34h9","content":"<p>参考: <a href=\"https://www.cnblogs.com/xiaolincoding/p/15628854.html\">Redis数据结构</a></p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-lastnew.png\" alt=\"redis数据结构-lastnew\"></p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/redis%E5%85%A8%E6%99%AF%E5%9B%BE.png\" alt=\"redis全景图\"></p>\n<p>*redis存储访问流程</p>\n<ul>\n<li>redisDb 结构，表示 Redis 数据库的结构，结构体里存放了指向了 dict 结构的指针；</li>\n<li>dict 结构，结构体里存放了 2 个哈希表，正常情况下都是用「哈希表1」，「哈希表2」只有在 rehash 的时候才用；</li>\n<li>ditctht 结构，表示哈希表的结构，结构里存放了哈希表数组，数组中的每个元素都是指向一个哈希表节点结构（dictEntry）的指针；</li>\n<li>dictEntry 结构，表示哈希表节点的结构，结构里存放了 <strong>void * key 和 void * value 指针， *key 指向的是 String 对象，而 *value 则可以指向 String 对象，也可以指向集合类型的对象，比如 List 对象、Hash 对象、Set 对象和 Zset 对象</strong>。</li>\n</ul>\n<h1 id=\"string：字符串\"><a href=\"#string：字符串\" class=\"headerlink\" title=\"string：字符串\"></a>string：字符串</h1><p>redis使用c语言开发, 在redis中，其自己定义了一种字符串格式，叫做SDS（Simple Dynamic String），即简单动态字符串. 结构定义sds.h:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">char</span> *sds;</span><br></pre></td></tr></table></figure>\n\n<p>sds包含以下属性:</p>\n<ul>\n<li>len：已使用的长度，即字符串的真实长度. 降低获取字符串长度复杂度到O(1). 同时帮助二进制安全</li>\n<li>alloc：分配的长度, 除去标头和终止符(‘\\0’)后的长度. 减少而内存分配次数</li>\n<li>flags：表示不同类型的SDS, 低3位表示</li>\n<li>buf[]：存储字符数据</li>\n</ul>\n<h1 id=\"list：列表\"><a href=\"#list：列表\" class=\"headerlink\" title=\"list：列表\"></a>list：列表</h1><p>使用双向链表, 获取节点前后节点时间复杂度O(1),获取头尾节点也是O(1). 同时链表使用指针保存值, 可以保存各种类型的数据.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//链表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\">    <span class=\"comment\">//链表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\">    <span class=\"comment\">//节点值复制函数</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *(*dup)(<span class=\"type\">void</span> *ptr);</span><br><span class=\"line\">    <span class=\"comment\">//节点值释放函数</span></span><br><span class=\"line\">    <span class=\"type\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"type\">void</span> *ptr);</span><br><span class=\"line\">    <span class=\"comment\">//节点值比较函数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> (*match)(<span class=\"type\">void</span> *ptr, <span class=\"type\">void</span> *key);</span><br><span class=\"line\">    <span class=\"comment\">//链表节点数量</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> len;</span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ziplist</p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.png\" alt=\"压缩列表节点结构\"></p>\n<p>相比链表, 设计为更为内存紧凑的数据结构, 可以有效利用CPU缓存. 而且针对不同长度数据进行编码以节省内存开销. 同样存在缺陷: 不可以保存过多的元素,新增修改元素时,内存需要重分配和引发连锁更新问题.</p>\n<ul>\n<li>zlbytes：4个字节（32bits），表示ziplist占用的总字节数</li>\n<li>zltail：4个字节（32bits），表示ziplist中最后一个节点在ziplist中的偏移字节数</li>\n<li>entries：2个字节（16bits），表示ziplist中的元素数</li>\n<li>entry：长度不定，表示ziplist中的数据 (内部包含prevlen: 记录前一个节点长度(如果内存重新分配,后续的该字段都要更新,造成性能下降–<strong>连锁更新问题</strong>), encoding: 记录当前节点类型与长度, data: 数据)</li>\n<li>zlend：1个字节（8bits），表示结束标记，这个值固定为ff（255）</li>\n</ul>\n<p>这些数据均为小端存储，所以可能有些人查看数据的二进制流与其含义对应不上，其实是因为读数据的方式错了</p>\n<p>ziplist内部采取数据压缩的方式进行存储，压缩方式就不是重点了，我们仅从宏观来看，ziplist类似一个封装的数组，通过zltail可以方便地进行追加和删除尾部数据、使用entries可以方便地计算长度</p>\n<p>但是其依然有数组的缺点，就是当插入和删除数据时会频繁地引起数据移动，所以就引出了quicklist数据类型</p>\n</li>\n<li><p>quick list</p>\n<p>「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表。</p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/quicklist.png\" alt=\"quicklist\"></p>\n</li>\n<li><p>listpack</p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/listpack%E8%8A%82%E7%82%B9.png\" alt=\"listpack节点\"></p>\n</li>\n</ul>\n<h1 id=\"hash：散列表\"><a href=\"#hash：散列表\" class=\"headerlink\" title=\"hash：散列表\"></a>hash：散列表</h1><p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%BB%93%E6%9E%84.png\" alt=\"哈希表结构\"></p>\n<ul>\n<li>哈希冲突</li>\n<li>链式哈希</li>\n<li>rehash</li>\n<li>渐进式 rehash</li>\n<li>rehash 触发条件</li>\n</ul>\n<h1 id=\"set：无序集合\"><a href=\"#set：无序集合\" class=\"headerlink\" title=\"set：无序集合\"></a>set：无序集合</h1><p>整数集合是 Set 对象的底层实现之一。当一个 Set 对象只包含整数值元素，并且元素数量不时，就会使用整数集这个数据结构作为底层实现。</p>\n<ul>\n<li>整数集合</li>\n</ul>\n<h1 id=\"zset：有序集合\"><a href=\"#zset：有序集合\" class=\"headerlink\" title=\"zset：有序集合\"></a>zset：有序集合</h1><p>内部使用跳表</p>\n<ul>\n<li>跳表</li>\n</ul>\n<p>待补充</p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"https://www.cnblogs.com/xiaolincoding/p/15628854.html\">Redis数据结构</a></p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-lastnew.png\" alt=\"redis数据结构-lastnew\"></p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/redis%E5%85%A8%E6%99%AF%E5%9B%BE.png\" alt=\"redis全景图\"></p>\n<p>*redis存储访问流程</p>\n<ul>\n<li>redisDb 结构，表示 Redis 数据库的结构，结构体里存放了指向了 dict 结构的指针；</li>\n<li>dict 结构，结构体里存放了 2 个哈希表，正常情况下都是用「哈希表1」，「哈希表2」只有在 rehash 的时候才用；</li>\n<li>ditctht 结构，表示哈希表的结构，结构里存放了哈希表数组，数组中的每个元素都是指向一个哈希表节点结构（dictEntry）的指针；</li>\n<li>dictEntry 结构，表示哈希表节点的结构，结构里存放了 <strong>void * key 和 void * value 指针， *key 指向的是 String 对象，而 *value 则可以指向 String 对象，也可以指向集合类型的对象，比如 List 对象、Hash 对象、Set 对象和 Zset 对象</strong>。</li>\n</ul>\n<h1 id=\"string：字符串\"><a href=\"#string：字符串\" class=\"headerlink\" title=\"string：字符串\"></a>string：字符串</h1><p>redis使用c语言开发, 在redis中，其自己定义了一种字符串格式，叫做SDS（Simple Dynamic String），即简单动态字符串. 结构定义sds.h:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">char</span> *sds;</span><br></pre></td></tr></table></figure>\n\n<p>sds包含以下属性:</p>\n<ul>\n<li>len：已使用的长度，即字符串的真实长度. 降低获取字符串长度复杂度到O(1). 同时帮助二进制安全</li>\n<li>alloc：分配的长度, 除去标头和终止符(‘\\0’)后的长度. 减少而内存分配次数</li>\n<li>flags：表示不同类型的SDS, 低3位表示</li>\n<li>buf[]：存储字符数据</li>\n</ul>\n<h1 id=\"list：列表\"><a href=\"#list：列表\" class=\"headerlink\" title=\"list：列表\"></a>list：列表</h1><p>使用双向链表, 获取节点前后节点时间复杂度O(1),获取头尾节点也是O(1). 同时链表使用指针保存值, 可以保存各种类型的数据.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//链表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\">    <span class=\"comment\">//链表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\">    <span class=\"comment\">//节点值复制函数</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *(*dup)(<span class=\"type\">void</span> *ptr);</span><br><span class=\"line\">    <span class=\"comment\">//节点值释放函数</span></span><br><span class=\"line\">    <span class=\"type\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"type\">void</span> *ptr);</span><br><span class=\"line\">    <span class=\"comment\">//节点值比较函数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> (*match)(<span class=\"type\">void</span> *ptr, <span class=\"type\">void</span> *key);</span><br><span class=\"line\">    <span class=\"comment\">//链表节点数量</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> len;</span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ziplist</p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.png\" alt=\"压缩列表节点结构\"></p>\n<p>相比链表, 设计为更为内存紧凑的数据结构, 可以有效利用CPU缓存. 而且针对不同长度数据进行编码以节省内存开销. 同样存在缺陷: 不可以保存过多的元素,新增修改元素时,内存需要重分配和引发连锁更新问题.</p>\n<ul>\n<li>zlbytes：4个字节（32bits），表示ziplist占用的总字节数</li>\n<li>zltail：4个字节（32bits），表示ziplist中最后一个节点在ziplist中的偏移字节数</li>\n<li>entries：2个字节（16bits），表示ziplist中的元素数</li>\n<li>entry：长度不定，表示ziplist中的数据 (内部包含prevlen: 记录前一个节点长度(如果内存重新分配,后续的该字段都要更新,造成性能下降–<strong>连锁更新问题</strong>), encoding: 记录当前节点类型与长度, data: 数据)</li>\n<li>zlend：1个字节（8bits），表示结束标记，这个值固定为ff（255）</li>\n</ul>\n<p>这些数据均为小端存储，所以可能有些人查看数据的二进制流与其含义对应不上，其实是因为读数据的方式错了</p>\n<p>ziplist内部采取数据压缩的方式进行存储，压缩方式就不是重点了，我们仅从宏观来看，ziplist类似一个封装的数组，通过zltail可以方便地进行追加和删除尾部数据、使用entries可以方便地计算长度</p>\n<p>但是其依然有数组的缺点，就是当插入和删除数据时会频繁地引起数据移动，所以就引出了quicklist数据类型</p>\n</li>\n<li><p>quick list</p>\n<p>「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表。</p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/quicklist.png\" alt=\"quicklist\"></p>\n</li>\n<li><p>listpack</p>\n<p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/listpack%E8%8A%82%E7%82%B9.png\" alt=\"listpack节点\"></p>\n</li>\n</ul>\n<h1 id=\"hash：散列表\"><a href=\"#hash：散列表\" class=\"headerlink\" title=\"hash：散列表\"></a>hash：散列表</h1><p><img src=\"/2022/06/04/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%8E%9F/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%BB%93%E6%9E%84.png\" alt=\"哈希表结构\"></p>\n<ul>\n<li>哈希冲突</li>\n<li>链式哈希</li>\n<li>rehash</li>\n<li>渐进式 rehash</li>\n<li>rehash 触发条件</li>\n</ul>\n<h1 id=\"set：无序集合\"><a href=\"#set：无序集合\" class=\"headerlink\" title=\"set：无序集合\"></a>set：无序集合</h1><p>整数集合是 Set 对象的底层实现之一。当一个 Set 对象只包含整数值元素，并且元素数量不时，就会使用整数集这个数据结构作为底层实现。</p>\n<ul>\n<li>整数集合</li>\n</ul>\n<h1 id=\"zset：有序集合\"><a href=\"#zset：有序集合\" class=\"headerlink\" title=\"zset：有序集合\"></a>zset：有序集合</h1><p>内部使用跳表</p>\n<ul>\n<li>跳表</li>\n</ul>\n<p>待补充</p>\n"},{"title":"Sql 面试","date":"2022-06-04T08:49:30.000Z","_content":"\n1. having\n\n   having常用语分组后的条件过滤常用于`group by xx `后\n\n   例子:\n\n   ```sql\n   SELECT column_name, aggregate_function(column_name)\n   FROM table_name\n   WHERE column_name operator value\n   GROUP BY column_name\n   HAVING aggregate_function(column_name) operator value\n   ```\n\n   注意事项:\n\n   - having 子句内容需要存在select列表中\n   - having限制的是组, where限制的是行\n   - where, group by, having执行顺序: where过滤行 -> group by对数据分组,并执行聚集函数 -> having过滤符合条件的组\n\n2. `select a.xx,b.xx from a,b where a.x = b.x`与`select a.xx,b.xx from a inner join b on a.x = b.x` 区别\n\n3. union与union all\n\n   union会去重, union all 直接合并\n\n4. row_number()\n\n   ```sql\n   --在test表中根据name分组，age进行排序\n   select name,age,row_number() over(partition by name order by\n   age desc) from test;\n   ```\n\n   ```sql\n   --去掉重复的记录\n   select * from (select name,age,row_number() over( partition by name \n   order by age desc) rn from test )where rn= 1;\n   ```\n\n   可以对结果集进行分组排序并生成一个row_number序列\n\n5. DDL, DML与DCL\n\n   - DDL: Data Define Language, 数据定义语句. CREATE, ALTER, DROP等\n   - DML: Data Manage Language, 数据管理语句. SELECT, UPDATE, INSERT, DELETE\n   - DCL: Data Control Language, 数据控制语句. GRANT, DENY, REVOKE等个更新用户角色的命令\n\n6. exists 与 in\n\n   - `in` 仅执行一次(先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选), `exists`执行多次(外表行数)\n   - 外层查询小于子查询使用`exists`; 外层查询大于子查询使用`in`\n   - `in` 与`exists`都会使用索引\n   - `not in` 内外表均全局扫描,无法使用索引, `not exists`可以走索引\n   - `in`的遍历实在内存中,速度较快. `exists`多次查询数据库. \n\n7. 索引使用注意事项\n\n   - 尽量全值匹配\n   - 模糊查询使用最左匹配原则\n   - 全模糊查询使用覆盖索引方式也会走索引\n   - 不在索引列上进行操作\n   - 联合索引需要严格顺序匹配\n   - 尽量使用覆盖索引\n   - mysql在使用`!=`与`<>`时索引失效\n   - 字符串不加单引号导致索引失效\n   - `or`使得索引失效\n\n8. 索引创建\n\n   - 频繁查询的字段应创建索引\n   - 与其他表关联查询的字段创建索引\n   - 频繁更新的字段不适合作为索引\n\n9. sql书写题目\n\n   参考: [经典题目](https://blog.csdn.net/jason_wang1989/article/details/115278576)\n\n","source":"_posts/Sql-面试.md","raw":"---\ntitle: Sql 面试\ndate: 2022-06-04 16:49:30\ntags:\n  - sql\n  - 面试\n---\n\n1. having\n\n   having常用语分组后的条件过滤常用于`group by xx `后\n\n   例子:\n\n   ```sql\n   SELECT column_name, aggregate_function(column_name)\n   FROM table_name\n   WHERE column_name operator value\n   GROUP BY column_name\n   HAVING aggregate_function(column_name) operator value\n   ```\n\n   注意事项:\n\n   - having 子句内容需要存在select列表中\n   - having限制的是组, where限制的是行\n   - where, group by, having执行顺序: where过滤行 -> group by对数据分组,并执行聚集函数 -> having过滤符合条件的组\n\n2. `select a.xx,b.xx from a,b where a.x = b.x`与`select a.xx,b.xx from a inner join b on a.x = b.x` 区别\n\n3. union与union all\n\n   union会去重, union all 直接合并\n\n4. row_number()\n\n   ```sql\n   --在test表中根据name分组，age进行排序\n   select name,age,row_number() over(partition by name order by\n   age desc) from test;\n   ```\n\n   ```sql\n   --去掉重复的记录\n   select * from (select name,age,row_number() over( partition by name \n   order by age desc) rn from test )where rn= 1;\n   ```\n\n   可以对结果集进行分组排序并生成一个row_number序列\n\n5. DDL, DML与DCL\n\n   - DDL: Data Define Language, 数据定义语句. CREATE, ALTER, DROP等\n   - DML: Data Manage Language, 数据管理语句. SELECT, UPDATE, INSERT, DELETE\n   - DCL: Data Control Language, 数据控制语句. GRANT, DENY, REVOKE等个更新用户角色的命令\n\n6. exists 与 in\n\n   - `in` 仅执行一次(先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选), `exists`执行多次(外表行数)\n   - 外层查询小于子查询使用`exists`; 外层查询大于子查询使用`in`\n   - `in` 与`exists`都会使用索引\n   - `not in` 内外表均全局扫描,无法使用索引, `not exists`可以走索引\n   - `in`的遍历实在内存中,速度较快. `exists`多次查询数据库. \n\n7. 索引使用注意事项\n\n   - 尽量全值匹配\n   - 模糊查询使用最左匹配原则\n   - 全模糊查询使用覆盖索引方式也会走索引\n   - 不在索引列上进行操作\n   - 联合索引需要严格顺序匹配\n   - 尽量使用覆盖索引\n   - mysql在使用`!=`与`<>`时索引失效\n   - 字符串不加单引号导致索引失效\n   - `or`使得索引失效\n\n8. 索引创建\n\n   - 频繁查询的字段应创建索引\n   - 与其他表关联查询的字段创建索引\n   - 频繁更新的字段不适合作为索引\n\n9. sql书写题目\n\n   参考: [经典题目](https://blog.csdn.net/jason_wang1989/article/details/115278576)\n\n","slug":"Sql-面试","published":1,"updated":"2022-06-04T10:10:43.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0ze000pwuh84z0w1qjn","content":"<ol>\n<li><p>having</p>\n<p>having常用语分组后的条件过滤常用于<code>group by xx </code>后</p>\n<p>例子:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name operator <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> aggregate_function(column_name) operator <span class=\"keyword\">value</span></span><br></pre></td></tr></table></figure>\n\n<p>注意事项:</p>\n<ul>\n<li>having 子句内容需要存在select列表中</li>\n<li>having限制的是组, where限制的是行</li>\n<li>where, group by, having执行顺序: where过滤行 -&gt; group by对数据分组,并执行聚集函数 -&gt; having过滤符合条件的组</li>\n</ul>\n</li>\n<li><p><code>select a.xx,b.xx from a,b where a.x = b.x</code>与<code>select a.xx,b.xx from a inner join b on a.x = b.x</code> 区别</p>\n</li>\n<li><p>union与union all</p>\n<p>union会去重, union all 直接合并</p>\n</li>\n<li><p>row_number()</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--在test表中根据name分组，age进行排序</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> name,age,<span class=\"built_in\">row_number</span>() <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">age <span class=\"keyword\">desc</span>) <span class=\"keyword\">from</span> test;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--去掉重复的记录</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> name,age,<span class=\"built_in\">row_number</span>() <span class=\"keyword\">over</span>( <span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> name </span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age <span class=\"keyword\">desc</span>) rn <span class=\"keyword\">from</span> test )<span class=\"keyword\">where</span> rn<span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以对结果集进行分组排序并生成一个row_number序列</p>\n</li>\n<li><p>DDL, DML与DCL</p>\n<ul>\n<li>DDL: Data Define Language, 数据定义语句. CREATE, ALTER, DROP等</li>\n<li>DML: Data Manage Language, 数据管理语句. SELECT, UPDATE, INSERT, DELETE</li>\n<li>DCL: Data Control Language, 数据控制语句. GRANT, DENY, REVOKE等个更新用户角色的命令</li>\n</ul>\n</li>\n<li><p>exists 与 in</p>\n<ul>\n<li><code>in</code> 仅执行一次(先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选), <code>exists</code>执行多次(外表行数)</li>\n<li>外层查询小于子查询使用<code>exists</code>; 外层查询大于子查询使用<code>in</code></li>\n<li><code>in</code> 与<code>exists</code>都会使用索引</li>\n<li><code>not in</code> 内外表均全局扫描,无法使用索引, <code>not exists</code>可以走索引</li>\n<li><code>in</code>的遍历实在内存中,速度较快. <code>exists</code>多次查询数据库.</li>\n</ul>\n</li>\n<li><p>索引使用注意事项</p>\n<ul>\n<li>尽量全值匹配</li>\n<li>模糊查询使用最左匹配原则</li>\n<li>全模糊查询使用覆盖索引方式也会走索引</li>\n<li>不在索引列上进行操作</li>\n<li>联合索引需要严格顺序匹配</li>\n<li>尽量使用覆盖索引</li>\n<li>mysql在使用<code>!=</code>与<code>&lt;&gt;</code>时索引失效</li>\n<li>字符串不加单引号导致索引失效</li>\n<li><code>or</code>使得索引失效</li>\n</ul>\n</li>\n<li><p>索引创建</p>\n<ul>\n<li>频繁查询的字段应创建索引</li>\n<li>与其他表关联查询的字段创建索引</li>\n<li>频繁更新的字段不适合作为索引</li>\n</ul>\n</li>\n<li><p>sql书写题目</p>\n<p>参考: <a href=\"https://blog.csdn.net/jason_wang1989/article/details/115278576\">经典题目</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>having</p>\n<p>having常用语分组后的条件过滤常用于<code>group by xx </code>后</p>\n<p>例子:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name operator <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> aggregate_function(column_name) operator <span class=\"keyword\">value</span></span><br></pre></td></tr></table></figure>\n\n<p>注意事项:</p>\n<ul>\n<li>having 子句内容需要存在select列表中</li>\n<li>having限制的是组, where限制的是行</li>\n<li>where, group by, having执行顺序: where过滤行 -&gt; group by对数据分组,并执行聚集函数 -&gt; having过滤符合条件的组</li>\n</ul>\n</li>\n<li><p><code>select a.xx,b.xx from a,b where a.x = b.x</code>与<code>select a.xx,b.xx from a inner join b on a.x = b.x</code> 区别</p>\n</li>\n<li><p>union与union all</p>\n<p>union会去重, union all 直接合并</p>\n</li>\n<li><p>row_number()</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--在test表中根据name分组，age进行排序</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> name,age,<span class=\"built_in\">row_number</span>() <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">age <span class=\"keyword\">desc</span>) <span class=\"keyword\">from</span> test;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--去掉重复的记录</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> name,age,<span class=\"built_in\">row_number</span>() <span class=\"keyword\">over</span>( <span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> name </span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age <span class=\"keyword\">desc</span>) rn <span class=\"keyword\">from</span> test )<span class=\"keyword\">where</span> rn<span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以对结果集进行分组排序并生成一个row_number序列</p>\n</li>\n<li><p>DDL, DML与DCL</p>\n<ul>\n<li>DDL: Data Define Language, 数据定义语句. CREATE, ALTER, DROP等</li>\n<li>DML: Data Manage Language, 数据管理语句. SELECT, UPDATE, INSERT, DELETE</li>\n<li>DCL: Data Control Language, 数据控制语句. GRANT, DENY, REVOKE等个更新用户角色的命令</li>\n</ul>\n</li>\n<li><p>exists 与 in</p>\n<ul>\n<li><code>in</code> 仅执行一次(先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选), <code>exists</code>执行多次(外表行数)</li>\n<li>外层查询小于子查询使用<code>exists</code>; 外层查询大于子查询使用<code>in</code></li>\n<li><code>in</code> 与<code>exists</code>都会使用索引</li>\n<li><code>not in</code> 内外表均全局扫描,无法使用索引, <code>not exists</code>可以走索引</li>\n<li><code>in</code>的遍历实在内存中,速度较快. <code>exists</code>多次查询数据库.</li>\n</ul>\n</li>\n<li><p>索引使用注意事项</p>\n<ul>\n<li>尽量全值匹配</li>\n<li>模糊查询使用最左匹配原则</li>\n<li>全模糊查询使用覆盖索引方式也会走索引</li>\n<li>不在索引列上进行操作</li>\n<li>联合索引需要严格顺序匹配</li>\n<li>尽量使用覆盖索引</li>\n<li>mysql在使用<code>!=</code>与<code>&lt;&gt;</code>时索引失效</li>\n<li>字符串不加单引号导致索引失效</li>\n<li><code>or</code>使得索引失效</li>\n</ul>\n</li>\n<li><p>索引创建</p>\n<ul>\n<li>频繁查询的字段应创建索引</li>\n<li>与其他表关联查询的字段创建索引</li>\n<li>频繁更新的字段不适合作为索引</li>\n</ul>\n</li>\n<li><p>sql书写题目</p>\n<p>参考: <a href=\"https://blog.csdn.net/jason_wang1989/article/details/115278576\">经典题目</a></p>\n</li>\n</ol>\n"},{"title":"Star 法则","date":"2022-06-04T08:33:30.000Z","_content":"\n摘自百度百科:\n\nSTAR法则,即为Situation Task Action Result的缩写，具体含义是:\n\n- Situation: 事情是在什么情况下发生\n\n- Task: 任务\n\n- Action: 针对这样的情况分析，你采用了什么行动方式\n\n- Result: 结果怎样，在这样的情况下你学习到了什么\n\n简而言之，STAR法则是一个清晰、条理的模板。合理熟练运用此法则，可以轻松的对面试官描述事物的逻辑方式，表现出自己分析阐述问题的清晰性、条理性和逻辑性。\n","source":"_posts/Star-法则.md","raw":"---\ntitle: Star 法则\ndate: 2022-06-04 16:33:30\ntags:\n  - 面试\n---\n\n摘自百度百科:\n\nSTAR法则,即为Situation Task Action Result的缩写，具体含义是:\n\n- Situation: 事情是在什么情况下发生\n\n- Task: 任务\n\n- Action: 针对这样的情况分析，你采用了什么行动方式\n\n- Result: 结果怎样，在这样的情况下你学习到了什么\n\n简而言之，STAR法则是一个清晰、条理的模板。合理熟练运用此法则，可以轻松的对面试官描述事物的逻辑方式，表现出自己分析阐述问题的清晰性、条理性和逻辑性。\n","slug":"Star-法则","published":1,"updated":"2022-06-04T08:41:35.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0ze000qwuh80w751hiw","content":"<p>摘自百度百科:</p>\n<p>STAR法则,即为Situation Task Action Result的缩写，具体含义是:</p>\n<ul>\n<li><p>Situation: 事情是在什么情况下发生</p>\n</li>\n<li><p>Task: 任务</p>\n</li>\n<li><p>Action: 针对这样的情况分析，你采用了什么行动方式</p>\n</li>\n<li><p>Result: 结果怎样，在这样的情况下你学习到了什么</p>\n</li>\n</ul>\n<p>简而言之，STAR法则是一个清晰、条理的模板。合理熟练运用此法则，可以轻松的对面试官描述事物的逻辑方式，表现出自己分析阐述问题的清晰性、条理性和逻辑性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>摘自百度百科:</p>\n<p>STAR法则,即为Situation Task Action Result的缩写，具体含义是:</p>\n<ul>\n<li><p>Situation: 事情是在什么情况下发生</p>\n</li>\n<li><p>Task: 任务</p>\n</li>\n<li><p>Action: 针对这样的情况分析，你采用了什么行动方式</p>\n</li>\n<li><p>Result: 结果怎样，在这样的情况下你学习到了什么</p>\n</li>\n</ul>\n<p>简而言之，STAR法则是一个清晰、条理的模板。合理熟练运用此法则，可以轻松的对面试官描述事物的逻辑方式，表现出自己分析阐述问题的清晰性、条理性和逻辑性。</p>\n"},{"title":"Synchronized","date":"2022-05-31T01:12:49.000Z","_content":"\n# 简介\n\nSynchronized是Java的一个关键字，通过它可以实现线程安全。\n\n# 使用方式\n\n1. 修饰实例方法\n\n   将实例作为锁对象\n\n2. 修饰静态方法与静态代码块\n\n   将Class对象作为锁对象\n\n3. 自定义锁对象\n\n# 原理\n\n编译过程中会生成`monitorenter`与`monitorexit`字节码指令。锁信息会记录在锁对象的对象头中的Mark Word中\n\n# 锁升级过程\n\n参考：[锁升级过程](https://blog.csdn.net/qq_41860497/article/details/125010798#:~:text=偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能%E3%80%82%20当一个线程访问同步代码块并获取锁时，会在%20Mark%20Word,里存储锁偏向的%20线程%20ID%20%E3%80%82)\n\n最初Synchronized是采用重量级锁，重量级锁存在内核态与用户态的切换，存在性能损耗。于是后续进行了相关优化：锁升级\n\n无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁\n\n偏向锁：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。线程尝试竞争时，偏向锁等待全局安全点判断是否有竞争恢复到轻量级锁或无锁状态。**偏向锁适用于同一个线程多次获取锁的情况**。 **缺点：竞争激烈情况下，存在锁撤销的开销，此时可以关闭偏向锁**\n\n轻量级锁：**适用于多个线程交替获取锁，很少发生竞争**， **缺点：消耗CPU**\n\n重量级锁：**系统中存在大量的线程同时尝试获取锁，高并发场景**，**缺点：线程阻塞唤醒，频繁切换上下文性能损耗**\n\n详细过程：\n\n1. 尝试获取锁的线程，检查锁对象头中Mark Word记录的线程ID。如果与当前线程ID相同，表示已获取锁直接执行\n2. 如果发现与当前线程不一致，偏向锁撤销升级为轻量级锁。拷贝Mark Word到栈帧，尝试CAS自旋修改Mark Word指向栈帧，修改成功则获得锁，否则在多次（15次）自旋失败后膨胀为重量级锁\n3. 此时存在大量竞争，未保证线程安全并且降低自旋导致的cpu busy。重量级锁接管，对于未获取锁的线程进行阻塞。等待锁释放操作系统调度。\n\n","source":"_posts/Synchronized.md","raw":"---\ntitle: Synchronized\ndate: 2022-05-31 09:12:49\ntags:\n  - 锁\n  - 并发\n  - 线程安全\n  - java\n  - 关键字\n---\n\n# 简介\n\nSynchronized是Java的一个关键字，通过它可以实现线程安全。\n\n# 使用方式\n\n1. 修饰实例方法\n\n   将实例作为锁对象\n\n2. 修饰静态方法与静态代码块\n\n   将Class对象作为锁对象\n\n3. 自定义锁对象\n\n# 原理\n\n编译过程中会生成`monitorenter`与`monitorexit`字节码指令。锁信息会记录在锁对象的对象头中的Mark Word中\n\n# 锁升级过程\n\n参考：[锁升级过程](https://blog.csdn.net/qq_41860497/article/details/125010798#:~:text=偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能%E3%80%82%20当一个线程访问同步代码块并获取锁时，会在%20Mark%20Word,里存储锁偏向的%20线程%20ID%20%E3%80%82)\n\n最初Synchronized是采用重量级锁，重量级锁存在内核态与用户态的切换，存在性能损耗。于是后续进行了相关优化：锁升级\n\n无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁\n\n偏向锁：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。线程尝试竞争时，偏向锁等待全局安全点判断是否有竞争恢复到轻量级锁或无锁状态。**偏向锁适用于同一个线程多次获取锁的情况**。 **缺点：竞争激烈情况下，存在锁撤销的开销，此时可以关闭偏向锁**\n\n轻量级锁：**适用于多个线程交替获取锁，很少发生竞争**， **缺点：消耗CPU**\n\n重量级锁：**系统中存在大量的线程同时尝试获取锁，高并发场景**，**缺点：线程阻塞唤醒，频繁切换上下文性能损耗**\n\n详细过程：\n\n1. 尝试获取锁的线程，检查锁对象头中Mark Word记录的线程ID。如果与当前线程ID相同，表示已获取锁直接执行\n2. 如果发现与当前线程不一致，偏向锁撤销升级为轻量级锁。拷贝Mark Word到栈帧，尝试CAS自旋修改Mark Word指向栈帧，修改成功则获得锁，否则在多次（15次）自旋失败后膨胀为重量级锁\n3. 此时存在大量竞争，未保证线程安全并且降低自旋导致的cpu busy。重量级锁接管，对于未获取锁的线程进行阻塞。等待锁释放操作系统调度。\n\n","slug":"Synchronized","published":1,"updated":"2022-05-31T01:58:59.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0ze000rwuh804xp1nq5","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Synchronized是Java的一个关键字，通过它可以实现线程安全。</p>\n<h1 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h1><ol>\n<li><p>修饰实例方法</p>\n<p>将实例作为锁对象</p>\n</li>\n<li><p>修饰静态方法与静态代码块</p>\n<p>将Class对象作为锁对象</p>\n</li>\n<li><p>自定义锁对象</p>\n</li>\n</ol>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>编译过程中会生成<code>monitorenter</code>与<code>monitorexit</code>字节码指令。锁信息会记录在锁对象的对象头中的Mark Word中</p>\n<h1 id=\"锁升级过程\"><a href=\"#锁升级过程\" class=\"headerlink\" title=\"锁升级过程\"></a>锁升级过程</h1><p>参考：<a href=\"https://blog.csdn.net/qq_41860497/article/details/125010798#:~:text=%E5%81%8F%E5%90%91%E9%94%81%E6%98%AF%E6%8C%87%E5%BD%93%E4%B8%80%E6%AE%B5%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E4%B8%80%E7%9B%B4%E8%A2%AB%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%89%80%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E5%8D%B3%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%AB%9E%E4%BA%89%E6%97%B6%EF%BC%8C%E9%82%A3%E4%B9%88%E8%AF%A5%E7%BA%BF%E7%A8%8B%E5%9C%A8%E5%90%8E%E7%BB%AD%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BE%BF%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%BE%97%E9%94%81%EF%BC%8C%E4%BB%8E%E8%80%8C%E9%99%8D%E4%BD%8E%E8%8E%B7%E5%8F%96%E9%94%81%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%B6%88%E8%80%97%EF%BC%8C%E5%8D%B3%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E3%80%82%20%E5%BD%93%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%B9%B6%E8%8E%B7%E5%8F%96%E9%94%81%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%9C%A8%20Mark%20Word,%E9%87%8C%E5%AD%98%E5%82%A8%E9%94%81%E5%81%8F%E5%90%91%E7%9A%84%20%E7%BA%BF%E7%A8%8B%20ID%20%E3%80%82\">锁升级过程</a></p>\n<p>最初Synchronized是采用重量级锁，重量级锁存在内核态与用户态的切换，存在性能损耗。于是后续进行了相关优化：锁升级</p>\n<p>无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p>\n<p>偏向锁：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。线程尝试竞争时，偏向锁等待全局安全点判断是否有竞争恢复到轻量级锁或无锁状态。<strong>偏向锁适用于同一个线程多次获取锁的情况</strong>。 <strong>缺点：竞争激烈情况下，存在锁撤销的开销，此时可以关闭偏向锁</strong></p>\n<p>轻量级锁：<strong>适用于多个线程交替获取锁，很少发生竞争</strong>， <strong>缺点：消耗CPU</strong></p>\n<p>重量级锁：<strong>系统中存在大量的线程同时尝试获取锁，高并发场景</strong>，<strong>缺点：线程阻塞唤醒，频繁切换上下文性能损耗</strong></p>\n<p>详细过程：</p>\n<ol>\n<li>尝试获取锁的线程，检查锁对象头中Mark Word记录的线程ID。如果与当前线程ID相同，表示已获取锁直接执行</li>\n<li>如果发现与当前线程不一致，偏向锁撤销升级为轻量级锁。拷贝Mark Word到栈帧，尝试CAS自旋修改Mark Word指向栈帧，修改成功则获得锁，否则在多次（15次）自旋失败后膨胀为重量级锁</li>\n<li>此时存在大量竞争，未保证线程安全并且降低自旋导致的cpu busy。重量级锁接管，对于未获取锁的线程进行阻塞。等待锁释放操作系统调度。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Synchronized是Java的一个关键字，通过它可以实现线程安全。</p>\n<h1 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h1><ol>\n<li><p>修饰实例方法</p>\n<p>将实例作为锁对象</p>\n</li>\n<li><p>修饰静态方法与静态代码块</p>\n<p>将Class对象作为锁对象</p>\n</li>\n<li><p>自定义锁对象</p>\n</li>\n</ol>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>编译过程中会生成<code>monitorenter</code>与<code>monitorexit</code>字节码指令。锁信息会记录在锁对象的对象头中的Mark Word中</p>\n<h1 id=\"锁升级过程\"><a href=\"#锁升级过程\" class=\"headerlink\" title=\"锁升级过程\"></a>锁升级过程</h1><p>参考：<a href=\"https://blog.csdn.net/qq_41860497/article/details/125010798#:~:text=%E5%81%8F%E5%90%91%E9%94%81%E6%98%AF%E6%8C%87%E5%BD%93%E4%B8%80%E6%AE%B5%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E4%B8%80%E7%9B%B4%E8%A2%AB%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%89%80%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E5%8D%B3%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%AB%9E%E4%BA%89%E6%97%B6%EF%BC%8C%E9%82%A3%E4%B9%88%E8%AF%A5%E7%BA%BF%E7%A8%8B%E5%9C%A8%E5%90%8E%E7%BB%AD%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BE%BF%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%BE%97%E9%94%81%EF%BC%8C%E4%BB%8E%E8%80%8C%E9%99%8D%E4%BD%8E%E8%8E%B7%E5%8F%96%E9%94%81%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%B6%88%E8%80%97%EF%BC%8C%E5%8D%B3%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E3%80%82%20%E5%BD%93%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%B9%B6%E8%8E%B7%E5%8F%96%E9%94%81%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%9C%A8%20Mark%20Word,%E9%87%8C%E5%AD%98%E5%82%A8%E9%94%81%E5%81%8F%E5%90%91%E7%9A%84%20%E7%BA%BF%E7%A8%8B%20ID%20%E3%80%82\">锁升级过程</a></p>\n<p>最初Synchronized是采用重量级锁，重量级锁存在内核态与用户态的切换，存在性能损耗。于是后续进行了相关优化：锁升级</p>\n<p>无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p>\n<p>偏向锁：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。线程尝试竞争时，偏向锁等待全局安全点判断是否有竞争恢复到轻量级锁或无锁状态。<strong>偏向锁适用于同一个线程多次获取锁的情况</strong>。 <strong>缺点：竞争激烈情况下，存在锁撤销的开销，此时可以关闭偏向锁</strong></p>\n<p>轻量级锁：<strong>适用于多个线程交替获取锁，很少发生竞争</strong>， <strong>缺点：消耗CPU</strong></p>\n<p>重量级锁：<strong>系统中存在大量的线程同时尝试获取锁，高并发场景</strong>，<strong>缺点：线程阻塞唤醒，频繁切换上下文性能损耗</strong></p>\n<p>详细过程：</p>\n<ol>\n<li>尝试获取锁的线程，检查锁对象头中Mark Word记录的线程ID。如果与当前线程ID相同，表示已获取锁直接执行</li>\n<li>如果发现与当前线程不一致，偏向锁撤销升级为轻量级锁。拷贝Mark Word到栈帧，尝试CAS自旋修改Mark Word指向栈帧，修改成功则获得锁，否则在多次（15次）自旋失败后膨胀为重量级锁</li>\n<li>此时存在大量竞争，未保证线程安全并且降低自旋导致的cpu busy。重量级锁接管，对于未获取锁的线程进行阻塞。等待锁释放操作系统调度。</li>\n</ol>\n"},{"title":"TCP半连接队列和全连接队列溢出","date":"2022-06-04T11:38:46.000Z","_content":"\n转自: [TCP连接队列](https://www.cnblogs.com/sidesky/p/6844228.html)\n\n# 问题描述\n\n```\nJAVA的client和server，使用socket通信。server使用NIO。\n1.间歇性的出现client向server建立连接三次握手已经完成，但server的selector没有响应到这连接。\n2.出问题的时间点，会同时有很多连接出现这个问题。\n3.selector没有销毁重建，一直用的都是一个。\n4.程序刚启动的时候必会出现一些，之后会间歇性出现。\n```\n\n# 分析问题\n\n- 第一步：client 发送 syn 到server 发起握手；\n- 第二步：server 收到 syn后回复syn+ack给client；\n- 第三步：client 收到syn+ack后，回复server一个ack表示收到了server的syn+ack（此时client的56911端口的连接已经是established）\n\n从问题的描述来看，有点像TCP建连接的时候全连接队列（accept队列）满了，尤其是症状2、4. 为了证明是这个原因，马上通过 ss -s 去看队列的溢出统计数据：\n\n```\n667399 times the listen queue of a socket overflowed\n```\n\n反复看了几次之后发现这个overflowed 一直在增加，那么可以明确的是server上全连接队列一定溢出了\n\n接着查看溢出后，OS怎么处理：\n\n```\n# cat /proc/sys/net/ipv4/tcp_abort_on_overflow\n0\n```\n\ntcp_abort_on_overflow 为0表示如果三次握手第三步的时候全连接队列满了那么server扔掉client 发过来的ack（在server端认为连接还没建立起来）\n\n为了证明客户端应用代码的异常跟全连接队列满有关系，我先把tcp_abort_on_overflow修改成 1，1表示第三步的时候如果全连接队列满了，server发送一个reset包给client，表示废掉这个握手过程和这个连接（本来在server端这个连接就还没建立起来）。\n\n接着测试然后在客户端异常中可以看到很多connection reset by peer的错误，到此证明客户端错误是这个原因导致的。\n\n于是开发同学翻看java 源代码发现socket 默认的backlog（这个值控制全连接队列的大小，后面再详述）是50，于是改大重新跑，经过12个小时以上的压测，这个错误一次都没出现过，同时 overflowed 也不再增加了。\n\n到此问题解决，简单来说TCP三次握手后有个accept队列，进到这个队列才能从Listen变成accept，默认backlog 值是50，很容易就满了。满了之后握手第三步的时候server就忽略了client发过来的ack包（隔一段时间server重发握手第二步的syn+ack包给client），如果这个连接一直排不上队就异常了。\n\n\n\n# TCP握手创建流程\n\n![3d05f574867b70d1134e685e5f5ac137](3d05f574867b70d1134e685e5f5ac137.jpg)\n\n在 TCP 三次握手的过程中，Linux 内核会维护两个队列，分别是：\n\n- 半连接队列 (SYN Queue)\n- 全连接队列 (Accept Queue)\n\n正常的 TCP 三次握手过程：\n\n1. Client 端向 Server 端发送 SYN 发起握手，Client 端进入 SYN_SENT 状态\n2. Server 端收到 Client 端的 SYN 请求后，Server 端进入 SYN_RECV 状态，此时内核会将连接存储到半连接队列(SYN Queue)，并向 Client 端回复 SYN+ACK\n3. Client 端收到 Server 端的 SYN+ACK 后，Client 端回复 ACK 并进入 ESTABLISHED 状态\n4. Server 端收到 Client 端的 ACK 后，内核将连接从半连接队列(SYN Queue)中取出，添加到全连接队列(Accept Queue)，Server 端进入 ESTABLISHED 状态\n5. Server 端应用进程调用 accept 函数时，将连接从全连接队列(Accept Queue)中取出\n\n半连接队列和全连接队列都有长度大小限制，超过限制时内核会将连接 Drop 丢弃或者返回 RST 包。\n\n\n\n# 相关指标查看\n\n- ss 命令\n\n  ```\n  # -n 不解析服务名称 \n  # -t 只显示 tcp sockets \n  # -l 显示正在监听(LISTEN)的 sockets \n   \n  $ ss -lnt \n  State      Recv-Q Send-Q    Local Address:Port         Peer Address:Port \n  LISTEN     0      128       [::]:2380                  [::]:* \n  LISTEN     0      128       [::]:80                    [::]:* \n  LISTEN     0      128       [::]:8080                  [::]:* \n  LISTEN     0      128       [::]:8090                  [::]:* \n   \n  $ ss -nt \n  State      Recv-Q Send-Q    Local Address:Port         Peer Address:Port \n  ESTAB      0      0         [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:47452 \n  ESTAB      0      536       [::ffff:33.9.95.134]:80                  [::ffff:33.43.108.144]:37656 \n  ESTAB      0      0         [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:38130 \n  ESTAB      0      536       [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:38280 \n  ESTAB      0      0         [::ffff:33.9.95.134]:80                   [:: \n  ```\n\n  LISTEN状态Socket\n\n  - Recv-Q：当前全连接队列的大小，即已完成三次握手等待应用程序 accept() 的 TCP 链接\n  - Send-Q：全连接队列的最大长度，即全连接队列的大小\n\n  非LISTEN状态Socket\n\n  - Recv-Q：已收到但未被应用程序读取的字节数\n  - Send-Q：已发送但未收到确认的字节数\n\n- netstat命令\n\n  通过 netstat -s 命令可以查看 TCP 半连接队列、全连接队列的溢出情况\n\n  ```\n  $ netstat -s | grep -i \"listen\" \n  189088 times the listen queue of a socket overflowed \n  30140232 SYNs to LISTEN sockets dropped \n  ```\n\n  上面输出的数值是累计值，分别表示有多少 TCP socket 链接因为全连接队列、半连接队列满了而被丢弃\n\n  - 189088 times the listen queue of a socket overflowed 代表有 189088 次全连接队列溢出\n  - 30140232 SYNs to LISTEN sockets dropped 代表有 30140232 次半连接队列溢出\n\n  在排查线上问题时，如果一段时间内相关数值一直在上升，则表明半连接队列、全连接队列有溢出情况\n\n\n\n其他内容待补充, 参考文首链接\n","source":"_posts/TCP半连接队列和全连接队列溢出.md","raw":"---\ntitle: TCP半连接队列和全连接队列溢出\ndate: 2022-06-04 19:38:46\ntags:\n  - TCP\n---\n\n转自: [TCP连接队列](https://www.cnblogs.com/sidesky/p/6844228.html)\n\n# 问题描述\n\n```\nJAVA的client和server，使用socket通信。server使用NIO。\n1.间歇性的出现client向server建立连接三次握手已经完成，但server的selector没有响应到这连接。\n2.出问题的时间点，会同时有很多连接出现这个问题。\n3.selector没有销毁重建，一直用的都是一个。\n4.程序刚启动的时候必会出现一些，之后会间歇性出现。\n```\n\n# 分析问题\n\n- 第一步：client 发送 syn 到server 发起握手；\n- 第二步：server 收到 syn后回复syn+ack给client；\n- 第三步：client 收到syn+ack后，回复server一个ack表示收到了server的syn+ack（此时client的56911端口的连接已经是established）\n\n从问题的描述来看，有点像TCP建连接的时候全连接队列（accept队列）满了，尤其是症状2、4. 为了证明是这个原因，马上通过 ss -s 去看队列的溢出统计数据：\n\n```\n667399 times the listen queue of a socket overflowed\n```\n\n反复看了几次之后发现这个overflowed 一直在增加，那么可以明确的是server上全连接队列一定溢出了\n\n接着查看溢出后，OS怎么处理：\n\n```\n# cat /proc/sys/net/ipv4/tcp_abort_on_overflow\n0\n```\n\ntcp_abort_on_overflow 为0表示如果三次握手第三步的时候全连接队列满了那么server扔掉client 发过来的ack（在server端认为连接还没建立起来）\n\n为了证明客户端应用代码的异常跟全连接队列满有关系，我先把tcp_abort_on_overflow修改成 1，1表示第三步的时候如果全连接队列满了，server发送一个reset包给client，表示废掉这个握手过程和这个连接（本来在server端这个连接就还没建立起来）。\n\n接着测试然后在客户端异常中可以看到很多connection reset by peer的错误，到此证明客户端错误是这个原因导致的。\n\n于是开发同学翻看java 源代码发现socket 默认的backlog（这个值控制全连接队列的大小，后面再详述）是50，于是改大重新跑，经过12个小时以上的压测，这个错误一次都没出现过，同时 overflowed 也不再增加了。\n\n到此问题解决，简单来说TCP三次握手后有个accept队列，进到这个队列才能从Listen变成accept，默认backlog 值是50，很容易就满了。满了之后握手第三步的时候server就忽略了client发过来的ack包（隔一段时间server重发握手第二步的syn+ack包给client），如果这个连接一直排不上队就异常了。\n\n\n\n# TCP握手创建流程\n\n![3d05f574867b70d1134e685e5f5ac137](3d05f574867b70d1134e685e5f5ac137.jpg)\n\n在 TCP 三次握手的过程中，Linux 内核会维护两个队列，分别是：\n\n- 半连接队列 (SYN Queue)\n- 全连接队列 (Accept Queue)\n\n正常的 TCP 三次握手过程：\n\n1. Client 端向 Server 端发送 SYN 发起握手，Client 端进入 SYN_SENT 状态\n2. Server 端收到 Client 端的 SYN 请求后，Server 端进入 SYN_RECV 状态，此时内核会将连接存储到半连接队列(SYN Queue)，并向 Client 端回复 SYN+ACK\n3. Client 端收到 Server 端的 SYN+ACK 后，Client 端回复 ACK 并进入 ESTABLISHED 状态\n4. Server 端收到 Client 端的 ACK 后，内核将连接从半连接队列(SYN Queue)中取出，添加到全连接队列(Accept Queue)，Server 端进入 ESTABLISHED 状态\n5. Server 端应用进程调用 accept 函数时，将连接从全连接队列(Accept Queue)中取出\n\n半连接队列和全连接队列都有长度大小限制，超过限制时内核会将连接 Drop 丢弃或者返回 RST 包。\n\n\n\n# 相关指标查看\n\n- ss 命令\n\n  ```\n  # -n 不解析服务名称 \n  # -t 只显示 tcp sockets \n  # -l 显示正在监听(LISTEN)的 sockets \n   \n  $ ss -lnt \n  State      Recv-Q Send-Q    Local Address:Port         Peer Address:Port \n  LISTEN     0      128       [::]:2380                  [::]:* \n  LISTEN     0      128       [::]:80                    [::]:* \n  LISTEN     0      128       [::]:8080                  [::]:* \n  LISTEN     0      128       [::]:8090                  [::]:* \n   \n  $ ss -nt \n  State      Recv-Q Send-Q    Local Address:Port         Peer Address:Port \n  ESTAB      0      0         [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:47452 \n  ESTAB      0      536       [::ffff:33.9.95.134]:80                  [::ffff:33.43.108.144]:37656 \n  ESTAB      0      0         [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:38130 \n  ESTAB      0      536       [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:38280 \n  ESTAB      0      0         [::ffff:33.9.95.134]:80                   [:: \n  ```\n\n  LISTEN状态Socket\n\n  - Recv-Q：当前全连接队列的大小，即已完成三次握手等待应用程序 accept() 的 TCP 链接\n  - Send-Q：全连接队列的最大长度，即全连接队列的大小\n\n  非LISTEN状态Socket\n\n  - Recv-Q：已收到但未被应用程序读取的字节数\n  - Send-Q：已发送但未收到确认的字节数\n\n- netstat命令\n\n  通过 netstat -s 命令可以查看 TCP 半连接队列、全连接队列的溢出情况\n\n  ```\n  $ netstat -s | grep -i \"listen\" \n  189088 times the listen queue of a socket overflowed \n  30140232 SYNs to LISTEN sockets dropped \n  ```\n\n  上面输出的数值是累计值，分别表示有多少 TCP socket 链接因为全连接队列、半连接队列满了而被丢弃\n\n  - 189088 times the listen queue of a socket overflowed 代表有 189088 次全连接队列溢出\n  - 30140232 SYNs to LISTEN sockets dropped 代表有 30140232 次半连接队列溢出\n\n  在排查线上问题时，如果一段时间内相关数值一直在上升，则表明半连接队列、全连接队列有溢出情况\n\n\n\n其他内容待补充, 参考文首链接\n","slug":"TCP半连接队列和全连接队列溢出","published":1,"updated":"2022-06-04T11:51:01.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zf000uwuh8g35ockkt","content":"<p>转自: <a href=\"https://www.cnblogs.com/sidesky/p/6844228.html\">TCP连接队列</a></p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA的client和server，使用socket通信。server使用NIO。</span><br><span class=\"line\">1.间歇性的出现client向server建立连接三次握手已经完成，但server的selector没有响应到这连接。</span><br><span class=\"line\">2.出问题的时间点，会同时有很多连接出现这个问题。</span><br><span class=\"line\">3.selector没有销毁重建，一直用的都是一个。</span><br><span class=\"line\">4.程序刚启动的时候必会出现一些，之后会间歇性出现。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h1><ul>\n<li>第一步：client 发送 syn 到server 发起握手；</li>\n<li>第二步：server 收到 syn后回复syn+ack给client；</li>\n<li>第三步：client 收到syn+ack后，回复server一个ack表示收到了server的syn+ack（此时client的56911端口的连接已经是established）</li>\n</ul>\n<p>从问题的描述来看，有点像TCP建连接的时候全连接队列（accept队列）满了，尤其是症状2、4. 为了证明是这个原因，马上通过 ss -s 去看队列的溢出统计数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">667399 times the listen queue of a socket overflowed</span><br></pre></td></tr></table></figure>\n\n<p>反复看了几次之后发现这个overflowed 一直在增加，那么可以明确的是server上全连接队列一定溢出了</p>\n<p>接着查看溢出后，OS怎么处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cat /proc/sys/net/ipv4/tcp_abort_on_overflow</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>tcp_abort_on_overflow 为0表示如果三次握手第三步的时候全连接队列满了那么server扔掉client 发过来的ack（在server端认为连接还没建立起来）</p>\n<p>为了证明客户端应用代码的异常跟全连接队列满有关系，我先把tcp_abort_on_overflow修改成 1，1表示第三步的时候如果全连接队列满了，server发送一个reset包给client，表示废掉这个握手过程和这个连接（本来在server端这个连接就还没建立起来）。</p>\n<p>接着测试然后在客户端异常中可以看到很多connection reset by peer的错误，到此证明客户端错误是这个原因导致的。</p>\n<p>于是开发同学翻看java 源代码发现socket 默认的backlog（这个值控制全连接队列的大小，后面再详述）是50，于是改大重新跑，经过12个小时以上的压测，这个错误一次都没出现过，同时 overflowed 也不再增加了。</p>\n<p>到此问题解决，简单来说TCP三次握手后有个accept队列，进到这个队列才能从Listen变成accept，默认backlog 值是50，很容易就满了。满了之后握手第三步的时候server就忽略了client发过来的ack包（隔一段时间server重发握手第二步的syn+ack包给client），如果这个连接一直排不上队就异常了。</p>\n<h1 id=\"TCP握手创建流程\"><a href=\"#TCP握手创建流程\" class=\"headerlink\" title=\"TCP握手创建流程\"></a>TCP握手创建流程</h1><p><img src=\"/2022/06/04/TCP%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E6%BA%A2%E5%87%BA/3d05f574867b70d1134e685e5f5ac137.jpg\" alt=\"3d05f574867b70d1134e685e5f5ac137\"></p>\n<p>在 TCP 三次握手的过程中，Linux 内核会维护两个队列，分别是：</p>\n<ul>\n<li>半连接队列 (SYN Queue)</li>\n<li>全连接队列 (Accept Queue)</li>\n</ul>\n<p>正常的 TCP 三次握手过程：</p>\n<ol>\n<li>Client 端向 Server 端发送 SYN 发起握手，Client 端进入 SYN_SENT 状态</li>\n<li>Server 端收到 Client 端的 SYN 请求后，Server 端进入 SYN_RECV 状态，此时内核会将连接存储到半连接队列(SYN Queue)，并向 Client 端回复 SYN+ACK</li>\n<li>Client 端收到 Server 端的 SYN+ACK 后，Client 端回复 ACK 并进入 ESTABLISHED 状态</li>\n<li>Server 端收到 Client 端的 ACK 后，内核将连接从半连接队列(SYN Queue)中取出，添加到全连接队列(Accept Queue)，Server 端进入 ESTABLISHED 状态</li>\n<li>Server 端应用进程调用 accept 函数时，将连接从全连接队列(Accept Queue)中取出</li>\n</ol>\n<p>半连接队列和全连接队列都有长度大小限制，超过限制时内核会将连接 Drop 丢弃或者返回 RST 包。</p>\n<h1 id=\"相关指标查看\"><a href=\"#相关指标查看\" class=\"headerlink\" title=\"相关指标查看\"></a>相关指标查看</h1><ul>\n<li><p>ss 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -n 不解析服务名称 </span><br><span class=\"line\"># -t 只显示 tcp sockets </span><br><span class=\"line\"># -l 显示正在监听(LISTEN)的 sockets </span><br><span class=\"line\"> </span><br><span class=\"line\">$ ss -lnt </span><br><span class=\"line\">State      Recv-Q Send-Q    Local Address:Port         Peer Address:Port </span><br><span class=\"line\">LISTEN     0      128       [::]:2380                  [::]:* </span><br><span class=\"line\">LISTEN     0      128       [::]:80                    [::]:* </span><br><span class=\"line\">LISTEN     0      128       [::]:8080                  [::]:* </span><br><span class=\"line\">LISTEN     0      128       [::]:8090                  [::]:* </span><br><span class=\"line\"> </span><br><span class=\"line\">$ ss -nt </span><br><span class=\"line\">State      Recv-Q Send-Q    Local Address:Port         Peer Address:Port </span><br><span class=\"line\">ESTAB      0      0         [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:47452 </span><br><span class=\"line\">ESTAB      0      536       [::ffff:33.9.95.134]:80                  [::ffff:33.43.108.144]:37656 </span><br><span class=\"line\">ESTAB      0      0         [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:38130 </span><br><span class=\"line\">ESTAB      0      536       [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:38280 </span><br><span class=\"line\">ESTAB      0      0         [::ffff:33.9.95.134]:80                   [:: </span><br></pre></td></tr></table></figure>\n\n<p>LISTEN状态Socket</p>\n<ul>\n<li>Recv-Q：当前全连接队列的大小，即已完成三次握手等待应用程序 accept() 的 TCP 链接</li>\n<li>Send-Q：全连接队列的最大长度，即全连接队列的大小</li>\n</ul>\n<p>非LISTEN状态Socket</p>\n<ul>\n<li>Recv-Q：已收到但未被应用程序读取的字节数</li>\n<li>Send-Q：已发送但未收到确认的字节数</li>\n</ul>\n</li>\n<li><p>netstat命令</p>\n<p>通过 netstat -s 命令可以查看 TCP 半连接队列、全连接队列的溢出情况</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -s | grep -i &quot;listen&quot; </span><br><span class=\"line\">189088 times the listen queue of a socket overflowed </span><br><span class=\"line\">30140232 SYNs to LISTEN sockets dropped </span><br></pre></td></tr></table></figure>\n\n<p>上面输出的数值是累计值，分别表示有多少 TCP socket 链接因为全连接队列、半连接队列满了而被丢弃</p>\n<ul>\n<li>189088 times the listen queue of a socket overflowed 代表有 189088 次全连接队列溢出</li>\n<li>30140232 SYNs to LISTEN sockets dropped 代表有 30140232 次半连接队列溢出</li>\n</ul>\n<p>在排查线上问题时，如果一段时间内相关数值一直在上升，则表明半连接队列、全连接队列有溢出情况</p>\n</li>\n</ul>\n<p>其他内容待补充, 参考文首链接</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转自: <a href=\"https://www.cnblogs.com/sidesky/p/6844228.html\">TCP连接队列</a></p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA的client和server，使用socket通信。server使用NIO。</span><br><span class=\"line\">1.间歇性的出现client向server建立连接三次握手已经完成，但server的selector没有响应到这连接。</span><br><span class=\"line\">2.出问题的时间点，会同时有很多连接出现这个问题。</span><br><span class=\"line\">3.selector没有销毁重建，一直用的都是一个。</span><br><span class=\"line\">4.程序刚启动的时候必会出现一些，之后会间歇性出现。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h1><ul>\n<li>第一步：client 发送 syn 到server 发起握手；</li>\n<li>第二步：server 收到 syn后回复syn+ack给client；</li>\n<li>第三步：client 收到syn+ack后，回复server一个ack表示收到了server的syn+ack（此时client的56911端口的连接已经是established）</li>\n</ul>\n<p>从问题的描述来看，有点像TCP建连接的时候全连接队列（accept队列）满了，尤其是症状2、4. 为了证明是这个原因，马上通过 ss -s 去看队列的溢出统计数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">667399 times the listen queue of a socket overflowed</span><br></pre></td></tr></table></figure>\n\n<p>反复看了几次之后发现这个overflowed 一直在增加，那么可以明确的是server上全连接队列一定溢出了</p>\n<p>接着查看溢出后，OS怎么处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cat /proc/sys/net/ipv4/tcp_abort_on_overflow</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>tcp_abort_on_overflow 为0表示如果三次握手第三步的时候全连接队列满了那么server扔掉client 发过来的ack（在server端认为连接还没建立起来）</p>\n<p>为了证明客户端应用代码的异常跟全连接队列满有关系，我先把tcp_abort_on_overflow修改成 1，1表示第三步的时候如果全连接队列满了，server发送一个reset包给client，表示废掉这个握手过程和这个连接（本来在server端这个连接就还没建立起来）。</p>\n<p>接着测试然后在客户端异常中可以看到很多connection reset by peer的错误，到此证明客户端错误是这个原因导致的。</p>\n<p>于是开发同学翻看java 源代码发现socket 默认的backlog（这个值控制全连接队列的大小，后面再详述）是50，于是改大重新跑，经过12个小时以上的压测，这个错误一次都没出现过，同时 overflowed 也不再增加了。</p>\n<p>到此问题解决，简单来说TCP三次握手后有个accept队列，进到这个队列才能从Listen变成accept，默认backlog 值是50，很容易就满了。满了之后握手第三步的时候server就忽略了client发过来的ack包（隔一段时间server重发握手第二步的syn+ack包给client），如果这个连接一直排不上队就异常了。</p>\n<h1 id=\"TCP握手创建流程\"><a href=\"#TCP握手创建流程\" class=\"headerlink\" title=\"TCP握手创建流程\"></a>TCP握手创建流程</h1><p><img src=\"/2022/06/04/TCP%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E6%BA%A2%E5%87%BA/3d05f574867b70d1134e685e5f5ac137.jpg\" alt=\"3d05f574867b70d1134e685e5f5ac137\"></p>\n<p>在 TCP 三次握手的过程中，Linux 内核会维护两个队列，分别是：</p>\n<ul>\n<li>半连接队列 (SYN Queue)</li>\n<li>全连接队列 (Accept Queue)</li>\n</ul>\n<p>正常的 TCP 三次握手过程：</p>\n<ol>\n<li>Client 端向 Server 端发送 SYN 发起握手，Client 端进入 SYN_SENT 状态</li>\n<li>Server 端收到 Client 端的 SYN 请求后，Server 端进入 SYN_RECV 状态，此时内核会将连接存储到半连接队列(SYN Queue)，并向 Client 端回复 SYN+ACK</li>\n<li>Client 端收到 Server 端的 SYN+ACK 后，Client 端回复 ACK 并进入 ESTABLISHED 状态</li>\n<li>Server 端收到 Client 端的 ACK 后，内核将连接从半连接队列(SYN Queue)中取出，添加到全连接队列(Accept Queue)，Server 端进入 ESTABLISHED 状态</li>\n<li>Server 端应用进程调用 accept 函数时，将连接从全连接队列(Accept Queue)中取出</li>\n</ol>\n<p>半连接队列和全连接队列都有长度大小限制，超过限制时内核会将连接 Drop 丢弃或者返回 RST 包。</p>\n<h1 id=\"相关指标查看\"><a href=\"#相关指标查看\" class=\"headerlink\" title=\"相关指标查看\"></a>相关指标查看</h1><ul>\n<li><p>ss 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -n 不解析服务名称 </span><br><span class=\"line\"># -t 只显示 tcp sockets </span><br><span class=\"line\"># -l 显示正在监听(LISTEN)的 sockets </span><br><span class=\"line\"> </span><br><span class=\"line\">$ ss -lnt </span><br><span class=\"line\">State      Recv-Q Send-Q    Local Address:Port         Peer Address:Port </span><br><span class=\"line\">LISTEN     0      128       [::]:2380                  [::]:* </span><br><span class=\"line\">LISTEN     0      128       [::]:80                    [::]:* </span><br><span class=\"line\">LISTEN     0      128       [::]:8080                  [::]:* </span><br><span class=\"line\">LISTEN     0      128       [::]:8090                  [::]:* </span><br><span class=\"line\"> </span><br><span class=\"line\">$ ss -nt </span><br><span class=\"line\">State      Recv-Q Send-Q    Local Address:Port         Peer Address:Port </span><br><span class=\"line\">ESTAB      0      0         [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:47452 </span><br><span class=\"line\">ESTAB      0      536       [::ffff:33.9.95.134]:80                  [::ffff:33.43.108.144]:37656 </span><br><span class=\"line\">ESTAB      0      0         [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:38130 </span><br><span class=\"line\">ESTAB      0      536       [::ffff:33.9.95.134]:80                   [::ffff:33.51.103.59]:38280 </span><br><span class=\"line\">ESTAB      0      0         [::ffff:33.9.95.134]:80                   [:: </span><br></pre></td></tr></table></figure>\n\n<p>LISTEN状态Socket</p>\n<ul>\n<li>Recv-Q：当前全连接队列的大小，即已完成三次握手等待应用程序 accept() 的 TCP 链接</li>\n<li>Send-Q：全连接队列的最大长度，即全连接队列的大小</li>\n</ul>\n<p>非LISTEN状态Socket</p>\n<ul>\n<li>Recv-Q：已收到但未被应用程序读取的字节数</li>\n<li>Send-Q：已发送但未收到确认的字节数</li>\n</ul>\n</li>\n<li><p>netstat命令</p>\n<p>通过 netstat -s 命令可以查看 TCP 半连接队列、全连接队列的溢出情况</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -s | grep -i &quot;listen&quot; </span><br><span class=\"line\">189088 times the listen queue of a socket overflowed </span><br><span class=\"line\">30140232 SYNs to LISTEN sockets dropped </span><br></pre></td></tr></table></figure>\n\n<p>上面输出的数值是累计值，分别表示有多少 TCP socket 链接因为全连接队列、半连接队列满了而被丢弃</p>\n<ul>\n<li>189088 times the listen queue of a socket overflowed 代表有 189088 次全连接队列溢出</li>\n<li>30140232 SYNs to LISTEN sockets dropped 代表有 30140232 次半连接队列溢出</li>\n</ul>\n<p>在排查线上问题时，如果一段时间内相关数值一直在上升，则表明半连接队列、全连接队列有溢出情况</p>\n</li>\n</ul>\n<p>其他内容待补充, 参考文首链接</p>\n"},{"title":"ThreadLoacl","date":"2022-05-31T03:33:47.000Z","_content":"\n# 使用\n\n```java\nprivate static final ThreadLocal<T> res1 = new NamedThreadLocal<>(\"resource1\");\nprivate static final ThreadLocal<T> res2 = new NamedThreadLocal<>(\"resource2\");\n```\n\n\n\n# 原理\n\nThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类。\n\nThreadLocalMap的引用是在Thread上定义的\n\nThreadLocal本身并不存储值，它只是作为key（弱引用）来让线程从ThreadLocalMap获取value\n\n![image-20220531114220950](image-20220531114220950.png)\n\n\n\n# 问题\n\n1. 为什么不用Thread作为key存取数据？这样更直观\n\n   thread作为key则所有线程数据在一个大Map中\n\n   - 不方便维护，一个大map。\n   - 一个线程多个值需要存取，只能在value上做文章。\n   - Map不能无限膨胀\n\n2. 内存泄漏问题是什么？什么时候会发生？如何避免？\n\n   ThreadLocalMap的Key是一个弱引用指向ThreadLocal实例。此时正常情况有两个引用指向ThreadLocal实例，一个强引用和一个弱引用。如果强引用被回收掉，ThreadLocal对象只有一个弱引用，也会被回收掉。此时ThreadLocalMap中key为null。到那时value并未被回收，如果在线程池下使用ThreadLocal并且对于key无新操作（因为ThreadLocal在每次操作时会自动清理key为null的value）就会存在大量value未回收的情况。\n\n   ![640](640.jpeg)\n\n","source":"_posts/ThreadLoacl.md","raw":"---\ntitle: ThreadLoacl\ndate: 2022-05-31 11:33:47\ntags:\n  - java\n  - ThreadLocal\n---\n\n# 使用\n\n```java\nprivate static final ThreadLocal<T> res1 = new NamedThreadLocal<>(\"resource1\");\nprivate static final ThreadLocal<T> res2 = new NamedThreadLocal<>(\"resource2\");\n```\n\n\n\n# 原理\n\nThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类。\n\nThreadLocalMap的引用是在Thread上定义的\n\nThreadLocal本身并不存储值，它只是作为key（弱引用）来让线程从ThreadLocalMap获取value\n\n![image-20220531114220950](image-20220531114220950.png)\n\n\n\n# 问题\n\n1. 为什么不用Thread作为key存取数据？这样更直观\n\n   thread作为key则所有线程数据在一个大Map中\n\n   - 不方便维护，一个大map。\n   - 一个线程多个值需要存取，只能在value上做文章。\n   - Map不能无限膨胀\n\n2. 内存泄漏问题是什么？什么时候会发生？如何避免？\n\n   ThreadLocalMap的Key是一个弱引用指向ThreadLocal实例。此时正常情况有两个引用指向ThreadLocal实例，一个强引用和一个弱引用。如果强引用被回收掉，ThreadLocal对象只有一个弱引用，也会被回收掉。此时ThreadLocalMap中key为null。到那时value并未被回收，如果在线程池下使用ThreadLocal并且对于key无新操作（因为ThreadLocal在每次操作时会自动清理key为null的value）就会存在大量value未回收的情况。\n\n   ![640](640.jpeg)\n\n","slug":"ThreadLoacl","published":1,"updated":"2022-05-31T04:34:41.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zg000wwuh8cagpcj1z","content":"<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;T&gt; res1 = <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadLocal</span>&lt;&gt;(<span class=\"string\">&quot;resource1&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;T&gt; res2 = <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadLocal</span>&lt;&gt;(<span class=\"string\">&quot;resource2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>ThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类。</p>\n<p>ThreadLocalMap的引用是在Thread上定义的</p>\n<p>ThreadLocal本身并不存储值，它只是作为key（弱引用）来让线程从ThreadLocalMap获取value</p>\n<p><img src=\"/2022/05/31/ThreadLoacl/image-20220531114220950.png\" alt=\"image-20220531114220950\"></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li><p>为什么不用Thread作为key存取数据？这样更直观</p>\n<p>thread作为key则所有线程数据在一个大Map中</p>\n<ul>\n<li>不方便维护，一个大map。</li>\n<li>一个线程多个值需要存取，只能在value上做文章。</li>\n<li>Map不能无限膨胀</li>\n</ul>\n</li>\n<li><p>内存泄漏问题是什么？什么时候会发生？如何避免？</p>\n<p>ThreadLocalMap的Key是一个弱引用指向ThreadLocal实例。此时正常情况有两个引用指向ThreadLocal实例，一个强引用和一个弱引用。如果强引用被回收掉，ThreadLocal对象只有一个弱引用，也会被回收掉。此时ThreadLocalMap中key为null。到那时value并未被回收，如果在线程池下使用ThreadLocal并且对于key无新操作（因为ThreadLocal在每次操作时会自动清理key为null的value）就会存在大量value未回收的情况。</p>\n<p><img src=\"/2022/05/31/ThreadLoacl/640.jpeg\" alt=\"640\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;T&gt; res1 = <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadLocal</span>&lt;&gt;(<span class=\"string\">&quot;resource1&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;T&gt; res2 = <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadLocal</span>&lt;&gt;(<span class=\"string\">&quot;resource2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>ThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类。</p>\n<p>ThreadLocalMap的引用是在Thread上定义的</p>\n<p>ThreadLocal本身并不存储值，它只是作为key（弱引用）来让线程从ThreadLocalMap获取value</p>\n<p><img src=\"/2022/05/31/ThreadLoacl/image-20220531114220950.png\" alt=\"image-20220531114220950\"></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li><p>为什么不用Thread作为key存取数据？这样更直观</p>\n<p>thread作为key则所有线程数据在一个大Map中</p>\n<ul>\n<li>不方便维护，一个大map。</li>\n<li>一个线程多个值需要存取，只能在value上做文章。</li>\n<li>Map不能无限膨胀</li>\n</ul>\n</li>\n<li><p>内存泄漏问题是什么？什么时候会发生？如何避免？</p>\n<p>ThreadLocalMap的Key是一个弱引用指向ThreadLocal实例。此时正常情况有两个引用指向ThreadLocal实例，一个强引用和一个弱引用。如果强引用被回收掉，ThreadLocal对象只有一个弱引用，也会被回收掉。此时ThreadLocalMap中key为null。到那时value并未被回收，如果在线程池下使用ThreadLocal并且对于key无新操作（因为ThreadLocal在每次操作时会自动清理key为null的value）就会存在大量value未回收的情况。</p>\n<p><img src=\"/2022/05/31/ThreadLoacl/640.jpeg\" alt=\"640\"></p>\n</li>\n</ol>\n"},{"title":"不同路径","date":"2022-06-03T12:15:11.000Z","_content":"\n[不同路径](https://leetcode.cn/problems/unique-paths/)\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\n\n问总共有多少条不同的路径？\n\n![robot_maze](robot_maze.png)\n\n```\n输入：m = 3, n = 7\n输出：28\n```\n\n\n\n思路1: 递归,  当前节点到终点的路径数等于往右走和往左右的路径和.\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    public int uniquePaths(int m, int n) {\n        find(m, n, 0, 0);\n        return max;\n    }\n\n    public void find(int m, int n, int x, int y) {\n        if(x >= m || y >= n) {\n            return;\n        }\n        if(x == m - 1 && y == n - 1) {\n            max++;\n        }\n        find(m, n, x + 1, y);\n        find(m, n, x, y + 1);\n    }\n}\n```\n\n\n\n思路2: 思路1在leetcode中超时, 所以采用dp数组维护每个位置的路径数,终点位置只有一种.其余位置`dp[i][j] = dp[i+1][j] + dp[i][j+1]`\n\n代码:\n\n```java\nclass Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n        for(int row = m - 1; row >= 0; row--) {\n            for(int column = n - 1; column >= 0; column--) {\n                if(row == m - 1 && column == n - 1) {\n                    dp[row][column] = 1;\n                }else {\n                    int down = 0;\n                    if(row + 1 < m) {\n                        down = dp[row+1][column];\n                    }\n                    int right = 0;\n                    if(column + 1 < n) {\n                        right = dp[row][column+1];\n                    }\n                    dp[row][column] = down + right;\n                }\n\n\n            }\n        }\n        return dp[0][0];\n    }\n\n}\n```\n\n","source":"_posts/不同路径.md","raw":"---\ntitle: 不同路径\ndate: 2022-06-03 20:15:11\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[不同路径](https://leetcode.cn/problems/unique-paths/)\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\n\n问总共有多少条不同的路径？\n\n![robot_maze](robot_maze.png)\n\n```\n输入：m = 3, n = 7\n输出：28\n```\n\n\n\n思路1: 递归,  当前节点到终点的路径数等于往右走和往左右的路径和.\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    public int uniquePaths(int m, int n) {\n        find(m, n, 0, 0);\n        return max;\n    }\n\n    public void find(int m, int n, int x, int y) {\n        if(x >= m || y >= n) {\n            return;\n        }\n        if(x == m - 1 && y == n - 1) {\n            max++;\n        }\n        find(m, n, x + 1, y);\n        find(m, n, x, y + 1);\n    }\n}\n```\n\n\n\n思路2: 思路1在leetcode中超时, 所以采用dp数组维护每个位置的路径数,终点位置只有一种.其余位置`dp[i][j] = dp[i+1][j] + dp[i][j+1]`\n\n代码:\n\n```java\nclass Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n        for(int row = m - 1; row >= 0; row--) {\n            for(int column = n - 1; column >= 0; column--) {\n                if(row == m - 1 && column == n - 1) {\n                    dp[row][column] = 1;\n                }else {\n                    int down = 0;\n                    if(row + 1 < m) {\n                        down = dp[row+1][column];\n                    }\n                    int right = 0;\n                    if(column + 1 < n) {\n                        right = dp[row][column+1];\n                    }\n                    dp[row][column] = down + right;\n                }\n\n\n            }\n        }\n        return dp[0][0];\n    }\n\n}\n```\n\n","slug":"不同路径","published":1,"updated":"2022-06-03T12:24:20.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zh000zwuh8fs296p84","content":"<p><a href=\"https://leetcode.cn/problems/unique-paths/\">不同路径</a></p>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><img src=\"/2022/06/03/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/robot_maze.png\" alt=\"robot_maze\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：m = 3, n = 7</span><br><span class=\"line\">输出：28</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路1: 递归,  当前节点到终点的路径数等于往右走和往左右的路径和.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        find(m, n, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &gt;= m || y &gt;= n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == m - <span class=\"number\">1</span> &amp;&amp; y == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            max++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        find(m, n, x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        find(m, n, x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路2: 思路1在leetcode中超时, 所以采用dp数组维护每个位置的路径数,终点位置只有一种.其余位置<code>dp[i][j] = dp[i+1][j] + dp[i][j+1]</code></p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> m - <span class=\"number\">1</span>; row &gt;= <span class=\"number\">0</span>; row--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> n - <span class=\"number\">1</span>; column &gt;= <span class=\"number\">0</span>; column--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(row == m - <span class=\"number\">1</span> &amp;&amp; column == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dp[row][column] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row + <span class=\"number\">1</span> &lt; m) &#123;</span><br><span class=\"line\">                        down = dp[row+<span class=\"number\">1</span>][column];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(column + <span class=\"number\">1</span> &lt; n) &#123;</span><br><span class=\"line\">                        right = dp[row][column+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[row][column] = down + right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/unique-paths/\">不同路径</a></p>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><img src=\"/2022/06/03/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/robot_maze.png\" alt=\"robot_maze\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：m = 3, n = 7</span><br><span class=\"line\">输出：28</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路1: 递归,  当前节点到终点的路径数等于往右走和往左右的路径和.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        find(m, n, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &gt;= m || y &gt;= n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == m - <span class=\"number\">1</span> &amp;&amp; y == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            max++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        find(m, n, x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        find(m, n, x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路2: 思路1在leetcode中超时, 所以采用dp数组维护每个位置的路径数,终点位置只有一种.其余位置<code>dp[i][j] = dp[i+1][j] + dp[i][j+1]</code></p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> m - <span class=\"number\">1</span>; row &gt;= <span class=\"number\">0</span>; row--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> n - <span class=\"number\">1</span>; column &gt;= <span class=\"number\">0</span>; column--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(row == m - <span class=\"number\">1</span> &amp;&amp; column == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dp[row][column] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row + <span class=\"number\">1</span> &lt; m) &#123;</span><br><span class=\"line\">                        down = dp[row+<span class=\"number\">1</span>][column];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(column + <span class=\"number\">1</span> &lt; n) &#123;</span><br><span class=\"line\">                        right = dp[row][column+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[row][column] = down + right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-05-29T01:02:12.477Z","updated":"2022-05-29T01:02:12.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zh0011wuh8agf1aytl","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"乘积最大子数组","date":"2022-06-04T03:15:54.000Z","_content":"\n[乘积最大子数组](https://leetcode.cn/problems/maximum-product-subarray/)\n\n给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n\n测试用例的答案是一个 32-位 整数。\n\n子数组 是数组的连续子序列。\n\n```\n输入: nums = [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n```\n\n思路:\n\n维护每一个位置最大最小值( 通过这个可以为后续的提供数据支持)\n\n\n\n```java\nclass Solution {\n    public int maxProduct(int[] nums) {\n        if(nums.length == 1) {\n            return nums[0];\n        }\n        int max = 0;\n        int[] dp = new int[2];\n        for(int i = 0; i < nums.length; i++) {\n            int val = nums[i];\n            if(val == 0) {\n                dp[0] = 1;\n                dp[1] = 1;\n                continue;\n            }\n            if(i == 0) {\n                dp[0] = val;\n                dp[1] = val;\n            }else{\n                int v1 = dp[0] * val;\n                int v2 = dp[1] * val;\n                if(v1 > v2) {\n                    dp[0] = Math.min(v2, val);\n                    dp[1] = Math.max(v1, val);\n                }else{\n                    dp[0] = Math.min(v1, val);\n                    dp[1] = Math.max(v2, val);\n                }\n            }\n            max = Math.max(max, dp[1]);\n        }\n        return max;\n    }\n}\n```\n\n","source":"_posts/乘积最大子数组.md","raw":"---\ntitle: 乘积最大子数组\ndate: 2022-06-04 11:15:54\ntags:\n  - leetcode\n  - dp\n---\n\n[乘积最大子数组](https://leetcode.cn/problems/maximum-product-subarray/)\n\n给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n\n测试用例的答案是一个 32-位 整数。\n\n子数组 是数组的连续子序列。\n\n```\n输入: nums = [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n```\n\n思路:\n\n维护每一个位置最大最小值( 通过这个可以为后续的提供数据支持)\n\n\n\n```java\nclass Solution {\n    public int maxProduct(int[] nums) {\n        if(nums.length == 1) {\n            return nums[0];\n        }\n        int max = 0;\n        int[] dp = new int[2];\n        for(int i = 0; i < nums.length; i++) {\n            int val = nums[i];\n            if(val == 0) {\n                dp[0] = 1;\n                dp[1] = 1;\n                continue;\n            }\n            if(i == 0) {\n                dp[0] = val;\n                dp[1] = val;\n            }else{\n                int v1 = dp[0] * val;\n                int v2 = dp[1] * val;\n                if(v1 > v2) {\n                    dp[0] = Math.min(v2, val);\n                    dp[1] = Math.max(v1, val);\n                }else{\n                    dp[0] = Math.min(v1, val);\n                    dp[1] = Math.max(v2, val);\n                }\n            }\n            max = Math.max(max, dp[1]);\n        }\n        return max;\n    }\n}\n```\n\n","slug":"乘积最大子数组","published":1,"updated":"2022-06-04T03:31:27.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zi0013wuh82ufpe4fw","content":"<p><a href=\"https://leetcode.cn/problems/maximum-product-subarray/\">乘积最大子数组</a></p>\n<p>给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n<p>测试用例的答案是一个 32-位 整数。</p>\n<p>子数组 是数组的连续子序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [2,3,-2,4]</span><br><span class=\"line\">输出: 6</span><br><span class=\"line\">解释: 子数组 [2,3] 有最大乘积 6。</span><br></pre></td></tr></table></figure>\n\n<p>思路:</p>\n<p>维护每一个位置最大最小值( 通过这个可以为后续的提供数据支持)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>] = val;</span><br><span class=\"line\">                dp[<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> dp[<span class=\"number\">0</span>] * val;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span> dp[<span class=\"number\">1</span>] * val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v1 &gt; v2) &#123;</span><br><span class=\"line\">                    dp[<span class=\"number\">0</span>] = Math.min(v2, val);</span><br><span class=\"line\">                    dp[<span class=\"number\">1</span>] = Math.max(v1, val);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[<span class=\"number\">0</span>] = Math.min(v1, val);</span><br><span class=\"line\">                    dp[<span class=\"number\">1</span>] = Math.max(v2, val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, dp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/maximum-product-subarray/\">乘积最大子数组</a></p>\n<p>给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n<p>测试用例的答案是一个 32-位 整数。</p>\n<p>子数组 是数组的连续子序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [2,3,-2,4]</span><br><span class=\"line\">输出: 6</span><br><span class=\"line\">解释: 子数组 [2,3] 有最大乘积 6。</span><br></pre></td></tr></table></figure>\n\n<p>思路:</p>\n<p>维护每一个位置最大最小值( 通过这个可以为后续的提供数据支持)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>] = val;</span><br><span class=\"line\">                dp[<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> dp[<span class=\"number\">0</span>] * val;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span> dp[<span class=\"number\">1</span>] * val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v1 &gt; v2) &#123;</span><br><span class=\"line\">                    dp[<span class=\"number\">0</span>] = Math.min(v2, val);</span><br><span class=\"line\">                    dp[<span class=\"number\">1</span>] = Math.max(v1, val);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[<span class=\"number\">0</span>] = Math.min(v1, val);</span><br><span class=\"line\">                    dp[<span class=\"number\">1</span>] = Math.max(v2, val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, dp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"二叉搜索树与双向链表","date":"2022-06-07T02:06:53.000Z","_content":"\n[二叉搜索树与双向链表](https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/)\n\n输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。\n\n为了让您更好地理解问题，以下面的二叉搜索树为例：\n\n![bstdllreturndll](/Users/zeki/Documents/Blog/source/_posts/二叉搜索树与双向链表/bstdllreturndll.png)\n\n我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。\n\n下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。\n\n![bstdlloriginalbst](/Users/zeki/Documents/Blog/source/_posts/二叉搜索树与双向链表/bstdlloriginalbst.png)\n\n特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。\n\n\n\n思路: 可以将整颗树的转化分解为左子树转化和右子树转化. 然后对于左子树转化后的结果获取头尾节点更新与当前根节点的指针即可, 右子树同样如此\n\n\n\n代码:\n\n```java\n/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,Node _left,Node _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\nclass Solution {\n    public Node treeToDoublyList(Node root) {\n         if(root == null) { \n             return null;\n         }\n         // 返回节点,默认当前根节点\n         Node ret = root;\n         // 尾结点,默认根节点\n         Node end = root;\n         Node left = root.left;\n         Node right = root.right;\n         // 左侧双向链表\n         Node linkLeft = treeToDoublyList(left);\n         // 右侧双向链表\n         Node linkRight = treeToDoublyList(right);\n         if(linkLeft != null) {\n             ret = linkLeft;\n             Node tmp = linkLeft;\n             // 这里是寻找子树尾结点(后续可以优化)\n             while(tmp.right != null) {\n                 if(tmp.right == linkLeft){\n                     break;\n                 }\n                 tmp = tmp.right;\n             }\n             // 更新指针指向\n             tmp.right = root;\n             root.left = tmp;\n         }\n         if(linkRight != null) {\n             Node tmp = linkRight;\n             while(tmp.right != null) {\n                 if(tmp.right == linkRight){\n                     break;\n                 }\n                 tmp = tmp.right;\n             }\n             // 更新指针指向\n             root.right = linkRight;\n             linkRight.left = root;\n             // 更新头尾节点的指向关系\n             tmp.right = ret;\n             ret.left = tmp;\n         } else {\n             ret.left = root;\n             root.right = ret;\n         }\n         return ret;\n    }\n}\n```\n\n","source":"_posts/二叉搜索树与双向链表.md","raw":"---\n\ntitle: 二叉搜索树与双向链表\ndate: 2022-06-07 10:06:53\ntags:\n  - leetcode\n  - 算法\n  - 树\n  - 链表\n---\n\n[二叉搜索树与双向链表](https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/)\n\n输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。\n\n为了让您更好地理解问题，以下面的二叉搜索树为例：\n\n![bstdllreturndll](/Users/zeki/Documents/Blog/source/_posts/二叉搜索树与双向链表/bstdllreturndll.png)\n\n我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。\n\n下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。\n\n![bstdlloriginalbst](/Users/zeki/Documents/Blog/source/_posts/二叉搜索树与双向链表/bstdlloriginalbst.png)\n\n特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。\n\n\n\n思路: 可以将整颗树的转化分解为左子树转化和右子树转化. 然后对于左子树转化后的结果获取头尾节点更新与当前根节点的指针即可, 右子树同样如此\n\n\n\n代码:\n\n```java\n/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,Node _left,Node _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\nclass Solution {\n    public Node treeToDoublyList(Node root) {\n         if(root == null) { \n             return null;\n         }\n         // 返回节点,默认当前根节点\n         Node ret = root;\n         // 尾结点,默认根节点\n         Node end = root;\n         Node left = root.left;\n         Node right = root.right;\n         // 左侧双向链表\n         Node linkLeft = treeToDoublyList(left);\n         // 右侧双向链表\n         Node linkRight = treeToDoublyList(right);\n         if(linkLeft != null) {\n             ret = linkLeft;\n             Node tmp = linkLeft;\n             // 这里是寻找子树尾结点(后续可以优化)\n             while(tmp.right != null) {\n                 if(tmp.right == linkLeft){\n                     break;\n                 }\n                 tmp = tmp.right;\n             }\n             // 更新指针指向\n             tmp.right = root;\n             root.left = tmp;\n         }\n         if(linkRight != null) {\n             Node tmp = linkRight;\n             while(tmp.right != null) {\n                 if(tmp.right == linkRight){\n                     break;\n                 }\n                 tmp = tmp.right;\n             }\n             // 更新指针指向\n             root.right = linkRight;\n             linkRight.left = root;\n             // 更新头尾节点的指向关系\n             tmp.right = ret;\n             ret.left = tmp;\n         } else {\n             ret.left = root;\n             root.right = ret;\n         }\n         return ret;\n    }\n}\n```\n\n","slug":"二叉搜索树与双向链表","published":1,"updated":"2022-06-07T02:12:35.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zj0015wuh833ibfwab","content":"<p><a href=\"https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/\">二叉搜索树与双向链表</a></p>\n<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p>\n<p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p>\n<p><img src=\"/Users/zeki/Documents/Blog/source/_posts/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/bstdllreturndll.png\" alt=\"bstdllreturndll\"></p>\n<p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p>\n<p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p>\n<p><img src=\"/Users/zeki/Documents/Blog/source/_posts/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/bstdlloriginalbst.png\" alt=\"bstdlloriginalbst\"></p>\n<p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p>\n<p>思路: 可以将整颗树的转化分解为左子树转化和右子树转化. 然后对于左子树转化后的结果获取头尾节点更新与当前根节点的指针即可, 右子树同样如此</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// Definition for a Node.</span></span><br><span class=\"line\"><span class=\"comment\">class Node &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public int val;</span></span><br><span class=\"line\"><span class=\"comment\">    public Node left;</span></span><br><span class=\"line\"><span class=\"comment\">    public Node right;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public Node() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public Node(int _val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val = _val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public Node(int _val,Node _left,Node _right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val = _val;</span></span><br><span class=\"line\"><span class=\"comment\">        left = _left;</span></span><br><span class=\"line\"><span class=\"comment\">        right = _right;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">treeToDoublyList</span><span class=\"params\">(Node root)</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">// 返回节点,默认当前根节点</span></span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">         <span class=\"comment\">// 尾结点,默认根节点</span></span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> root.left;</span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> root.right;</span><br><span class=\"line\">         <span class=\"comment\">// 左侧双向链表</span></span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">linkLeft</span> <span class=\"operator\">=</span> treeToDoublyList(left);</span><br><span class=\"line\">         <span class=\"comment\">// 右侧双向链表</span></span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">linkRight</span> <span class=\"operator\">=</span> treeToDoublyList(right);</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(linkLeft != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             ret = linkLeft;</span><br><span class=\"line\">             <span class=\"type\">Node</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> linkLeft;</span><br><span class=\"line\">             <span class=\"comment\">// 这里是寻找子树尾结点(后续可以优化)</span></span><br><span class=\"line\">             <span class=\"keyword\">while</span>(tmp.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(tmp.right == linkLeft)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 tmp = tmp.right;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"comment\">// 更新指针指向</span></span><br><span class=\"line\">             tmp.right = root;</span><br><span class=\"line\">             root.left = tmp;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(linkRight != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"type\">Node</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> linkRight;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(tmp.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(tmp.right == linkRight)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 tmp = tmp.right;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"comment\">// 更新指针指向</span></span><br><span class=\"line\">             root.right = linkRight;</span><br><span class=\"line\">             linkRight.left = root;</span><br><span class=\"line\">             <span class=\"comment\">// 更新头尾节点的指向关系</span></span><br><span class=\"line\">             tmp.right = ret;</span><br><span class=\"line\">             ret.left = tmp;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             ret.left = root;</span><br><span class=\"line\">             root.right = ret;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/\">二叉搜索树与双向链表</a></p>\n<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p>\n<p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p>\n<p><img src=\"/Users/zeki/Documents/Blog/source/_posts/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/bstdllreturndll.png\" alt=\"bstdllreturndll\"></p>\n<p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p>\n<p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p>\n<p><img src=\"/Users/zeki/Documents/Blog/source/_posts/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/bstdlloriginalbst.png\" alt=\"bstdlloriginalbst\"></p>\n<p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p>\n<p>思路: 可以将整颗树的转化分解为左子树转化和右子树转化. 然后对于左子树转化后的结果获取头尾节点更新与当前根节点的指针即可, 右子树同样如此</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// Definition for a Node.</span></span><br><span class=\"line\"><span class=\"comment\">class Node &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public int val;</span></span><br><span class=\"line\"><span class=\"comment\">    public Node left;</span></span><br><span class=\"line\"><span class=\"comment\">    public Node right;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public Node() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public Node(int _val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val = _val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public Node(int _val,Node _left,Node _right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val = _val;</span></span><br><span class=\"line\"><span class=\"comment\">        left = _left;</span></span><br><span class=\"line\"><span class=\"comment\">        right = _right;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">treeToDoublyList</span><span class=\"params\">(Node root)</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">// 返回节点,默认当前根节点</span></span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">         <span class=\"comment\">// 尾结点,默认根节点</span></span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> root.left;</span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> root.right;</span><br><span class=\"line\">         <span class=\"comment\">// 左侧双向链表</span></span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">linkLeft</span> <span class=\"operator\">=</span> treeToDoublyList(left);</span><br><span class=\"line\">         <span class=\"comment\">// 右侧双向链表</span></span><br><span class=\"line\">         <span class=\"type\">Node</span> <span class=\"variable\">linkRight</span> <span class=\"operator\">=</span> treeToDoublyList(right);</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(linkLeft != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             ret = linkLeft;</span><br><span class=\"line\">             <span class=\"type\">Node</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> linkLeft;</span><br><span class=\"line\">             <span class=\"comment\">// 这里是寻找子树尾结点(后续可以优化)</span></span><br><span class=\"line\">             <span class=\"keyword\">while</span>(tmp.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(tmp.right == linkLeft)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 tmp = tmp.right;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"comment\">// 更新指针指向</span></span><br><span class=\"line\">             tmp.right = root;</span><br><span class=\"line\">             root.left = tmp;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(linkRight != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"type\">Node</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> linkRight;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(tmp.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(tmp.right == linkRight)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 tmp = tmp.right;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"comment\">// 更新指针指向</span></span><br><span class=\"line\">             root.right = linkRight;</span><br><span class=\"line\">             linkRight.left = root;</span><br><span class=\"line\">             <span class=\"comment\">// 更新头尾节点的指向关系</span></span><br><span class=\"line\">             tmp.right = ret;</span><br><span class=\"line\">             ret.left = tmp;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             ret.left = root;</span><br><span class=\"line\">             root.right = ret;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"二叉树的直径","date":"2022-06-02T07:47:44.000Z","_content":"\n[二叉树的直径](https://leetcode.cn/problems/diameter-of-binary-tree/)\n\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n\n```\n给定二叉树\n\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n```\n\n\n\n思路1：计算最长路径，可以转化为求每个节点的作为根节点并该节点长度。并与全局变量max比较并更新。每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1。 采用后续遍历，遍历过程中维护子树的左右子树最长路径，根据左右子树最长路径更新当前节点的左右最长路径。\n\n\n\n官方思路：Max(max, 左子树深度+右子树深度+1) \n\n思路1中的：\"每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1\" 其实就是树的深度的意思，因为最终会遍历每一个节点作为根节点所以没必要维护左右子树的较大路径，直接用深度维护即可。\n\n\n\n思路1代码（存在冗余代码）：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max = 0;\n    public int diameterOfBinaryTree(TreeNode root) {\n        if(root == null) {\n            return max;\n        }\n        find(root);\n        return max;\n    }\n\n    public int[] find(TreeNode node) {\n        int[] ret = new int[2];\n        int min = 0;\n        \n        TreeNode left = node.left;\n        TreeNode right = node.right;\n        if(left == null && right == null) {\n            return new int[]{1,1};\n        }\n\n        if(left != null) {\n            int[] lv = find(left);\n            ret[0] = Math.max(lv[0], lv[1]) + 1;\n            min++;\n        }\n       \n        if(right != null) {\n            int[] lr = find(right);\n            ret[1] = Math.max(lr[0], lr[1]) + 1;\n            min++;\n        }\n        int l1 = ret[0] + ret[1] - min;\n        max = Math.max(max, l1);\n        return ret;\n    }\n}\n```\n\n官方解答：\n\n```java\nclass Solution {\n    int ans;\n    public int diameterOfBinaryTree(TreeNode root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n    public int depth(TreeNode node) {\n        if (node == null) {\n            return 0; // 访问到空节点了，返回0\n        }\n        int L = depth(node.left); // 左儿子为根的子树的深度\n        int R = depth(node.right); // 右儿子为根的子树的深度\n        ans = Math.max(ans, L+R+1); // 计算d_node即L+R+1 并更新ans\n        return Math.max(L, R) + 1; // 返回该节点为根的子树的深度\n    }\n}\n```\n\n\n\n总结：最长路径就是以每个节点作为根节点，计算经过根节点的最长路径即可\n","source":"_posts/二叉树的直径.md","raw":"---\ntitle: 二叉树的直径\ndate: 2022-06-02 15:47:44\ntags:\n  - leetcode\n  - 算法\n  - 树\n---\n\n[二叉树的直径](https://leetcode.cn/problems/diameter-of-binary-tree/)\n\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n\n```\n给定二叉树\n\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n```\n\n\n\n思路1：计算最长路径，可以转化为求每个节点的作为根节点并该节点长度。并与全局变量max比较并更新。每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1。 采用后续遍历，遍历过程中维护子树的左右子树最长路径，根据左右子树最长路径更新当前节点的左右最长路径。\n\n\n\n官方思路：Max(max, 左子树深度+右子树深度+1) \n\n思路1中的：\"每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1\" 其实就是树的深度的意思，因为最终会遍历每一个节点作为根节点所以没必要维护左右子树的较大路径，直接用深度维护即可。\n\n\n\n思路1代码（存在冗余代码）：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max = 0;\n    public int diameterOfBinaryTree(TreeNode root) {\n        if(root == null) {\n            return max;\n        }\n        find(root);\n        return max;\n    }\n\n    public int[] find(TreeNode node) {\n        int[] ret = new int[2];\n        int min = 0;\n        \n        TreeNode left = node.left;\n        TreeNode right = node.right;\n        if(left == null && right == null) {\n            return new int[]{1,1};\n        }\n\n        if(left != null) {\n            int[] lv = find(left);\n            ret[0] = Math.max(lv[0], lv[1]) + 1;\n            min++;\n        }\n       \n        if(right != null) {\n            int[] lr = find(right);\n            ret[1] = Math.max(lr[0], lr[1]) + 1;\n            min++;\n        }\n        int l1 = ret[0] + ret[1] - min;\n        max = Math.max(max, l1);\n        return ret;\n    }\n}\n```\n\n官方解答：\n\n```java\nclass Solution {\n    int ans;\n    public int diameterOfBinaryTree(TreeNode root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n    public int depth(TreeNode node) {\n        if (node == null) {\n            return 0; // 访问到空节点了，返回0\n        }\n        int L = depth(node.left); // 左儿子为根的子树的深度\n        int R = depth(node.right); // 右儿子为根的子树的深度\n        ans = Math.max(ans, L+R+1); // 计算d_node即L+R+1 并更新ans\n        return Math.max(L, R) + 1; // 返回该节点为根的子树的深度\n    }\n}\n```\n\n\n\n总结：最长路径就是以每个节点作为根节点，计算经过根节点的最长路径即可\n","slug":"二叉树的直径","published":1,"updated":"2022-06-02T08:08:32.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zk0018wuh8cvm0hwnf","content":"<p><a href=\"https://leetcode.cn/problems/diameter-of-binary-tree/\">二叉树的直径</a></p>\n<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定二叉树</span><br><span class=\"line\"></span><br><span class=\"line\">          1</span><br><span class=\"line\">         / \\</span><br><span class=\"line\">        2   3</span><br><span class=\"line\">       / \\     </span><br><span class=\"line\">      4   5    </span><br><span class=\"line\">返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路1：计算最长路径，可以转化为求每个节点的作为根节点并该节点长度。并与全局变量max比较并更新。每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1。 采用后续遍历，遍历过程中维护子树的左右子树最长路径，根据左右子树最长路径更新当前节点的左右最长路径。</p>\n<p>官方思路：Max(max, 左子树深度+右子树深度+1) </p>\n<p>思路1中的：”每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1” 其实就是树的深度的意思，因为最终会遍历每一个节点作为根节点所以没必要维护左右子树的较大路径，直接用深度维护即可。</p>\n<p>思路1代码（存在冗余代码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        find(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] find(TreeNode node) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> node.left;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> node.right;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span> &amp;&amp; right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] lv = find(left);</span><br><span class=\"line\">            ret[<span class=\"number\">0</span>] = Math.max(lv[<span class=\"number\">0</span>], lv[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            min++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] lr = find(right);</span><br><span class=\"line\">            ret[<span class=\"number\">1</span>] = Math.max(lr[<span class=\"number\">0</span>], lr[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            min++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l1</span> <span class=\"operator\">=</span> ret[<span class=\"number\">0</span>] + ret[<span class=\"number\">1</span>] - min;</span><br><span class=\"line\">        max = Math.max(max, l1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>官方解答：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        depth(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">depth</span><span class=\"params\">(TreeNode node)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 访问到空节点了，返回0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">L</span> <span class=\"operator\">=</span> depth(node.left); <span class=\"comment\">// 左儿子为根的子树的深度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">R</span> <span class=\"operator\">=</span> depth(node.right); <span class=\"comment\">// 右儿子为根的子树的深度</span></span><br><span class=\"line\">        ans = Math.max(ans, L+R+<span class=\"number\">1</span>); <span class=\"comment\">// 计算d_node即L+R+1 并更新ans</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(L, R) + <span class=\"number\">1</span>; <span class=\"comment\">// 返回该节点为根的子树的深度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：最长路径就是以每个节点作为根节点，计算经过根节点的最长路径即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/diameter-of-binary-tree/\">二叉树的直径</a></p>\n<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定二叉树</span><br><span class=\"line\"></span><br><span class=\"line\">          1</span><br><span class=\"line\">         / \\</span><br><span class=\"line\">        2   3</span><br><span class=\"line\">       / \\     </span><br><span class=\"line\">      4   5    </span><br><span class=\"line\">返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路1：计算最长路径，可以转化为求每个节点的作为根节点并该节点长度。并与全局变量max比较并更新。每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1。 采用后续遍历，遍历过程中维护子树的左右子树最长路径，根据左右子树最长路径更新当前节点的左右最长路径。</p>\n<p>官方思路：Max(max, 左子树深度+右子树深度+1) </p>\n<p>思路1中的：”每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1” 其实就是树的深度的意思，因为最终会遍历每一个节点作为根节点所以没必要维护左右子树的较大路径，直接用深度维护即可。</p>\n<p>思路1代码（存在冗余代码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        find(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] find(TreeNode node) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> node.left;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> node.right;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span> &amp;&amp; right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] lv = find(left);</span><br><span class=\"line\">            ret[<span class=\"number\">0</span>] = Math.max(lv[<span class=\"number\">0</span>], lv[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            min++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] lr = find(right);</span><br><span class=\"line\">            ret[<span class=\"number\">1</span>] = Math.max(lr[<span class=\"number\">0</span>], lr[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            min++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l1</span> <span class=\"operator\">=</span> ret[<span class=\"number\">0</span>] + ret[<span class=\"number\">1</span>] - min;</span><br><span class=\"line\">        max = Math.max(max, l1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>官方解答：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        depth(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">depth</span><span class=\"params\">(TreeNode node)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 访问到空节点了，返回0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">L</span> <span class=\"operator\">=</span> depth(node.left); <span class=\"comment\">// 左儿子为根的子树的深度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">R</span> <span class=\"operator\">=</span> depth(node.right); <span class=\"comment\">// 右儿子为根的子树的深度</span></span><br><span class=\"line\">        ans = Math.max(ans, L+R+<span class=\"number\">1</span>); <span class=\"comment\">// 计算d_node即L+R+1 并更新ans</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(L, R) + <span class=\"number\">1</span>; <span class=\"comment\">// 返回该节点为根的子树的深度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：最长路径就是以每个节点作为根节点，计算经过根节点的最长路径即可</p>\n"},{"title":"从前序与中序遍历序列构造二叉树","date":"2022-05-31T09:31:50.000Z","_content":"\n[从前序与中序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n\n给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。\n\n输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n输出: [3,9,20,null,null,15,7]\n\n思路：\n\n可以按照先序遍历顺序构建节点，第一个节点是整棵树的根节点。后续每个节点在中序遍历数组中确认其左右子树范围递归构建左右子树（可以将中序遍历数组做成Map方便查找确定范围）。需要注意的：递归过程中先序遍历索引更新\n\n解答：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int ps = 0;\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        Map<Integer,Integer> inordreMap = buildMap(inorder);\n        return build(preorder, inordreMap,0, inorder.length-1);\n    }\n\n    public TreeNode build(int[] preorder, Map<Integer,Integer>  inorder, int is, int ie){\n        if(ps >= preorder.length) {\n            return null;\n        }\n        int val = preorder[ps];\n        TreeNode node = new TreeNode(val);\n        int index = inorder.get(val);\n        if(index > is){\n            ps++;\n            node.left = build(preorder, inorder,is, index-1);\n        }\n        if(index < ie){\n            ps++;\n            node.right = build(preorder, inorder,index+1, ie);\n        }\n        return node;\n\n    }\n\n    public Map<Integer,Integer> buildMap(int[] arr){\n        Map<Integer,Integer> ret = new HashMap();\n        for(int i = 0; i < arr.length; i++) {\n            ret.put(arr[i],i);\n\n        }\n        return ret;\n    }\n}\n```\n\n","source":"_posts/从前序与中序遍历序列构造二叉树.md","raw":"---\ntitle: 从前序与中序遍历序列构造二叉树\ndate: 2022-05-31 17:31:50\ntags:\n  - 算法\n  - 二叉树\n  - leetcode\n---\n\n[从前序与中序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n\n给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。\n\n输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n输出: [3,9,20,null,null,15,7]\n\n思路：\n\n可以按照先序遍历顺序构建节点，第一个节点是整棵树的根节点。后续每个节点在中序遍历数组中确认其左右子树范围递归构建左右子树（可以将中序遍历数组做成Map方便查找确定范围）。需要注意的：递归过程中先序遍历索引更新\n\n解答：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int ps = 0;\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        Map<Integer,Integer> inordreMap = buildMap(inorder);\n        return build(preorder, inordreMap,0, inorder.length-1);\n    }\n\n    public TreeNode build(int[] preorder, Map<Integer,Integer>  inorder, int is, int ie){\n        if(ps >= preorder.length) {\n            return null;\n        }\n        int val = preorder[ps];\n        TreeNode node = new TreeNode(val);\n        int index = inorder.get(val);\n        if(index > is){\n            ps++;\n            node.left = build(preorder, inorder,is, index-1);\n        }\n        if(index < ie){\n            ps++;\n            node.right = build(preorder, inorder,index+1, ie);\n        }\n        return node;\n\n    }\n\n    public Map<Integer,Integer> buildMap(int[] arr){\n        Map<Integer,Integer> ret = new HashMap();\n        for(int i = 0; i < arr.length; i++) {\n            ret.put(arr[i],i);\n\n        }\n        return ret;\n    }\n}\n```\n\n","slug":"从前序与中序遍历序列构造二叉树","published":1,"updated":"2022-05-31T10:45:37.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zk0019wuh8f5kj28hs","content":"<p><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">从前序与中序遍历序列构造二叉树</a></p>\n<p>给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p>\n<p>输入: preorder &#x3D; [3,9,20,15,7], inorder &#x3D; [9,3,15,20,7]<br>输出: [3,9,20,null,null,15,7]</p>\n<p>思路：</p>\n<p>可以按照先序遍历顺序构建节点，第一个节点是整棵树的根节点。后续每个节点在中序遍历数组中确认其左右子树范围递归构建左右子树（可以将中序遍历数组做成Map方便查找确定范围）。需要注意的：递归过程中先序遍历索引更新</p>\n<p>解答：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>[] preorder, <span class=\"type\">int</span>[] inorder)</span> &#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; inordreMap = buildMap(inorder);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build(preorder, inordreMap,<span class=\"number\">0</span>, inorder.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"type\">int</span>[] preorder, Map&lt;Integer,Integer&gt;  inorder, <span class=\"type\">int</span> is, <span class=\"type\">int</span> ie)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ps &gt;= preorder.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> preorder[ps];</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> inorder.get(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt; is)&#123;</span><br><span class=\"line\">            ps++;</span><br><span class=\"line\">            node.left = build(preorder, inorder,is, index-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; ie)&#123;</span><br><span class=\"line\">            ps++;</span><br><span class=\"line\">            node.right = build(preorder, inorder,index+<span class=\"number\">1</span>, ie);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Integer,Integer&gt; <span class=\"title function_\">buildMap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; ret = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            ret.put(arr[i],i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">从前序与中序遍历序列构造二叉树</a></p>\n<p>给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p>\n<p>输入: preorder &#x3D; [3,9,20,15,7], inorder &#x3D; [9,3,15,20,7]<br>输出: [3,9,20,null,null,15,7]</p>\n<p>思路：</p>\n<p>可以按照先序遍历顺序构建节点，第一个节点是整棵树的根节点。后续每个节点在中序遍历数组中确认其左右子树范围递归构建左右子树（可以将中序遍历数组做成Map方便查找确定范围）。需要注意的：递归过程中先序遍历索引更新</p>\n<p>解答：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>[] preorder, <span class=\"type\">int</span>[] inorder)</span> &#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; inordreMap = buildMap(inorder);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build(preorder, inordreMap,<span class=\"number\">0</span>, inorder.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"type\">int</span>[] preorder, Map&lt;Integer,Integer&gt;  inorder, <span class=\"type\">int</span> is, <span class=\"type\">int</span> ie)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ps &gt;= preorder.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> preorder[ps];</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> inorder.get(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt; is)&#123;</span><br><span class=\"line\">            ps++;</span><br><span class=\"line\">            node.left = build(preorder, inorder,is, index-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; ie)&#123;</span><br><span class=\"line\">            ps++;</span><br><span class=\"line\">            node.right = build(preorder, inorder,index+<span class=\"number\">1</span>, ie);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Integer,Integer&gt; <span class=\"title function_\">buildMap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; ret = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            ret.put(arr[i],i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"分布式概念","date":"2022-06-04T06:37:12.000Z","_content":"\n- 事务\n\n  事务是由一组操作构成的可靠的独立的工作单元，事务具备ACID的特性，即原子性、一致性、隔离性和持久性。\n\n- 本地事务\n\n  事务由资源管理器本地管理时被称作本地事务。本地事务的优点就是支持严格的ACID特性，高效，可靠，状态可以只在资源管理器中维护，而且应用编程模型简单。但是本地事务不具备分布式事务的处理能力，隔离的最小单位受限于资源管理器。\n\n- 分布式事务\n\n  当事务由全局事务管理器进行全局管理时成为全局事务，事务管理器负责管理全局的事务状态和参与的资源，协同资源的一致提交回滚。\n\n- 两阶段提交\n\n  参考: [Two-phase Commit](https://www.jianshu.com/p/1aa944f44b7b)\n\n- BASE理论\n\n  BA(Basic Available) 基本可用, S(Soft) 柔性状态,允许短时间不同步,E(Eventually) 最终一致性\n\n- CAP定理\n\n  C(Consistency) 一致性, A(Availability) 可用性, P(Partition tolerance) 分区容错性. 分布式场景下只能同时满足两种. 常用的分布式实现: CP (满足一致性和分区容错性, 会存在短暂不可用状态), AP(满足可用性和分区容错性, 但不是强一致).\n\n参考文章: [分布式事务整理](https://www.cnblogs.com/crazymakercircle/p/14375424.html)\n\n","source":"_posts/分布式概念.md","raw":"---\ntitle: 分布式概念\ndate: 2022-06-04 14:37:12\ntags:\n  - 分布式\n  - CAP\n---\n\n- 事务\n\n  事务是由一组操作构成的可靠的独立的工作单元，事务具备ACID的特性，即原子性、一致性、隔离性和持久性。\n\n- 本地事务\n\n  事务由资源管理器本地管理时被称作本地事务。本地事务的优点就是支持严格的ACID特性，高效，可靠，状态可以只在资源管理器中维护，而且应用编程模型简单。但是本地事务不具备分布式事务的处理能力，隔离的最小单位受限于资源管理器。\n\n- 分布式事务\n\n  当事务由全局事务管理器进行全局管理时成为全局事务，事务管理器负责管理全局的事务状态和参与的资源，协同资源的一致提交回滚。\n\n- 两阶段提交\n\n  参考: [Two-phase Commit](https://www.jianshu.com/p/1aa944f44b7b)\n\n- BASE理论\n\n  BA(Basic Available) 基本可用, S(Soft) 柔性状态,允许短时间不同步,E(Eventually) 最终一致性\n\n- CAP定理\n\n  C(Consistency) 一致性, A(Availability) 可用性, P(Partition tolerance) 分区容错性. 分布式场景下只能同时满足两种. 常用的分布式实现: CP (满足一致性和分区容错性, 会存在短暂不可用状态), AP(满足可用性和分区容错性, 但不是强一致).\n\n参考文章: [分布式事务整理](https://www.cnblogs.com/crazymakercircle/p/14375424.html)\n\n","slug":"分布式概念","published":1,"updated":"2022-06-04T06:51:52.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zk001awuh87e3o1wgl","content":"<ul>\n<li><p>事务</p>\n<p>事务是由一组操作构成的可靠的独立的工作单元，事务具备ACID的特性，即原子性、一致性、隔离性和持久性。</p>\n</li>\n<li><p>本地事务</p>\n<p>事务由资源管理器本地管理时被称作本地事务。本地事务的优点就是支持严格的ACID特性，高效，可靠，状态可以只在资源管理器中维护，而且应用编程模型简单。但是本地事务不具备分布式事务的处理能力，隔离的最小单位受限于资源管理器。</p>\n</li>\n<li><p>分布式事务</p>\n<p>当事务由全局事务管理器进行全局管理时成为全局事务，事务管理器负责管理全局的事务状态和参与的资源，协同资源的一致提交回滚。</p>\n</li>\n<li><p>两阶段提交</p>\n<p>参考: <a href=\"https://www.jianshu.com/p/1aa944f44b7b\">Two-phase Commit</a></p>\n</li>\n<li><p>BASE理论</p>\n<p>BA(Basic Available) 基本可用, S(Soft) 柔性状态,允许短时间不同步,E(Eventually) 最终一致性</p>\n</li>\n<li><p>CAP定理</p>\n<p>C(Consistency) 一致性, A(Availability) 可用性, P(Partition tolerance) 分区容错性. 分布式场景下只能同时满足两种. 常用的分布式实现: CP (满足一致性和分区容错性, 会存在短暂不可用状态), AP(满足可用性和分区容错性, 但不是强一致).</p>\n</li>\n</ul>\n<p>参考文章: <a href=\"https://www.cnblogs.com/crazymakercircle/p/14375424.html\">分布式事务整理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>事务</p>\n<p>事务是由一组操作构成的可靠的独立的工作单元，事务具备ACID的特性，即原子性、一致性、隔离性和持久性。</p>\n</li>\n<li><p>本地事务</p>\n<p>事务由资源管理器本地管理时被称作本地事务。本地事务的优点就是支持严格的ACID特性，高效，可靠，状态可以只在资源管理器中维护，而且应用编程模型简单。但是本地事务不具备分布式事务的处理能力，隔离的最小单位受限于资源管理器。</p>\n</li>\n<li><p>分布式事务</p>\n<p>当事务由全局事务管理器进行全局管理时成为全局事务，事务管理器负责管理全局的事务状态和参与的资源，协同资源的一致提交回滚。</p>\n</li>\n<li><p>两阶段提交</p>\n<p>参考: <a href=\"https://www.jianshu.com/p/1aa944f44b7b\">Two-phase Commit</a></p>\n</li>\n<li><p>BASE理论</p>\n<p>BA(Basic Available) 基本可用, S(Soft) 柔性状态,允许短时间不同步,E(Eventually) 最终一致性</p>\n</li>\n<li><p>CAP定理</p>\n<p>C(Consistency) 一致性, A(Availability) 可用性, P(Partition tolerance) 分区容错性. 分布式场景下只能同时满足两种. 常用的分布式实现: CP (满足一致性和分区容错性, 会存在短暂不可用状态), AP(满足可用性和分区容错性, 但不是强一致).</p>\n</li>\n</ul>\n<p>参考文章: <a href=\"https://www.cnblogs.com/crazymakercircle/p/14375424.html\">分布式事务整理</a></p>\n"},{"title":"删除排序链表中的重复元素","date":"2022-06-03T06:48:54.000Z","_content":"\n[删除排序链表中的重复元素](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/)\n\n给定一个已排序的链表的头 `head` ， *删除所有重复的元素，使每个元素只出现一次* 。返回 *已排序的链表* 。\n\n![list1](list1.jpg)\n\n```\n输入：head = [1,1,2]\n输出：[1,2]\n```\n\n\n\n思路: 采用递归处理, 当前链表去重, 等于以当前节点作为根节点的子链表去重,再与当前节点去重选择最终返回的根节点\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head == null) {\n            return null;\n        }\n        ListNode next = head.next;\n        if(next == null) {\n            return head;\n        }\n        // 如果存在重复\n        if(head.val == next.val) {\n            // 去重子链表\n            next.next = deleteDuplicates(next.next);\n            // 如果去重后的子链表头与当前节点存在重复\n            if(next.next != null && next.next.val == next.val) {\n                return next.next;\n            }\n            return next;\n        }else {\n            head.next = deleteDuplicates(next);\n            return head;\n        }\n    }\n}\n```\n\n\n\n","source":"_posts/删除排序链表中的重复元素.md","raw":"---\ntitle: 删除排序链表中的重复元素\ndate: 2022-06-03 14:48:54\ntags:\n  - leetcode\n  - 算法\n  - 链表\n  - 递归\n---\n\n[删除排序链表中的重复元素](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/)\n\n给定一个已排序的链表的头 `head` ， *删除所有重复的元素，使每个元素只出现一次* 。返回 *已排序的链表* 。\n\n![list1](list1.jpg)\n\n```\n输入：head = [1,1,2]\n输出：[1,2]\n```\n\n\n\n思路: 采用递归处理, 当前链表去重, 等于以当前节点作为根节点的子链表去重,再与当前节点去重选择最终返回的根节点\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head == null) {\n            return null;\n        }\n        ListNode next = head.next;\n        if(next == null) {\n            return head;\n        }\n        // 如果存在重复\n        if(head.val == next.val) {\n            // 去重子链表\n            next.next = deleteDuplicates(next.next);\n            // 如果去重后的子链表头与当前节点存在重复\n            if(next.next != null && next.next.val == next.val) {\n                return next.next;\n            }\n            return next;\n        }else {\n            head.next = deleteDuplicates(next);\n            return head;\n        }\n    }\n}\n```\n\n\n\n","slug":"删除排序链表中的重复元素","published":1,"updated":"2022-06-03T06:52:29.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zl001dwuh81nd316fm","content":"<p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/\">删除排序链表中的重复元素</a></p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><img src=\"/2022/06/03/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/list1.jpg\" alt=\"list1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,1,2]</span><br><span class=\"line\">输出：[1,2]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 采用递归处理, 当前链表去重, 等于以当前节点作为根节点的子链表去重,再与当前节点去重选择最终返回的根节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在重复</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.val == next.val) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 去重子链表</span></span><br><span class=\"line\">            next.next = deleteDuplicates(next.next);</span><br><span class=\"line\">            <span class=\"comment\">// 如果去重后的子链表头与当前节点存在重复</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(next.next != <span class=\"literal\">null</span> &amp;&amp; next.next.val == next.val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head.next = deleteDuplicates(next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/\">删除排序链表中的重复元素</a></p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><img src=\"/2022/06/03/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/list1.jpg\" alt=\"list1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,1,2]</span><br><span class=\"line\">输出：[1,2]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 采用递归处理, 当前链表去重, 等于以当前节点作为根节点的子链表去重,再与当前节点去重选择最终返回的根节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在重复</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.val == next.val) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 去重子链表</span></span><br><span class=\"line\">            next.next = deleteDuplicates(next.next);</span><br><span class=\"line\">            <span class=\"comment\">// 如果去重后的子链表头与当前节点存在重复</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(next.next != <span class=\"literal\">null</span> &amp;&amp; next.next.val == next.val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head.next = deleteDuplicates(next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"在排序数组中查找元素的第一个和最后一个位置","date":"2022-06-03T04:21:57.000Z","_content":"\n[在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/)\n\n给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。\n\n如果数组中不存在目标值 target，返回 [-1, -1]。\n\n进阶：\n\n你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？\n\n```\n输入：nums = [5,7,7,8,8,10], target = 8\n输出：[3,4]\n```\n\n\n\n思路: 要求O(log n)时间复杂度. 采用二分查找即可. 先通过二分查找寻找target, 如果没有找到则返回`[-1, -1]`,否则根据找到的索引左右扩展知道不等于target为止. 返回左右拓展的最后位置即可\n\n\n\n代码:\n\n```java\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        // 寻找target索引\n        int pos = midSearch(nums, target, 0, nums.length-1);\n        // 找不到\n        if(pos == -1) {\n            return new int[]{-1, -1};\n        }\n        int left = pos;\n        int right = pos;\n        boolean leftBound = false;\n        boolean rightBound = false;\n        // 左右扩展\n        while(!leftBound || !rightBound) {\n            if(left >= 0 && nums[left] == target) {\n                left--;\n            } else {\n                leftBound = true;\n            }\n            if(right < nums.length && nums[right] == target) {\n                right++;\n            } else {\n                rightBound = true;\n            }\n        }\n        return new int[]{left+1, right-1};\n    }\n\n    // 二分查找\n    int midSearch(int[] nums, int target, int start, int end) {\n        if(start > end) {\n            return -1;\n        }\n        int mid = (end - start) / 2 + start;\n        if(nums[mid] == target) {\n            return mid;\n        } else if(nums[mid] < target) {\n            return midSearch(nums, target, mid+1, end);\n        } else{\n            return midSearch(nums, target, start, mid-1);\n        }\n        \n    }\n}\n```\n\n","source":"_posts/在排序数组中查找元素的第一个和最后一个位置.md","raw":"---\ntitle: 在排序数组中查找元素的第一个和最后一个位置\ndate: 2022-06-03 12:21:57\ntags:\n  - leetcode\n  - 算法\n  - 二分查找\n---\n\n[在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/)\n\n给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。\n\n如果数组中不存在目标值 target，返回 [-1, -1]。\n\n进阶：\n\n你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？\n\n```\n输入：nums = [5,7,7,8,8,10], target = 8\n输出：[3,4]\n```\n\n\n\n思路: 要求O(log n)时间复杂度. 采用二分查找即可. 先通过二分查找寻找target, 如果没有找到则返回`[-1, -1]`,否则根据找到的索引左右扩展知道不等于target为止. 返回左右拓展的最后位置即可\n\n\n\n代码:\n\n```java\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        // 寻找target索引\n        int pos = midSearch(nums, target, 0, nums.length-1);\n        // 找不到\n        if(pos == -1) {\n            return new int[]{-1, -1};\n        }\n        int left = pos;\n        int right = pos;\n        boolean leftBound = false;\n        boolean rightBound = false;\n        // 左右扩展\n        while(!leftBound || !rightBound) {\n            if(left >= 0 && nums[left] == target) {\n                left--;\n            } else {\n                leftBound = true;\n            }\n            if(right < nums.length && nums[right] == target) {\n                right++;\n            } else {\n                rightBound = true;\n            }\n        }\n        return new int[]{left+1, right-1};\n    }\n\n    // 二分查找\n    int midSearch(int[] nums, int target, int start, int end) {\n        if(start > end) {\n            return -1;\n        }\n        int mid = (end - start) / 2 + start;\n        if(nums[mid] == target) {\n            return mid;\n        } else if(nums[mid] < target) {\n            return midSearch(nums, target, mid+1, end);\n        } else{\n            return midSearch(nums, target, start, mid-1);\n        }\n        \n    }\n}\n```\n\n","slug":"在排序数组中查找元素的第一个和最后一个位置","published":1,"updated":"2022-06-03T04:26:14.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zm001fwuh872wrftta","content":"<p><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\">在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>\n<p>进阶：</p>\n<p>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出：[3,4]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 要求O(log n)时间复杂度. 采用二分查找即可. 先通过二分查找寻找target, 如果没有找到则返回<code>[-1, -1]</code>,否则根据找到的索引左右扩展知道不等于target为止. 返回左右拓展的最后位置即可</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] searchRange(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 寻找target索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> midSearch(nums, target, <span class=\"number\">0</span>, nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 找不到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> pos;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> pos;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">leftBound</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rightBound</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 左右扩展</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!leftBound || !rightBound) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left &gt;= <span class=\"number\">0</span> &amp;&amp; nums[left] == target) &#123;</span><br><span class=\"line\">                left--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                leftBound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right &lt; nums.length &amp;&amp; nums[right] == target) &#123;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                rightBound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;left+<span class=\"number\">1</span>, right-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 二分查找</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">midSearch</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start &gt; end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (end - start) / <span class=\"number\">2</span> + start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> midSearch(nums, target, mid+<span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> midSearch(nums, target, start, mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\">在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>\n<p>进阶：</p>\n<p>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出：[3,4]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 要求O(log n)时间复杂度. 采用二分查找即可. 先通过二分查找寻找target, 如果没有找到则返回<code>[-1, -1]</code>,否则根据找到的索引左右扩展知道不等于target为止. 返回左右拓展的最后位置即可</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] searchRange(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 寻找target索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> midSearch(nums, target, <span class=\"number\">0</span>, nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 找不到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> pos;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> pos;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">leftBound</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rightBound</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 左右扩展</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!leftBound || !rightBound) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left &gt;= <span class=\"number\">0</span> &amp;&amp; nums[left] == target) &#123;</span><br><span class=\"line\">                left--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                leftBound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right &lt; nums.length &amp;&amp; nums[right] == target) &#123;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                rightBound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;left+<span class=\"number\">1</span>, right-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 二分查找</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">midSearch</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start &gt; end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (end - start) / <span class=\"number\">2</span> + start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> midSearch(nums, target, mid+<span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> midSearch(nums, target, start, mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"基本计算器II","date":"2022-06-05T05:06:36.000Z","_content":"\n[基本计算器 II](https://leetcode.cn/problems/basic-calculator-ii/)\n\n给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。\n\n整数除法仅保留整数部分。\n\n你可以假设给定的表达式总是有效的。所有中间结果将在 [-231, 231 - 1] 的范围内。\n\n注意：不允许使用任何将字符串作为数学表达式计算的内置函数，比如 eval() 。\n\n```\n输入：s = \"3+2*2\"\n输出：7\n```\n\n思路: 维护一个操作符栈和操作数栈以及操作符优先级字典. 流程如下: 遇到数字入栈,遇到操作符,如果优先级小于已入栈的操作符, 计算之前大于该操作符的操作,并将计算结果入栈操作数栈. 然后入栈新操作符,重复以上操作. 最终返回操作符栈剩下的结果即可.\n\n代码:\n\n```java\nclass Solution {\n    public int calculate(String s) {\n        Stack<Integer> nums = new Stack();\n        Stack<Character> ops = new Stack();\n        StringBuilder sb = new StringBuilder();\n        Map<Character, Integer> pmap = new HashMap();\n        pmap.put('+', 1);\n        pmap.put('-', 1);\n        pmap.put('*', 2);\n        pmap.put('/', 2);\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == ' ') {\n                if(!sb.isEmpty()) {\n                    nums.push(Integer.parseInt(sb.toString()));\n                    sb = new StringBuilder();\n                }\n                continue;\n            }\n            if(pmap.containsKey(c)) {\n                if(!sb.isEmpty()) {\n                    nums.push(Integer.parseInt(sb.toString()));\n                    sb = new StringBuilder();\n                }\n                if(ops.isEmpty()) {\n                    ops.push(c);\n                }else {\n                    while(!ops.isEmpty() && pmap.get(ops.peek()) >= pmap.get(c)) {\n                        int v2 = nums.pop();\n                        int v1 = nums.pop();\n                        nums.push(calc(v1, v2, ops.pop()));   \n                    }\n                    ops.push(c);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if(!sb.isEmpty()) {\n            nums.push(Integer.parseInt(sb.toString()));\n        }\n        while(!ops.isEmpty()){\n            int v2 = nums.pop();\n            int v1 = nums.pop();\n            nums.push(calc(v1, v2, ops.pop()));\n        }\n        return nums.pop();\n    }\n\n    public int calc(int v1, int v2, char op) {\n        switch(op) {\n            case '+':\n                return v1 + v2;\n            case '-':\n                return v1 - v2;\n            case '*':\n                return v1 * v2;\n            case '/':\n                return v1 / v2;\n            default:\n                return 0;\n        }\n    }\n}\n```\n\n","source":"_posts/基本计算器II.md","raw":"---\ntitle: 基本计算器II\ndate: 2022-06-05 13:06:36\ntags:\n  - leetcode\n  - 算法\n  - stack\n---\n\n[基本计算器 II](https://leetcode.cn/problems/basic-calculator-ii/)\n\n给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。\n\n整数除法仅保留整数部分。\n\n你可以假设给定的表达式总是有效的。所有中间结果将在 [-231, 231 - 1] 的范围内。\n\n注意：不允许使用任何将字符串作为数学表达式计算的内置函数，比如 eval() 。\n\n```\n输入：s = \"3+2*2\"\n输出：7\n```\n\n思路: 维护一个操作符栈和操作数栈以及操作符优先级字典. 流程如下: 遇到数字入栈,遇到操作符,如果优先级小于已入栈的操作符, 计算之前大于该操作符的操作,并将计算结果入栈操作数栈. 然后入栈新操作符,重复以上操作. 最终返回操作符栈剩下的结果即可.\n\n代码:\n\n```java\nclass Solution {\n    public int calculate(String s) {\n        Stack<Integer> nums = new Stack();\n        Stack<Character> ops = new Stack();\n        StringBuilder sb = new StringBuilder();\n        Map<Character, Integer> pmap = new HashMap();\n        pmap.put('+', 1);\n        pmap.put('-', 1);\n        pmap.put('*', 2);\n        pmap.put('/', 2);\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == ' ') {\n                if(!sb.isEmpty()) {\n                    nums.push(Integer.parseInt(sb.toString()));\n                    sb = new StringBuilder();\n                }\n                continue;\n            }\n            if(pmap.containsKey(c)) {\n                if(!sb.isEmpty()) {\n                    nums.push(Integer.parseInt(sb.toString()));\n                    sb = new StringBuilder();\n                }\n                if(ops.isEmpty()) {\n                    ops.push(c);\n                }else {\n                    while(!ops.isEmpty() && pmap.get(ops.peek()) >= pmap.get(c)) {\n                        int v2 = nums.pop();\n                        int v1 = nums.pop();\n                        nums.push(calc(v1, v2, ops.pop()));   \n                    }\n                    ops.push(c);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if(!sb.isEmpty()) {\n            nums.push(Integer.parseInt(sb.toString()));\n        }\n        while(!ops.isEmpty()){\n            int v2 = nums.pop();\n            int v1 = nums.pop();\n            nums.push(calc(v1, v2, ops.pop()));\n        }\n        return nums.pop();\n    }\n\n    public int calc(int v1, int v2, char op) {\n        switch(op) {\n            case '+':\n                return v1 + v2;\n            case '-':\n                return v1 - v2;\n            case '*':\n                return v1 * v2;\n            case '/':\n                return v1 / v2;\n            default:\n                return 0;\n        }\n    }\n}\n```\n\n","slug":"基本计算器II","published":1,"updated":"2022-06-05T05:11:44.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zn001hwuh8fjbxasp6","content":"<p><a href=\"https://leetcode.cn/problems/basic-calculator-ii/\">基本计算器 II</a></p>\n<p>给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。</p>\n<p>整数除法仅保留整数部分。</p>\n<p>你可以假设给定的表达式总是有效的。所有中间结果将在 [-231, 231 - 1] 的范围内。</p>\n<p>注意：不允许使用任何将字符串作为数学表达式计算的内置函数，比如 eval() 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;3+2*2&quot;</span><br><span class=\"line\">输出：7</span><br></pre></td></tr></table></figure>\n\n<p>思路: 维护一个操作符栈和操作数栈以及操作符优先级字典. 流程如下: 遇到数字入栈,遇到操作符,如果优先级小于已入栈的操作符, 计算之前大于该操作符的操作,并将计算结果入栈操作数栈. 然后入栈新操作符,重复以上操作. 最终返回操作符栈剩下的结果即可.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">calculate</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        Stack&lt;Integer&gt; nums = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        Stack&lt;Character&gt; ops = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; pmap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        pmap.put(<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        pmap.put(<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        pmap.put(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        pmap.put(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!sb.isEmpty()) &#123;</span><br><span class=\"line\">                    nums.push(Integer.parseInt(sb.toString()));</span><br><span class=\"line\">                    sb = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pmap.containsKey(c)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!sb.isEmpty()) &#123;</span><br><span class=\"line\">                    nums.push(Integer.parseInt(sb.toString()));</span><br><span class=\"line\">                    sb = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ops.isEmpty()) &#123;</span><br><span class=\"line\">                    ops.push(c);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(!ops.isEmpty() &amp;&amp; pmap.get(ops.peek()) &gt;= pmap.get(c)) &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span> nums.pop();</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> nums.pop();</span><br><span class=\"line\">                        nums.push(calc(v1, v2, ops.pop()));   </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    ops.push(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sb.append(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!sb.isEmpty()) &#123;</span><br><span class=\"line\">            nums.push(Integer.parseInt(sb.toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!ops.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span> nums.pop();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> nums.pop();</span><br><span class=\"line\">            nums.push(calc(v1, v2, ops.pop()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">calc</span><span class=\"params\">(<span class=\"type\">int</span> v1, <span class=\"type\">int</span> v2, <span class=\"type\">char</span> op)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(op) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1 + v2;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1 - v2;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1 * v2;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1 / v2;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/basic-calculator-ii/\">基本计算器 II</a></p>\n<p>给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。</p>\n<p>整数除法仅保留整数部分。</p>\n<p>你可以假设给定的表达式总是有效的。所有中间结果将在 [-231, 231 - 1] 的范围内。</p>\n<p>注意：不允许使用任何将字符串作为数学表达式计算的内置函数，比如 eval() 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;3+2*2&quot;</span><br><span class=\"line\">输出：7</span><br></pre></td></tr></table></figure>\n\n<p>思路: 维护一个操作符栈和操作数栈以及操作符优先级字典. 流程如下: 遇到数字入栈,遇到操作符,如果优先级小于已入栈的操作符, 计算之前大于该操作符的操作,并将计算结果入栈操作数栈. 然后入栈新操作符,重复以上操作. 最终返回操作符栈剩下的结果即可.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">calculate</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        Stack&lt;Integer&gt; nums = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        Stack&lt;Character&gt; ops = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; pmap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        pmap.put(<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        pmap.put(<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        pmap.put(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        pmap.put(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!sb.isEmpty()) &#123;</span><br><span class=\"line\">                    nums.push(Integer.parseInt(sb.toString()));</span><br><span class=\"line\">                    sb = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pmap.containsKey(c)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!sb.isEmpty()) &#123;</span><br><span class=\"line\">                    nums.push(Integer.parseInt(sb.toString()));</span><br><span class=\"line\">                    sb = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ops.isEmpty()) &#123;</span><br><span class=\"line\">                    ops.push(c);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(!ops.isEmpty() &amp;&amp; pmap.get(ops.peek()) &gt;= pmap.get(c)) &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span> nums.pop();</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> nums.pop();</span><br><span class=\"line\">                        nums.push(calc(v1, v2, ops.pop()));   </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    ops.push(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sb.append(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!sb.isEmpty()) &#123;</span><br><span class=\"line\">            nums.push(Integer.parseInt(sb.toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!ops.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span> nums.pop();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> nums.pop();</span><br><span class=\"line\">            nums.push(calc(v1, v2, ops.pop()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">calc</span><span class=\"params\">(<span class=\"type\">int</span> v1, <span class=\"type\">int</span> v2, <span class=\"type\">char</span> op)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(op) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1 + v2;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1 - v2;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1 * v2;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1 / v2;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"基础数据结构","date":"2022-06-05T03:32:08.000Z","_content":"\n1. 数组\n\n2. 链表\n\n   优点:\n\n   缺点: 节点内存不连续, 无法很好的利用CPU缓存. 同时链表需要维护指针带来的内存开销\n","source":"_posts/基础数据结构.md","raw":"---\ntitle: 基础数据结构\ndate: 2022-06-05 11:32:08\ntags:\n  - 数据结构\n---\n\n1. 数组\n\n2. 链表\n\n   优点:\n\n   缺点: 节点内存不连续, 无法很好的利用CPU缓存. 同时链表需要维护指针带来的内存开销\n","slug":"基础数据结构","published":1,"updated":"2022-06-05T03:33:53.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zn001iwuh88pp2824x","content":"<ol>\n<li><p>数组</p>\n</li>\n<li><p>链表</p>\n<p>优点:</p>\n<p>缺点: 节点内存不连续, 无法很好的利用CPU缓存. 同时链表需要维护指针带来的内存开销</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>数组</p>\n</li>\n<li><p>链表</p>\n<p>优点:</p>\n<p>缺点: 节点内存不连续, 无法很好的利用CPU缓存. 同时链表需要维护指针带来的内存开销</p>\n</li>\n</ol>\n"},{"title":"复制带随机指针的链表","date":"2022-06-07T01:04:43.000Z","_content":"\n#### [复制带随机指针的链表](https://leetcode.cn/problems/copy-list-with-random-pointer/)\n\n给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。\n\n构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。\n\n例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --> Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --> y 。\n\n返回复制链表的头节点。\n\n用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：\n\nval：一个表示 Node.val 的整数。\nrandom_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。\n你的代码 只 接受原链表的头节点 head 作为传入参数。\n\n\n\n```\n输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]\n```\n\n\n\n思路：首先遍历原链表，并在遍历过程中创建复制节点，并且维护一个新旧节点的映射关系。然后第二次遍历时，根据映射关系，找出每一个random节点在新链表的节点并指向它。\n\n\n\n代码：\n\n```java\nclass Solution {\n    public Node copyRandomList(Node head) {\n        if(head == null) {\n            return head;\n        }\n        Map<Node, Node> nmap = new HashMap();\n        Node bak = head;\n        Node node = new Node(head.val);\n        Node nodebak = node;\n        Node ret = node;\n        nmap.put(head, node);\n        head = head.next;\n        while(head != null) {\n            Node next = new Node(head.val);\n            nmap.put(head, next);\n            node.next = next;\n            node = node.next;\n            head = head.next;\n        }\n        while(bak!=null){\n            Node radom = bak.random;\n            Node rnode = nmap.get(radom);\n            nodebak.random = rnode;\n            nodebak = nodebak.next;\n            bak = bak.next;\n        }\n        return ret;\n    }\n}\n```\n\n","source":"_posts/复制带随机指针的链表.md","raw":"---\ntitle: 复制带随机指针的链表\ndate: 2022-06-07 09:04:43\ntags:\n  - leetcode\n  - 算法\n---\n\n#### [复制带随机指针的链表](https://leetcode.cn/problems/copy-list-with-random-pointer/)\n\n给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。\n\n构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。\n\n例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --> Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --> y 。\n\n返回复制链表的头节点。\n\n用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：\n\nval：一个表示 Node.val 的整数。\nrandom_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。\n你的代码 只 接受原链表的头节点 head 作为传入参数。\n\n\n\n```\n输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]\n```\n\n\n\n思路：首先遍历原链表，并在遍历过程中创建复制节点，并且维护一个新旧节点的映射关系。然后第二次遍历时，根据映射关系，找出每一个random节点在新链表的节点并指向它。\n\n\n\n代码：\n\n```java\nclass Solution {\n    public Node copyRandomList(Node head) {\n        if(head == null) {\n            return head;\n        }\n        Map<Node, Node> nmap = new HashMap();\n        Node bak = head;\n        Node node = new Node(head.val);\n        Node nodebak = node;\n        Node ret = node;\n        nmap.put(head, node);\n        head = head.next;\n        while(head != null) {\n            Node next = new Node(head.val);\n            nmap.put(head, next);\n            node.next = next;\n            node = node.next;\n            head = head.next;\n        }\n        while(bak!=null){\n            Node radom = bak.random;\n            Node rnode = nmap.get(radom);\n            nodebak.random = rnode;\n            nodebak = nodebak.next;\n            bak = bak.next;\n        }\n        return ret;\n    }\n}\n```\n\n","slug":"复制带随机指针的链表","published":1,"updated":"2022-06-07T01:05:16.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zo001kwuh8ddzz038g","content":"<h4 id=\"复制带随机指针的链表\"><a href=\"#复制带随机指针的链表\" class=\"headerlink\" title=\"复制带随机指针的链表\"></a><a href=\"https://leetcode.cn/problems/copy-list-with-random-pointer/\">复制带随机指针的链表</a></h4><p>给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。</p>\n<p>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。</p>\n<p>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random –&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random –&gt; y 。</p>\n<p>返回复制链表的头节点。</p>\n<p>用一个由 n 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 [val, random_index] 表示：</p>\n<p>val：一个表示 Node.val 的整数。<br>random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。<br>你的代码 只 接受原链表的头节点 head 作为传入参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class=\"line\">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：首先遍历原链表，并在遍历过程中创建复制节点，并且维护一个新旧节点的映射关系。然后第二次遍历时，根据映射关系，找出每一个random节点在新链表的节点并指向它。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">copyRandomList</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Map&lt;Node, Node&gt; nmap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">bak</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(head.val);</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">nodebak</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">        nmap.put(head, node);</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(head.val);</span><br><span class=\"line\">            nmap.put(head, next);</span><br><span class=\"line\">            node.next = next;</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(bak!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">radom</span> <span class=\"operator\">=</span> bak.random;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">rnode</span> <span class=\"operator\">=</span> nmap.get(radom);</span><br><span class=\"line\">            nodebak.random = rnode;</span><br><span class=\"line\">            nodebak = nodebak.next;</span><br><span class=\"line\">            bak = bak.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"复制带随机指针的链表\"><a href=\"#复制带随机指针的链表\" class=\"headerlink\" title=\"复制带随机指针的链表\"></a><a href=\"https://leetcode.cn/problems/copy-list-with-random-pointer/\">复制带随机指针的链表</a></h4><p>给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。</p>\n<p>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。</p>\n<p>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random –&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random –&gt; y 。</p>\n<p>返回复制链表的头节点。</p>\n<p>用一个由 n 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 [val, random_index] 表示：</p>\n<p>val：一个表示 Node.val 的整数。<br>random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。<br>你的代码 只 接受原链表的头节点 head 作为传入参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class=\"line\">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：首先遍历原链表，并在遍历过程中创建复制节点，并且维护一个新旧节点的映射关系。然后第二次遍历时，根据映射关系，找出每一个random节点在新链表的节点并指向它。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">copyRandomList</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Map&lt;Node, Node&gt; nmap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">bak</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(head.val);</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">nodebak</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">        nmap.put(head, node);</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(head.val);</span><br><span class=\"line\">            nmap.put(head, next);</span><br><span class=\"line\">            node.next = next;</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(bak!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">radom</span> <span class=\"operator\">=</span> bak.random;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">rnode</span> <span class=\"operator\">=</span> nmap.get(radom);</span><br><span class=\"line\">            nodebak.random = rnode;</span><br><span class=\"line\">            nodebak = nodebak.next;</span><br><span class=\"line\">            bak = bak.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"字符串解码","date":"2022-06-04T02:05:59.000Z","_content":"\n[字符串解码](https://leetcode.cn/problems/decode-string/)\n\n给定一个经过编码的字符串，返回它解码后的字符串。\n\n编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。\n\n你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。\n\n此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。\n\n```\n输入：s = \"3[a]2[bc]\"\n输出：\"aaabcbc\"\n```\n\n思路:如果遇到数字,直接累计`count`,遇到字母.结果集直接append, 扫描字符串如果遇到`'['`则寻找其对应的结束符号`']'`,递归计算范围内的字符串,然后根据count和得到的字符串多次append.\n\n代码:\n\n```java\nclass Solution {\n    public String decodeString(String s) {\n        if(s == null || s.isEmpty()){\n            return \"\";\n        }\n        int length = s.length();\n        return calc(s, 0 , length - 1);\n    }\n\t\t// 寻找匹配的结束符号索引\n    public int findEnd(String s, int start) {\n        Stack stack = new Stack();\n        for(int i = start; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == '[') {\n                stack.push(c);\n            }else if(c == ']'){\n                stack.pop();\n                if(stack.isEmpty()) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n    \n    public String calc(String str, int start, int end) {\n        StringBuilder ret = new StringBuilder();\n        StringBuilder count = new StringBuilder();\n        int i = start;\n        while(i <= end){\n            char c = str.charAt(i);\n            if(c >= '0' && c <= '9') {\n                count.append(c);\n            } else if(c == '[') {\n                int tmp = findEnd(str, i);\n                // 递归计算子串\n                String ss = calc(str,i + 1,tmp - 1);\n                if(!count.isEmpty()){\n                    int num = Integer.parseInt(count.toString());\n                    for(int k = 0; k < num; k++){\n                        ret.append(ss);\n                    }\n                }\n                count = new StringBuilder();\n                i = tmp + 1;\n                continue;\n            } else {\n                ret.append(c);\n            }\n            i++;\n        }\n        return ret.toString();\n    }\n}\n```\n\n","source":"_posts/字符串解码.md","raw":"---\ntitle: 字符串解码\ndate: 2022-06-04 10:05:59\ntags:\n  - leetcode\n  - 算法\n---\n\n[字符串解码](https://leetcode.cn/problems/decode-string/)\n\n给定一个经过编码的字符串，返回它解码后的字符串。\n\n编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。\n\n你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。\n\n此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。\n\n```\n输入：s = \"3[a]2[bc]\"\n输出：\"aaabcbc\"\n```\n\n思路:如果遇到数字,直接累计`count`,遇到字母.结果集直接append, 扫描字符串如果遇到`'['`则寻找其对应的结束符号`']'`,递归计算范围内的字符串,然后根据count和得到的字符串多次append.\n\n代码:\n\n```java\nclass Solution {\n    public String decodeString(String s) {\n        if(s == null || s.isEmpty()){\n            return \"\";\n        }\n        int length = s.length();\n        return calc(s, 0 , length - 1);\n    }\n\t\t// 寻找匹配的结束符号索引\n    public int findEnd(String s, int start) {\n        Stack stack = new Stack();\n        for(int i = start; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == '[') {\n                stack.push(c);\n            }else if(c == ']'){\n                stack.pop();\n                if(stack.isEmpty()) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n    \n    public String calc(String str, int start, int end) {\n        StringBuilder ret = new StringBuilder();\n        StringBuilder count = new StringBuilder();\n        int i = start;\n        while(i <= end){\n            char c = str.charAt(i);\n            if(c >= '0' && c <= '9') {\n                count.append(c);\n            } else if(c == '[') {\n                int tmp = findEnd(str, i);\n                // 递归计算子串\n                String ss = calc(str,i + 1,tmp - 1);\n                if(!count.isEmpty()){\n                    int num = Integer.parseInt(count.toString());\n                    for(int k = 0; k < num; k++){\n                        ret.append(ss);\n                    }\n                }\n                count = new StringBuilder();\n                i = tmp + 1;\n                continue;\n            } else {\n                ret.append(c);\n            }\n            i++;\n        }\n        return ret.toString();\n    }\n}\n```\n\n","slug":"字符串解码","published":1,"updated":"2022-06-04T03:10:51.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zp001mwuh886stamp7","content":"<p><a href=\"https://leetcode.cn/problems/decode-string/\">字符串解码</a></p>\n<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n<p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;3[a]2[bc]&quot;</span><br><span class=\"line\">输出：&quot;aaabcbc&quot;</span><br></pre></td></tr></table></figure>\n\n<p>思路:如果遇到数字,直接累计<code>count</code>,遇到字母.结果集直接append, 扫描字符串如果遇到<code>&#39;[&#39;</code>则寻找其对应的结束符号<code>&#39;]&#39;</code>,递归计算范围内的字符串,然后根据count和得到的字符串多次append.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">decodeString</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"literal\">null</span> || s.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> calc(s, <span class=\"number\">0</span> , length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 寻找匹配的结束符号索引</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findEnd</span><span class=\"params\">(String s, <span class=\"type\">int</span> start)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Stack</span> <span class=\"variable\">stack</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">                stack.push(c);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;]&#x27;</span>)&#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stack.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">calc</span><span class=\"params\">(String str, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= end)&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> str.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                count.append(c);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> findEnd(str, i);</span><br><span class=\"line\">                <span class=\"comment\">// 递归计算子串</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> calc(str,i + <span class=\"number\">1</span>,tmp - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!count.isEmpty())&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(count.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; num; k++)&#123;</span><br><span class=\"line\">                        ret.append(ss);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                count = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                i = tmp + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret.append(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/decode-string/\">字符串解码</a></p>\n<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n<p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;3[a]2[bc]&quot;</span><br><span class=\"line\">输出：&quot;aaabcbc&quot;</span><br></pre></td></tr></table></figure>\n\n<p>思路:如果遇到数字,直接累计<code>count</code>,遇到字母.结果集直接append, 扫描字符串如果遇到<code>&#39;[&#39;</code>则寻找其对应的结束符号<code>&#39;]&#39;</code>,递归计算范围内的字符串,然后根据count和得到的字符串多次append.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">decodeString</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"literal\">null</span> || s.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> calc(s, <span class=\"number\">0</span> , length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 寻找匹配的结束符号索引</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findEnd</span><span class=\"params\">(String s, <span class=\"type\">int</span> start)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Stack</span> <span class=\"variable\">stack</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">                stack.push(c);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;]&#x27;</span>)&#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stack.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">calc</span><span class=\"params\">(String str, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= end)&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> str.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                count.append(c);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> findEnd(str, i);</span><br><span class=\"line\">                <span class=\"comment\">// 递归计算子串</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> calc(str,i + <span class=\"number\">1</span>,tmp - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!count.isEmpty())&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(count.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; num; k++)&#123;</span><br><span class=\"line\">                        ret.append(ss);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                count = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                i = tmp + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret.append(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"岛屿的最大面积","date":"2022-06-03T13:00:05.000Z","_content":"\n[岛屿的最大面积](https://leetcode.cn/problems/max-area-of-island/)\n\n给你一个大小为 m x n 的二进制矩阵 grid 。\n\n岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。\n\n岛屿的面积是岛上值为 1 的单元格的数目。\n\n计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。\n\n![maxarea1-grid](maxarea1-grid.jpg)\n\n```\n输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n输出：6\n解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。\n```\n\n思路: 遍历二维数组,找到节点为1(即陆地)的位置,然后上下左右递归寻找. 对于寻找到的陆地,标记原数组位置值为2(用2来表示已访问过的位置,防止死循环)\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    int height = 0;\n    int width = 0;\n    public int maxAreaOfIsland(int[][] grid) {\n        height = grid.length;\n        width = grid[0].length;\n\n        for(int i = 0; i < height; i++) {\n            for(int j = 0; j < width; j++) {\n                // 遍历每一个节点更新最值\n                max = Math.max(max, visit(grid, i, j, 0));\n            }\n        }\n        return max;\n    }\n\n    public int visit(int[][] grid, int i, int j, int size) {\n        if(i < 0 || i >= height || j<0 || j >= width){\n            return size;\n        }\n        int curr = size;\n        if(grid[i][j] == 1) {\n            // 访问过的节点标记为已访问\n            grid[i][j] = 2;\n            curr++;\n            // 上下左右遍历\n            curr =visit(grid, i+1, j, curr);\n            curr = visit(grid, i, j+1, curr);\n            curr = visit(grid, i-1, j, curr);\n            curr = visit(grid, i, j-1, curr);\n            return curr;\n        }else{\n            return curr;\n        }\n\n    }\n}\n```\n\n","source":"_posts/岛屿的最大面积.md","raw":"---\ntitle: 岛屿的最大面积\ndate: 2022-06-03 21:00:05\ntags:\n  - leetcode\n  - 算法\n---\n\n[岛屿的最大面积](https://leetcode.cn/problems/max-area-of-island/)\n\n给你一个大小为 m x n 的二进制矩阵 grid 。\n\n岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。\n\n岛屿的面积是岛上值为 1 的单元格的数目。\n\n计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。\n\n![maxarea1-grid](maxarea1-grid.jpg)\n\n```\n输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n输出：6\n解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。\n```\n\n思路: 遍历二维数组,找到节点为1(即陆地)的位置,然后上下左右递归寻找. 对于寻找到的陆地,标记原数组位置值为2(用2来表示已访问过的位置,防止死循环)\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    int height = 0;\n    int width = 0;\n    public int maxAreaOfIsland(int[][] grid) {\n        height = grid.length;\n        width = grid[0].length;\n\n        for(int i = 0; i < height; i++) {\n            for(int j = 0; j < width; j++) {\n                // 遍历每一个节点更新最值\n                max = Math.max(max, visit(grid, i, j, 0));\n            }\n        }\n        return max;\n    }\n\n    public int visit(int[][] grid, int i, int j, int size) {\n        if(i < 0 || i >= height || j<0 || j >= width){\n            return size;\n        }\n        int curr = size;\n        if(grid[i][j] == 1) {\n            // 访问过的节点标记为已访问\n            grid[i][j] = 2;\n            curr++;\n            // 上下左右遍历\n            curr =visit(grid, i+1, j, curr);\n            curr = visit(grid, i, j+1, curr);\n            curr = visit(grid, i-1, j, curr);\n            curr = visit(grid, i, j-1, curr);\n            return curr;\n        }else{\n            return curr;\n        }\n\n    }\n}\n```\n\n","slug":"岛屿的最大面积","published":1,"updated":"2022-06-03T13:04:01.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zp001pwuh81n790f3i","content":"<p><a href=\"https://leetcode.cn/problems/max-area-of-island/\">岛屿的最大面积</a></p>\n<p>给你一个大小为 m x n 的二进制矩阵 grid 。</p>\n<p>岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p>\n<p>岛屿的面积是岛上值为 1 的单元格的数目。</p>\n<p>计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。</p>\n<p><img src=\"/2022/06/03/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/maxarea1-grid.jpg\" alt=\"maxarea1-grid\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。</span><br></pre></td></tr></table></figure>\n\n<p>思路: 遍历二维数组,找到节点为1(即陆地)的位置,然后上下左右递归寻找. 对于寻找到的陆地,标记原数组位置值为2(用2来表示已访问过的位置,防止死循环)</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        height = grid.length;</span><br><span class=\"line\">        width = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; height; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; width; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历每一个节点更新最值</span></span><br><span class=\"line\">                max = Math.max(max, visit(grid, i, j, <span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">visit</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= height || j&lt;<span class=\"number\">0</span> || j &gt;= width)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 访问过的节点标记为已访问</span></span><br><span class=\"line\">            grid[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            curr++;</span><br><span class=\"line\">            <span class=\"comment\">// 上下左右遍历</span></span><br><span class=\"line\">            curr =visit(grid, i+<span class=\"number\">1</span>, j, curr);</span><br><span class=\"line\">            curr = visit(grid, i, j+<span class=\"number\">1</span>, curr);</span><br><span class=\"line\">            curr = visit(grid, i-<span class=\"number\">1</span>, j, curr);</span><br><span class=\"line\">            curr = visit(grid, i, j-<span class=\"number\">1</span>, curr);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/max-area-of-island/\">岛屿的最大面积</a></p>\n<p>给你一个大小为 m x n 的二进制矩阵 grid 。</p>\n<p>岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p>\n<p>岛屿的面积是岛上值为 1 的单元格的数目。</p>\n<p>计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。</p>\n<p><img src=\"/2022/06/03/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/maxarea1-grid.jpg\" alt=\"maxarea1-grid\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。</span><br></pre></td></tr></table></figure>\n\n<p>思路: 遍历二维数组,找到节点为1(即陆地)的位置,然后上下左右递归寻找. 对于寻找到的陆地,标记原数组位置值为2(用2来表示已访问过的位置,防止死循环)</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        height = grid.length;</span><br><span class=\"line\">        width = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; height; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; width; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历每一个节点更新最值</span></span><br><span class=\"line\">                max = Math.max(max, visit(grid, i, j, <span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">visit</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= height || j&lt;<span class=\"number\">0</span> || j &gt;= width)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 访问过的节点标记为已访问</span></span><br><span class=\"line\">            grid[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            curr++;</span><br><span class=\"line\">            <span class=\"comment\">// 上下左右遍历</span></span><br><span class=\"line\">            curr =visit(grid, i+<span class=\"number\">1</span>, j, curr);</span><br><span class=\"line\">            curr = visit(grid, i, j+<span class=\"number\">1</span>, curr);</span><br><span class=\"line\">            curr = visit(grid, i-<span class=\"number\">1</span>, j, curr);</span><br><span class=\"line\">            curr = visit(grid, i, j-<span class=\"number\">1</span>, curr);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"打家劫舍","date":"2022-06-05T07:38:58.000Z","_content":"\n[打家劫舍](https://leetcode.cn/problems/house-robber/)\n\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\n\n```\n输入：[1,2,3,1]\n输出：4\n解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n思路1: 递归实现,以任一个房屋开始,对于下一个不触发警报的房屋进行决策:是否偷他?! 然后对于不同的状况继续进行偷取. 在每一次偷取成功后就尝试更新最大偷盗金额.\n\n```java\nclass Solution {\n    int max = 0;\n    public int rob(int[] nums) {\n        rob(nums, 0, 0, null);\n        return max;\n    }\n\n    /**\n     * home 当前偷到哪一个房子了\n     * money 当前偷了多少钱了\n     * last 最后一个偷的房间\n     */\n    public void rob(int[] nums, int home, int money, Integer last) {\n        max = Math.max(max, money);\n        if(home >= nums.length) {\n            return;\n        }\n        for(int i = home; i < nums.length; i++) {\n            if(last == null) {\n                rob(nums, i, nums[i] + money, i);\n            } else {\n                // 确认不会触发报警\n                if(i > last + 1) {\n                    // 偷,然后继续下一个房间\n                    rob(nums, i, nums[i] + money, i);\n                }\n            }\n            if(last == null) {\n                rob(nums, i+1, money, i+1);\n            } else {\n                if(i > last + 1) {\n                    // 不偷,继续下一个房间\n                    rob(nums, i + 1, money, i + 1);\n                }\n\n            }\n        }\n    }\n}\n```\n\n思路2: 动态规划, 定义dp数组, dp[i] 代表到第i位最大的金额,存在状态转移关系:\n\n```\ndp[i] = nums[i] i == 0\ndp[i] = max(nums[i], dp[i-1], dp[i-1]) i > 0, i > 1\n```\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    public int rob(int[] nums) {\n        int length = nums.length;\n        int[] dp = new int[length];\n        for(int i = 0; i < length; i++) {\n            if(i == 0) {\n                dp[i] = nums[i];\n            } else {\n                int last = i - 2;\n                int last2 = i - 1;\n                if(last2 >= 0) {\n                    dp[i] = Math.max(dp[i], dp[i - 1]);\n                }\n                if(last >= 0) {\n                    dp[i] = Math.max(dp[last] + nums[i], dp[i]);\n                } \n                dp[i] = Math.max(dp[i], nums[i]);\n                \n            }\n        }\n        return dp[length - 1];\n    }\n}\n```\n\n\n\n\n\n","source":"_posts/打家劫舍.md","raw":"---\ntitle: 打家劫舍\ndate: 2022-06-05 15:38:58\ntags:\n  - leetcode\n  - 算法\n  - 递归\n  - dp\n---\n\n[打家劫舍](https://leetcode.cn/problems/house-robber/)\n\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\n\n```\n输入：[1,2,3,1]\n输出：4\n解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n思路1: 递归实现,以任一个房屋开始,对于下一个不触发警报的房屋进行决策:是否偷他?! 然后对于不同的状况继续进行偷取. 在每一次偷取成功后就尝试更新最大偷盗金额.\n\n```java\nclass Solution {\n    int max = 0;\n    public int rob(int[] nums) {\n        rob(nums, 0, 0, null);\n        return max;\n    }\n\n    /**\n     * home 当前偷到哪一个房子了\n     * money 当前偷了多少钱了\n     * last 最后一个偷的房间\n     */\n    public void rob(int[] nums, int home, int money, Integer last) {\n        max = Math.max(max, money);\n        if(home >= nums.length) {\n            return;\n        }\n        for(int i = home; i < nums.length; i++) {\n            if(last == null) {\n                rob(nums, i, nums[i] + money, i);\n            } else {\n                // 确认不会触发报警\n                if(i > last + 1) {\n                    // 偷,然后继续下一个房间\n                    rob(nums, i, nums[i] + money, i);\n                }\n            }\n            if(last == null) {\n                rob(nums, i+1, money, i+1);\n            } else {\n                if(i > last + 1) {\n                    // 不偷,继续下一个房间\n                    rob(nums, i + 1, money, i + 1);\n                }\n\n            }\n        }\n    }\n}\n```\n\n思路2: 动态规划, 定义dp数组, dp[i] 代表到第i位最大的金额,存在状态转移关系:\n\n```\ndp[i] = nums[i] i == 0\ndp[i] = max(nums[i], dp[i-1], dp[i-1]) i > 0, i > 1\n```\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    public int rob(int[] nums) {\n        int length = nums.length;\n        int[] dp = new int[length];\n        for(int i = 0; i < length; i++) {\n            if(i == 0) {\n                dp[i] = nums[i];\n            } else {\n                int last = i - 2;\n                int last2 = i - 1;\n                if(last2 >= 0) {\n                    dp[i] = Math.max(dp[i], dp[i - 1]);\n                }\n                if(last >= 0) {\n                    dp[i] = Math.max(dp[last] + nums[i], dp[i]);\n                } \n                dp[i] = Math.max(dp[i], nums[i]);\n                \n            }\n        }\n        return dp[length - 1];\n    }\n}\n```\n\n\n\n\n\n","slug":"打家劫舍","published":1,"updated":"2022-06-05T08:17:32.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zq001qwuh8dolyhz39","content":"<p><a href=\"https://leetcode.cn/problems/house-robber/\">打家劫舍</a></p>\n<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[1,2,3,1]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class=\"line\">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>\n\n<p>思路1: 递归实现,以任一个房屋开始,对于下一个不触发警报的房屋进行决策:是否偷他?! 然后对于不同的状况继续进行偷取. 在每一次偷取成功后就尝试更新最大偷盗金额.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        rob(nums, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * home 当前偷到哪一个房子了</span></span><br><span class=\"line\"><span class=\"comment\">     * money 当前偷了多少钱了</span></span><br><span class=\"line\"><span class=\"comment\">     * last 最后一个偷的房间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> home, <span class=\"type\">int</span> money, Integer last)</span> &#123;</span><br><span class=\"line\">        max = Math.max(max, money);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(home &gt;= nums.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> home; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(last == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                rob(nums, i, nums[i] + money, i);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 确认不会触发报警</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &gt; last + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 偷,然后继续下一个房间</span></span><br><span class=\"line\">                    rob(nums, i, nums[i] + money, i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(last == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                rob(nums, i+<span class=\"number\">1</span>, money, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &gt; last + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 不偷,继续下一个房间</span></span><br><span class=\"line\">                    rob(nums, i + <span class=\"number\">1</span>, money, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>思路2: 动态规划, 定义dp数组, dp[i] 代表到第i位最大的金额,存在状态转移关系:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i] = nums[i] i == 0</span><br><span class=\"line\">dp[i] = max(nums[i], dp[i-1], dp[i-1]) i &gt; 0, i &gt; 1</span><br></pre></td></tr></table></figure>\n\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[i] = nums[i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">last</span> <span class=\"operator\">=</span> i - <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">last2</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(last2 &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[i] = Math.max(dp[i], dp[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(last &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[i] = Math.max(dp[last] + nums[i], dp[i]);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                dp[i] = Math.max(dp[i], nums[i]);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/house-robber/\">打家劫舍</a></p>\n<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[1,2,3,1]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class=\"line\">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>\n\n<p>思路1: 递归实现,以任一个房屋开始,对于下一个不触发警报的房屋进行决策:是否偷他?! 然后对于不同的状况继续进行偷取. 在每一次偷取成功后就尝试更新最大偷盗金额.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        rob(nums, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * home 当前偷到哪一个房子了</span></span><br><span class=\"line\"><span class=\"comment\">     * money 当前偷了多少钱了</span></span><br><span class=\"line\"><span class=\"comment\">     * last 最后一个偷的房间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> home, <span class=\"type\">int</span> money, Integer last)</span> &#123;</span><br><span class=\"line\">        max = Math.max(max, money);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(home &gt;= nums.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> home; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(last == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                rob(nums, i, nums[i] + money, i);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 确认不会触发报警</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &gt; last + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 偷,然后继续下一个房间</span></span><br><span class=\"line\">                    rob(nums, i, nums[i] + money, i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(last == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                rob(nums, i+<span class=\"number\">1</span>, money, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &gt; last + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 不偷,继续下一个房间</span></span><br><span class=\"line\">                    rob(nums, i + <span class=\"number\">1</span>, money, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>思路2: 动态规划, 定义dp数组, dp[i] 代表到第i位最大的金额,存在状态转移关系:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i] = nums[i] i == 0</span><br><span class=\"line\">dp[i] = max(nums[i], dp[i-1], dp[i-1]) i &gt; 0, i &gt; 1</span><br></pre></td></tr></table></figure>\n\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[i] = nums[i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">last</span> <span class=\"operator\">=</span> i - <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">last2</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(last2 &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[i] = Math.max(dp[i], dp[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(last &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[i] = Math.max(dp[last] + nums[i], dp[i]);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                dp[i] = Math.max(dp[i], nums[i]);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"旋转图像","date":"2022-06-03T01:57:52.000Z","_content":"\n[旋转图像](https://leetcode.cn/problems/rotate-image/)\n\n给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。\n\n你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。\n\n![mat1](mat1.jpg)\n\n```\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[[7,4,1],[8,5,2],[9,6,3]]\n```\n\n\n\n思路：先旋转每一层，以首行的n-1个元素作为出发点，分别旋转（记录当前值，然后寻找需要放置到当前位置的值的位置，更新值并更新位置到计算的新位置。持续3次，最后一个位置以缓存值更新即可）。然后递归旋转内部即可。重要的地方：根据当前坐标计算需要替换值的坐标存在以下关系（与层级无关）：`[row, column] - > [size - column - 1, row]`\n\n代码：\n\n```java\nclass Solution {\n    int size = 0;\n    public void rotate(int[][] matrix) {\n        size = matrix.length;\n        rotate(matrix, 0);\n    }\n    public void rotate(int[][] matrix, int level) {\n        if(level >= size / 2){\n            return;\n        }\n        // 遍历到倒数第二个即可，最后一个会在第一个旋转时替换\n        for(int i = level; i < size - level - 1; i++) {\n            int row = level;\n            int column = i;\n            // 缓存起点值\n            int cache = matrix[row][column];\n            // 旋转3次，最后一次以缓存值更新\n            for(int m = 0; m < 3; m++) {\n                // 计算当前位置应由哪个位置的值来覆盖\n                int[] pos =findBefore(row, column);\n                matrix[row][column] = matrix[pos[0]][pos[1]];\n                // 更新位置\n                row = pos[0];\n                column = pos[1];\n            }\n            matrix[row][column] = cache;\n        }\n        // 计算内层\n        rotate(matrix, level+1);\n    }\n\n    public int[] findBefore(int row, int column){\n        return new int[]{size-column-1,row};\n    }\n}\n```\n\n","source":"_posts/旋转图像.md","raw":"---\ntitle: 旋转图像\ndate: 2022-06-03 09:57:52\ntags:\n  - leetcode\n  - 算法\n  - 迭代\n  - 数组\n---\n\n[旋转图像](https://leetcode.cn/problems/rotate-image/)\n\n给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。\n\n你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。\n\n![mat1](mat1.jpg)\n\n```\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[[7,4,1],[8,5,2],[9,6,3]]\n```\n\n\n\n思路：先旋转每一层，以首行的n-1个元素作为出发点，分别旋转（记录当前值，然后寻找需要放置到当前位置的值的位置，更新值并更新位置到计算的新位置。持续3次，最后一个位置以缓存值更新即可）。然后递归旋转内部即可。重要的地方：根据当前坐标计算需要替换值的坐标存在以下关系（与层级无关）：`[row, column] - > [size - column - 1, row]`\n\n代码：\n\n```java\nclass Solution {\n    int size = 0;\n    public void rotate(int[][] matrix) {\n        size = matrix.length;\n        rotate(matrix, 0);\n    }\n    public void rotate(int[][] matrix, int level) {\n        if(level >= size / 2){\n            return;\n        }\n        // 遍历到倒数第二个即可，最后一个会在第一个旋转时替换\n        for(int i = level; i < size - level - 1; i++) {\n            int row = level;\n            int column = i;\n            // 缓存起点值\n            int cache = matrix[row][column];\n            // 旋转3次，最后一次以缓存值更新\n            for(int m = 0; m < 3; m++) {\n                // 计算当前位置应由哪个位置的值来覆盖\n                int[] pos =findBefore(row, column);\n                matrix[row][column] = matrix[pos[0]][pos[1]];\n                // 更新位置\n                row = pos[0];\n                column = pos[1];\n            }\n            matrix[row][column] = cache;\n        }\n        // 计算内层\n        rotate(matrix, level+1);\n    }\n\n    public int[] findBefore(int row, int column){\n        return new int[]{size-column-1,row};\n    }\n}\n```\n\n","slug":"旋转图像","published":1,"updated":"2022-06-03T02:05:38.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zq001swuh84fwv6w9y","content":"<p><a href=\"https://leetcode.cn/problems/rotate-image/\">旋转图像</a></p>\n<p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p>\n<p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p>\n<p><img src=\"/2022/06/03/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/mat1.jpg\" alt=\"mat1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class=\"line\">输出：[[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：先旋转每一层，以首行的n-1个元素作为出发点，分别旋转（记录当前值，然后寻找需要放置到当前位置的值的位置，更新值并更新位置到计算的新位置。持续3次，最后一个位置以缓存值更新即可）。然后递归旋转内部即可。重要的地方：根据当前坐标计算需要替换值的坐标存在以下关系（与层级无关）：<code>[row, column] - &gt; [size - column - 1, row]</code></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix)</span> &#123;</span><br><span class=\"line\">        size = matrix.length;</span><br><span class=\"line\">        rotate(matrix, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level &gt;= size / <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历到倒数第二个即可，最后一个会在第一个旋转时替换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> level; i &lt; size - level - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> level;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"comment\">// 缓存起点值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">cache</span> <span class=\"operator\">=</span> matrix[row][column];</span><br><span class=\"line\">            <span class=\"comment\">// 旋转3次，最后一次以缓存值更新</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; m &lt; <span class=\"number\">3</span>; m++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 计算当前位置应由哪个位置的值来覆盖</span></span><br><span class=\"line\">                <span class=\"type\">int</span>[] pos =findBefore(row, column);</span><br><span class=\"line\">                matrix[row][column] = matrix[pos[<span class=\"number\">0</span>]][pos[<span class=\"number\">1</span>]];</span><br><span class=\"line\">                <span class=\"comment\">// 更新位置</span></span><br><span class=\"line\">                row = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">                column = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            matrix[row][column] = cache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 计算内层</span></span><br><span class=\"line\">        rotate(matrix, level+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findBefore(<span class=\"type\">int</span> row, <span class=\"type\">int</span> column)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;size-column-<span class=\"number\">1</span>,row&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/rotate-image/\">旋转图像</a></p>\n<p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p>\n<p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p>\n<p><img src=\"/2022/06/03/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/mat1.jpg\" alt=\"mat1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class=\"line\">输出：[[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：先旋转每一层，以首行的n-1个元素作为出发点，分别旋转（记录当前值，然后寻找需要放置到当前位置的值的位置，更新值并更新位置到计算的新位置。持续3次，最后一个位置以缓存值更新即可）。然后递归旋转内部即可。重要的地方：根据当前坐标计算需要替换值的坐标存在以下关系（与层级无关）：<code>[row, column] - &gt; [size - column - 1, row]</code></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix)</span> &#123;</span><br><span class=\"line\">        size = matrix.length;</span><br><span class=\"line\">        rotate(matrix, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level &gt;= size / <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历到倒数第二个即可，最后一个会在第一个旋转时替换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> level; i &lt; size - level - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> level;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"comment\">// 缓存起点值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">cache</span> <span class=\"operator\">=</span> matrix[row][column];</span><br><span class=\"line\">            <span class=\"comment\">// 旋转3次，最后一次以缓存值更新</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; m &lt; <span class=\"number\">3</span>; m++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 计算当前位置应由哪个位置的值来覆盖</span></span><br><span class=\"line\">                <span class=\"type\">int</span>[] pos =findBefore(row, column);</span><br><span class=\"line\">                matrix[row][column] = matrix[pos[<span class=\"number\">0</span>]][pos[<span class=\"number\">1</span>]];</span><br><span class=\"line\">                <span class=\"comment\">// 更新位置</span></span><br><span class=\"line\">                row = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">                column = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            matrix[row][column] = cache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 计算内层</span></span><br><span class=\"line\">        rotate(matrix, level+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findBefore(<span class=\"type\">int</span> row, <span class=\"type\">int</span> column)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;size-column-<span class=\"number\">1</span>,row&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"最小覆盖子串","date":"2022-06-01T13:26:57.000Z","_content":"\n[最小覆盖字串](https://leetcode.cn/problems/minimum-window-substring/)\n\n给你一个字符串 `s` 、一个字符串 `t` 。返回 `s` 中涵盖 `t` 所有字符的最小子串。如果 `s` 中不存在涵盖 `t` 所有字符的子串，则返回空字符串 `\"\"` 。\n\n**注意：**\n\n- 对于 `t` 中重复字符，我们寻找的子字符串中该字符数量必须不少于 `t` 中该字符数量。\n- 如果 `s` 中存在这样的子串，我们保证它是唯一的答案。\n\n```\n输入：s = \"ADOBECODEBANC\", t = \"ABC\"\n输出：\"BANC\"\n```\n\n\n\n思路：采用滑动窗口，通过hash `t`字符串每个字符的频率，同样在滑动窗口调整时维护`s`的字符频率hash。关于窗口的调整策略：先调整右边界，直到所有节点都已包含，可以更新最小长度。然后调整左边界，如果移动后依旧包含则更新最小长度。如果不包含调整右边界直至继续包含目标串。按照这个策略调整窗口并更新`s`的hash。右边界在移动的时候如果能保持hash数量大于t串hash对应数量则表示包含。另外全部包含需要一个额外变量存储length，通过每一次窗口调整更新该变量，如果该变量长度等于`t`串长度则表示已全包含（更新策略，如果右边界判断hash数量大于t串hash对应数量，则length + t中该字符数量，如果左边界判断hash数量小于t串hash对应数量，则length - 1）。\n\n代码：\n\n```java\n// 待补充。。。\n```\n\n","source":"_posts/最小覆盖子串.md","raw":"---\ntitle: 最小覆盖子串\ndate: 2022-06-01 21:26:57\ntags:\n  - leedcode\n  - 算法\n  - 滑动窗口\n---\n\n[最小覆盖字串](https://leetcode.cn/problems/minimum-window-substring/)\n\n给你一个字符串 `s` 、一个字符串 `t` 。返回 `s` 中涵盖 `t` 所有字符的最小子串。如果 `s` 中不存在涵盖 `t` 所有字符的子串，则返回空字符串 `\"\"` 。\n\n**注意：**\n\n- 对于 `t` 中重复字符，我们寻找的子字符串中该字符数量必须不少于 `t` 中该字符数量。\n- 如果 `s` 中存在这样的子串，我们保证它是唯一的答案。\n\n```\n输入：s = \"ADOBECODEBANC\", t = \"ABC\"\n输出：\"BANC\"\n```\n\n\n\n思路：采用滑动窗口，通过hash `t`字符串每个字符的频率，同样在滑动窗口调整时维护`s`的字符频率hash。关于窗口的调整策略：先调整右边界，直到所有节点都已包含，可以更新最小长度。然后调整左边界，如果移动后依旧包含则更新最小长度。如果不包含调整右边界直至继续包含目标串。按照这个策略调整窗口并更新`s`的hash。右边界在移动的时候如果能保持hash数量大于t串hash对应数量则表示包含。另外全部包含需要一个额外变量存储length，通过每一次窗口调整更新该变量，如果该变量长度等于`t`串长度则表示已全包含（更新策略，如果右边界判断hash数量大于t串hash对应数量，则length + t中该字符数量，如果左边界判断hash数量小于t串hash对应数量，则length - 1）。\n\n代码：\n\n```java\n// 待补充。。。\n```\n\n","slug":"最小覆盖子串","published":1,"updated":"2022-06-01T13:57:08.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zr001twuh8f4hyhdhh","content":"<p><a href=\"https://leetcode.cn/problems/minimum-window-substring/\">最小覆盖字串</a></p>\n<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>\n<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class=\"line\">输出：&quot;BANC&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：采用滑动窗口，通过hash <code>t</code>字符串每个字符的频率，同样在滑动窗口调整时维护<code>s</code>的字符频率hash。关于窗口的调整策略：先调整右边界，直到所有节点都已包含，可以更新最小长度。然后调整左边界，如果移动后依旧包含则更新最小长度。如果不包含调整右边界直至继续包含目标串。按照这个策略调整窗口并更新<code>s</code>的hash。右边界在移动的时候如果能保持hash数量大于t串hash对应数量则表示包含。另外全部包含需要一个额外变量存储length，通过每一次窗口调整更新该变量，如果该变量长度等于<code>t</code>串长度则表示已全包含（更新策略，如果右边界判断hash数量大于t串hash对应数量，则length + t中该字符数量，如果左边界判断hash数量小于t串hash对应数量，则length - 1）。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 待补充。。。</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/minimum-window-substring/\">最小覆盖字串</a></p>\n<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>\n<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class=\"line\">输出：&quot;BANC&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：采用滑动窗口，通过hash <code>t</code>字符串每个字符的频率，同样在滑动窗口调整时维护<code>s</code>的字符频率hash。关于窗口的调整策略：先调整右边界，直到所有节点都已包含，可以更新最小长度。然后调整左边界，如果移动后依旧包含则更新最小长度。如果不包含调整右边界直至继续包含目标串。按照这个策略调整窗口并更新<code>s</code>的hash。右边界在移动的时候如果能保持hash数量大于t串hash对应数量则表示包含。另外全部包含需要一个额外变量存储length，通过每一次窗口调整更新该变量，如果该变量长度等于<code>t</code>串长度则表示已全包含（更新策略，如果右边界判断hash数量大于t串hash对应数量，则length + t中该字符数量，如果左边界判断hash数量小于t串hash对应数量，则length - 1）。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 待补充。。。</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"最小路径和","date":"2022-06-02T08:41:05.000Z","_content":"\n[最小路径和](https://leetcode.cn/problems/minimum-path-sum/)\n\n给定一个包含非负整数的 `*m* x *n*` 网格 `grid` ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n**说明：**每次只能向下或者向右移动一步。\n\n```\n输入：grid = [[1,3,1],[1,5,1],[4,2,1]]\n输出：7\n解释：因为路径 1→3→1→1→1 的总和最小。\n```\n\n思路1: 递归，当前位置到结束的最小路径和等于往左往右走较小和加上当前路径值即可\n\n代码（思路1）：\n\n```java\nclass Solution {\n    int width = 0;\n    int height = 0;\n    public int minPathSum(int[][] grid) {\n        width = grid[0].length;\n        height = grid.length;\n        return minPath(grid, 0, 0);\n    }\n\n    public int minPath(int[][] grid, int row, int column) {\n        if(row == height || column == width) {\n            return Integer.MAX_VALUE;\n        }\n        if(row == height-1 && column == width-1){\n            return grid[row][column];\n        }\n        int right = minPath(grid, row+1, column);\n        int down = minPath(grid, row, column + 1);\n        return Math.min(right, down) + grid[row][column];\n    }\n}\n```\n\n\n\n思路2: 思路1在leetcode中超时，所以通过dp来做，可以维护dp数组表示当前节点到结束的最短路径和\n\n```java\nclass Solution {\n    \n    public int minPathSum(int[][] grid) {\n        int width = grid[0].length;\n        int height = grid.length;\n        int[][] dp = new int[height][width];\n        for(int row = height - 1; row >= 0; row--) {\n            for(int column = width - 1; column >= 0; column--) {\n                if(row == height - 1 && column == width - 1) {\n                    dp[row][column] = grid[row][column];\n                }else{\n                    int min = Integer.MAX_VALUE;\n                    if(column < width - 1){\n                        min = dp[row][column+1];\n                    }\n                    if(row < height - 1){\n                        min = Math.min(min, dp[row+1][column]);\n                    }\n                    dp[row][column] = min + grid[row][column];\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n```\n\n\n\n","source":"_posts/最小路径和.md","raw":"---\ntitle: 最小路径和\ndate: 2022-06-02 16:41:05\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[最小路径和](https://leetcode.cn/problems/minimum-path-sum/)\n\n给定一个包含非负整数的 `*m* x *n*` 网格 `grid` ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n**说明：**每次只能向下或者向右移动一步。\n\n```\n输入：grid = [[1,3,1],[1,5,1],[4,2,1]]\n输出：7\n解释：因为路径 1→3→1→1→1 的总和最小。\n```\n\n思路1: 递归，当前位置到结束的最小路径和等于往左往右走较小和加上当前路径值即可\n\n代码（思路1）：\n\n```java\nclass Solution {\n    int width = 0;\n    int height = 0;\n    public int minPathSum(int[][] grid) {\n        width = grid[0].length;\n        height = grid.length;\n        return minPath(grid, 0, 0);\n    }\n\n    public int minPath(int[][] grid, int row, int column) {\n        if(row == height || column == width) {\n            return Integer.MAX_VALUE;\n        }\n        if(row == height-1 && column == width-1){\n            return grid[row][column];\n        }\n        int right = minPath(grid, row+1, column);\n        int down = minPath(grid, row, column + 1);\n        return Math.min(right, down) + grid[row][column];\n    }\n}\n```\n\n\n\n思路2: 思路1在leetcode中超时，所以通过dp来做，可以维护dp数组表示当前节点到结束的最短路径和\n\n```java\nclass Solution {\n    \n    public int minPathSum(int[][] grid) {\n        int width = grid[0].length;\n        int height = grid.length;\n        int[][] dp = new int[height][width];\n        for(int row = height - 1; row >= 0; row--) {\n            for(int column = width - 1; column >= 0; column--) {\n                if(row == height - 1 && column == width - 1) {\n                    dp[row][column] = grid[row][column];\n                }else{\n                    int min = Integer.MAX_VALUE;\n                    if(column < width - 1){\n                        min = dp[row][column+1];\n                    }\n                    if(row < height - 1){\n                        min = Math.min(min, dp[row+1][column]);\n                    }\n                    dp[row][column] = min + grid[row][column];\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n```\n\n\n\n","slug":"最小路径和","published":1,"updated":"2022-06-02T08:54:06.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zr001uwuh87nyj4fw5","content":"<p><a href=\"https://leetcode.cn/problems/minimum-path-sum/\">最小路径和</a></p>\n<p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class=\"line\">输出：7</span><br><span class=\"line\">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure>\n\n<p>思路1: 递归，当前位置到结束的最小路径和等于往左往右走较小和加上当前路径值即可</p>\n<p>代码（思路1）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        width = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        height = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minPath(grid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPath</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> row, <span class=\"type\">int</span> column)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row == height || column == width) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row == height-<span class=\"number\">1</span> &amp;&amp; column == width-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> grid[row][column];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> minPath(grid, row+<span class=\"number\">1</span>, column);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> minPath(grid, row, column + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.min(right, down) + grid[row][column];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路2: 思路1在leetcode中超时，所以通过dp来做，可以维护dp数组表示当前节点到结束的最短路径和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> grid.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[height][width];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> height - <span class=\"number\">1</span>; row &gt;= <span class=\"number\">0</span>; row--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> width - <span class=\"number\">1</span>; column &gt;= <span class=\"number\">0</span>; column--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(row == height - <span class=\"number\">1</span> &amp;&amp; column == width - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dp[row][column] = grid[row][column];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(column &lt; width - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        min = dp[row][column+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row &lt; height - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        min = Math.min(min, dp[row+<span class=\"number\">1</span>][column]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[row][column] = min + grid[row][column];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/minimum-path-sum/\">最小路径和</a></p>\n<p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class=\"line\">输出：7</span><br><span class=\"line\">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure>\n\n<p>思路1: 递归，当前位置到结束的最小路径和等于往左往右走较小和加上当前路径值即可</p>\n<p>代码（思路1）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        width = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        height = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minPath(grid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPath</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> row, <span class=\"type\">int</span> column)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row == height || column == width) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row == height-<span class=\"number\">1</span> &amp;&amp; column == width-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> grid[row][column];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> minPath(grid, row+<span class=\"number\">1</span>, column);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> minPath(grid, row, column + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.min(right, down) + grid[row][column];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路2: 思路1在leetcode中超时，所以通过dp来做，可以维护dp数组表示当前节点到结束的最短路径和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> grid.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[height][width];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> height - <span class=\"number\">1</span>; row &gt;= <span class=\"number\">0</span>; row--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> width - <span class=\"number\">1</span>; column &gt;= <span class=\"number\">0</span>; column--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(row == height - <span class=\"number\">1</span> &amp;&amp; column == width - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dp[row][column] = grid[row][column];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(column &lt; width - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        min = dp[row][column+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row &lt; height - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        min = Math.min(min, dp[row+<span class=\"number\">1</span>][column]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[row][column] = min + grid[row][column];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"最长有效括号","date":"2022-06-01T13:11:25.000Z","_content":"\n[最长有效括号](https://leetcode.cn/problems/longest-valid-parentheses/)\n\n给你一个只包含 `'('` 和 `')'` 的字符串，找出最长有效（格式正确且连续）括号子串的长度。\n\n```\n输入：s = \"(()\"\n输出：2\n解释：最长有效括号子串是 \"()\"\n\n输入：s = \")()())\"\n输出：4\n解释：最长有效括号子串是 \"()()\"\n```\n\n\n\n思路：\n\n1. 暴力\n\n   遍历数组，以每一个索引开始寻找最长的合法括号串。然后找出最大的长度返回\n\n2. dp\n\n   定义：dp[i]：以索引`i`结尾的元素的最长合法括号串\n\n   存在以下递推关系：\n\n   dp[i] = dp[i-2] + 2  // 如果str[i] 与 str[i - 1] 为：`()`\n\n   dp[i] = dp[i-1] + 2 + dp[i - 2 - dp[i-1]]  // 如果str[i] = `')'` && str[i - dp[i-1] - 1] = `'('`\n\n代码：\n\n```java\nclass Solution {\n    public int longestValidParentheses(String s) {\n        char sc[] = s.toCharArray();\n        int length = sc.length;\n        int dp[] = new int[length];\n        int max = 0;\n        for(int i=1;i<length;i++){\n            // 状况1\n            if(sc[i]==')'&&sc[i-1]=='('){\n                int pos = i-2;\n                if(pos<0){\n                    dp[i] = 2;\n                } else{\n                    // 更新dp\n                    dp[i] = dp[pos] + 2;\n                }\n            }\n            // 状况2\n            if(sc[i]==')'&&sc[i-1]==')'){\n                int pos = i-dp[i-1]-1;\n                if(pos>=0&&sc[pos]=='('){\n                    // 更新dp\n                    dp[i] = dp[i-1] + 2;\n                    // 加前面的 重要：((()))(()), 如果此时索引为9，dp[i-1] = 2 (), 前面需要加的就是((()))\n                    if(dp[i-1]!=0&&pos-1>=0){\n                        dp[i] += dp[pos-1];\n                    }\n                }\n            }\n            max = Math.max(max,dp[i]);\n        }\n        return max;\n    }\n}\n```\n\n","source":"_posts/最长有效括号.md","raw":"---\ntitle: 最长有效括号\ndate: 2022-06-01 21:11:25\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[最长有效括号](https://leetcode.cn/problems/longest-valid-parentheses/)\n\n给你一个只包含 `'('` 和 `')'` 的字符串，找出最长有效（格式正确且连续）括号子串的长度。\n\n```\n输入：s = \"(()\"\n输出：2\n解释：最长有效括号子串是 \"()\"\n\n输入：s = \")()())\"\n输出：4\n解释：最长有效括号子串是 \"()()\"\n```\n\n\n\n思路：\n\n1. 暴力\n\n   遍历数组，以每一个索引开始寻找最长的合法括号串。然后找出最大的长度返回\n\n2. dp\n\n   定义：dp[i]：以索引`i`结尾的元素的最长合法括号串\n\n   存在以下递推关系：\n\n   dp[i] = dp[i-2] + 2  // 如果str[i] 与 str[i - 1] 为：`()`\n\n   dp[i] = dp[i-1] + 2 + dp[i - 2 - dp[i-1]]  // 如果str[i] = `')'` && str[i - dp[i-1] - 1] = `'('`\n\n代码：\n\n```java\nclass Solution {\n    public int longestValidParentheses(String s) {\n        char sc[] = s.toCharArray();\n        int length = sc.length;\n        int dp[] = new int[length];\n        int max = 0;\n        for(int i=1;i<length;i++){\n            // 状况1\n            if(sc[i]==')'&&sc[i-1]=='('){\n                int pos = i-2;\n                if(pos<0){\n                    dp[i] = 2;\n                } else{\n                    // 更新dp\n                    dp[i] = dp[pos] + 2;\n                }\n            }\n            // 状况2\n            if(sc[i]==')'&&sc[i-1]==')'){\n                int pos = i-dp[i-1]-1;\n                if(pos>=0&&sc[pos]=='('){\n                    // 更新dp\n                    dp[i] = dp[i-1] + 2;\n                    // 加前面的 重要：((()))(()), 如果此时索引为9，dp[i-1] = 2 (), 前面需要加的就是((()))\n                    if(dp[i-1]!=0&&pos-1>=0){\n                        dp[i] += dp[pos-1];\n                    }\n                }\n            }\n            max = Math.max(max,dp[i]);\n        }\n        return max;\n    }\n}\n```\n\n","slug":"最长有效括号","published":1,"updated":"2022-06-01T13:27:56.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zs001xwuh870h6hubi","content":"<p><a href=\"https://leetcode.cn/problems/longest-valid-parentheses/\">最长有效括号</a></p>\n<p>给你一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;(()&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：最长有效括号子串是 &quot;()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输入：s = &quot;)()())&quot;</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长有效括号子串是 &quot;()()&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：</p>\n<ol>\n<li><p>暴力</p>\n<p>遍历数组，以每一个索引开始寻找最长的合法括号串。然后找出最大的长度返回</p>\n</li>\n<li><p>dp</p>\n<p>定义：dp[i]：以索引<code>i</code>结尾的元素的最长合法括号串</p>\n<p>存在以下递推关系：</p>\n<p>dp[i] &#x3D; dp[i-2] + 2  &#x2F;&#x2F; 如果str[i] 与 str[i - 1] 为：<code>()</code></p>\n<p>dp[i] &#x3D; dp[i-1] + 2 + dp[i - 2 - dp[i-1]]  &#x2F;&#x2F; 如果str[i] &#x3D; <code>&#39;)&#39;</code> &amp;&amp; str[i - dp[i-1] - 1] &#x3D; <code>&#39;(&#39;</code></p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestValidParentheses</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> sc[] = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> sc.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> dp[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 状况1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sc[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;sc[i-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> i-<span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pos&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新dp</span></span><br><span class=\"line\">                    dp[i] = dp[pos] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 状况2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sc[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;sc[i-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;)&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> i-dp[i-<span class=\"number\">1</span>]-<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pos&gt;=<span class=\"number\">0</span>&amp;&amp;sc[pos]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新dp</span></span><br><span class=\"line\">                    dp[i] = dp[i-<span class=\"number\">1</span>] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 加前面的 重要：((()))(()), 如果此时索引为9，dp[i-1] = 2 (), 前面需要加的就是((()))</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[i-<span class=\"number\">1</span>]!=<span class=\"number\">0</span>&amp;&amp;pos-<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        dp[i] += dp[pos-<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/longest-valid-parentheses/\">最长有效括号</a></p>\n<p>给你一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;(()&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：最长有效括号子串是 &quot;()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输入：s = &quot;)()())&quot;</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长有效括号子串是 &quot;()()&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：</p>\n<ol>\n<li><p>暴力</p>\n<p>遍历数组，以每一个索引开始寻找最长的合法括号串。然后找出最大的长度返回</p>\n</li>\n<li><p>dp</p>\n<p>定义：dp[i]：以索引<code>i</code>结尾的元素的最长合法括号串</p>\n<p>存在以下递推关系：</p>\n<p>dp[i] &#x3D; dp[i-2] + 2  &#x2F;&#x2F; 如果str[i] 与 str[i - 1] 为：<code>()</code></p>\n<p>dp[i] &#x3D; dp[i-1] + 2 + dp[i - 2 - dp[i-1]]  &#x2F;&#x2F; 如果str[i] &#x3D; <code>&#39;)&#39;</code> &amp;&amp; str[i - dp[i-1] - 1] &#x3D; <code>&#39;(&#39;</code></p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestValidParentheses</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> sc[] = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> sc.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> dp[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 状况1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sc[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;sc[i-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> i-<span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pos&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新dp</span></span><br><span class=\"line\">                    dp[i] = dp[pos] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 状况2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sc[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;sc[i-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;)&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> i-dp[i-<span class=\"number\">1</span>]-<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pos&gt;=<span class=\"number\">0</span>&amp;&amp;sc[pos]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新dp</span></span><br><span class=\"line\">                    dp[i] = dp[i-<span class=\"number\">1</span>] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 加前面的 重要：((()))(()), 如果此时索引为9，dp[i-1] = 2 (), 前面需要加的就是((()))</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[i-<span class=\"number\">1</span>]!=<span class=\"number\">0</span>&amp;&amp;pos-<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        dp[i] += dp[pos-<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"最长连续序列","date":"2022-06-03T12:37:10.000Z","_content":"\n[最长连续序列](https://leetcode.cn/problems/longest-consecutive-sequence/)\n\n给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。\n\n请你设计并实现时间复杂度为 O(n) 的算法解决此问题。\n\n```\n输入：nums = [100,4,200,1,3,2]\n输出：4\n解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。\n```\n\n\n\n思路: 可以直接排序,然后每一个节点看是否存在(累加一直到不存在).但题目要求时间复杂度O(n).所以采用hash优化的方式\n\n代码:\n\n```java\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        int max = 0;\n        // 创建set,便于后续判断是否包含\n        Set<Integer> set = new HashSet();\n        for(int num : nums) {\n            set.add(num);\n        }\n        for(int num : nums) {\n            int tmp = num;\n            int count = 0;\n            // !重要优化点! 如果节点前驱在数组中存在则跳过这次寻找不连续点\n            if(set.contains(tmp-1)){\n                continue;\n            }\n            // 循环寻找直到不连续,更新最值\n            while(set.contains(tmp)){\n                count++;\n                tmp++;\n            }\n            max = Math.max(max, count);\n        }\n        return max;\n    }\n}\n```\n\n","source":"_posts/最长连续序列.md","raw":"---\ntitle: 最长连续序列\ndate: 2022-06-03 20:37:10\ntags:\n  - leetcode\n  - 算法\n  - hash\n  - 优化\n---\n\n[最长连续序列](https://leetcode.cn/problems/longest-consecutive-sequence/)\n\n给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。\n\n请你设计并实现时间复杂度为 O(n) 的算法解决此问题。\n\n```\n输入：nums = [100,4,200,1,3,2]\n输出：4\n解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。\n```\n\n\n\n思路: 可以直接排序,然后每一个节点看是否存在(累加一直到不存在).但题目要求时间复杂度O(n).所以采用hash优化的方式\n\n代码:\n\n```java\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        int max = 0;\n        // 创建set,便于后续判断是否包含\n        Set<Integer> set = new HashSet();\n        for(int num : nums) {\n            set.add(num);\n        }\n        for(int num : nums) {\n            int tmp = num;\n            int count = 0;\n            // !重要优化点! 如果节点前驱在数组中存在则跳过这次寻找不连续点\n            if(set.contains(tmp-1)){\n                continue;\n            }\n            // 循环寻找直到不连续,更新最值\n            while(set.contains(tmp)){\n                count++;\n                tmp++;\n            }\n            max = Math.max(max, count);\n        }\n        return max;\n    }\n}\n```\n\n","slug":"最长连续序列","published":1,"updated":"2022-06-03T12:41:17.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zs001zwuh865xk1mfu","content":"<p><a href=\"https://leetcode.cn/problems/longest-consecutive-sequence/\">最长连续序列</a></p>\n<p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p>\n<p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [100,4,200,1,3,2]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 可以直接排序,然后每一个节点看是否存在(累加一直到不存在).但题目要求时间复杂度O(n).所以采用hash优化的方式</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestConsecutive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建set,便于后续判断是否包含</span></span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            set.add(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> num;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// !重要优化点! 如果节点前驱在数组中存在则跳过这次寻找不连续点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(set.contains(tmp-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 循环寻找直到不连续,更新最值</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(set.contains(tmp))&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                tmp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/longest-consecutive-sequence/\">最长连续序列</a></p>\n<p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p>\n<p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [100,4,200,1,3,2]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 可以直接排序,然后每一个节点看是否存在(累加一直到不存在).但题目要求时间复杂度O(n).所以采用hash优化的方式</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestConsecutive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建set,便于后续判断是否包含</span></span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            set.add(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> num;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// !重要优化点! 如果节点前驱在数组中存在则跳过这次寻找不连续点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(set.contains(tmp-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 循环寻找直到不连续,更新最值</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(set.contains(tmp))&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                tmp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"最长重复子数组","date":"2022-06-03T02:39:22.000Z","_content":"\n[最长重复子数组](https://leetcode.cn/problems/maximum-length-of-repeated-subarray/)\n\n给两个整数数组 `nums1` 和 `nums2` ，返回 *两个数组中 **公共的** 、长度最长的子数组的长度* \n\n```\n输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n输出：3\n解释：长度最长的公共子数组是 [3,2,1] 。\n```\n\n思路：定义`dp[i][j]`数组为第一个数组`i`索引与第二个数组`j`索引结尾子数组最大公共长度。同时存在状态转移关系：\n\n`dp[i][j] = dp[i-1][j-1]+1 when nums1[i] == nums2[j] and i != 0 and j != 0`\n\n`dp[i][j] = 1 when nums1[i] == nums2[j] and i==0 || j == 0`\n\n`dp[i][j] = 0 when nums1[i] != nums2[j] and i==0 || j == 0`\n\n\n\n代码：\n\n```java\nclass Solution {\n    int max = 0;\n    public int findLength(int[] nums1, int[] nums2) {\n        int l1 = nums1.length;\n        int l2 = nums2.length;\n        int[][] dp = new int[l1][l2];\n        for(int i = 0; i < l1; i++) {\n            for(int j = 0; j < l2; j++) {\n                boolean csame = nums1[i] == nums2[j];\n                if(i == 0 || j == 0) {\n                    dp[i][j] = csame ? 1 : 0;\n                } else {\n                    if(csame) {\n                        dp[i][j] = dp[i-1][j-1] + 1;\n                    } else {\n                        dp[i][j] = 0;\n                    }\n                }\n                max = Math.max(dp[i][j], max);\n            }\n        }\n        return max;\n    }\n}\n```\n\n","source":"_posts/最长重复子数组.md","raw":"---\ntitle: 最长重复子数组\ndate: 2022-06-03 10:39:22\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[最长重复子数组](https://leetcode.cn/problems/maximum-length-of-repeated-subarray/)\n\n给两个整数数组 `nums1` 和 `nums2` ，返回 *两个数组中 **公共的** 、长度最长的子数组的长度* \n\n```\n输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n输出：3\n解释：长度最长的公共子数组是 [3,2,1] 。\n```\n\n思路：定义`dp[i][j]`数组为第一个数组`i`索引与第二个数组`j`索引结尾子数组最大公共长度。同时存在状态转移关系：\n\n`dp[i][j] = dp[i-1][j-1]+1 when nums1[i] == nums2[j] and i != 0 and j != 0`\n\n`dp[i][j] = 1 when nums1[i] == nums2[j] and i==0 || j == 0`\n\n`dp[i][j] = 0 when nums1[i] != nums2[j] and i==0 || j == 0`\n\n\n\n代码：\n\n```java\nclass Solution {\n    int max = 0;\n    public int findLength(int[] nums1, int[] nums2) {\n        int l1 = nums1.length;\n        int l2 = nums2.length;\n        int[][] dp = new int[l1][l2];\n        for(int i = 0; i < l1; i++) {\n            for(int j = 0; j < l2; j++) {\n                boolean csame = nums1[i] == nums2[j];\n                if(i == 0 || j == 0) {\n                    dp[i][j] = csame ? 1 : 0;\n                } else {\n                    if(csame) {\n                        dp[i][j] = dp[i-1][j-1] + 1;\n                    } else {\n                        dp[i][j] = 0;\n                    }\n                }\n                max = Math.max(dp[i][j], max);\n            }\n        }\n        return max;\n    }\n}\n```\n\n","slug":"最长重复子数组","published":1,"updated":"2022-06-03T04:07:27.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zt0022wuh87ocic72g","content":"<p><a href=\"https://leetcode.cn/problems/maximum-length-of-repeated-subarray/\">最长重复子数组</a></p>\n<p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>两个数组中 <strong>公共的</strong> 、长度最长的子数组的长度</em> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：长度最长的公共子数组是 [3,2,1] 。</span><br></pre></td></tr></table></figure>\n\n<p>思路：定义<code>dp[i][j]</code>数组为第一个数组<code>i</code>索引与第二个数组<code>j</code>索引结尾子数组最大公共长度。同时存在状态转移关系：</p>\n<p><code>dp[i][j] = dp[i-1][j-1]+1 when nums1[i] == nums2[j] and i != 0 and j != 0</code></p>\n<p><code>dp[i][j] = 1 when nums1[i] == nums2[j] and i==0 || j == 0</code></p>\n<p><code>dp[i][j] = 0 when nums1[i] != nums2[j] and i==0 || j == 0</code></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findLength</span><span class=\"params\">(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l1</span> <span class=\"operator\">=</span> nums1.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l2</span> <span class=\"operator\">=</span> nums2.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[l1][l2];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; l1; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; l2; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">csame</span> <span class=\"operator\">=</span> nums1[i] == nums2[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[i][j] = csame ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(csame) &#123;</span><br><span class=\"line\">                        dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                max = Math.max(dp[i][j], max);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/maximum-length-of-repeated-subarray/\">最长重复子数组</a></p>\n<p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>两个数组中 <strong>公共的</strong> 、长度最长的子数组的长度</em> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：长度最长的公共子数组是 [3,2,1] 。</span><br></pre></td></tr></table></figure>\n\n<p>思路：定义<code>dp[i][j]</code>数组为第一个数组<code>i</code>索引与第二个数组<code>j</code>索引结尾子数组最大公共长度。同时存在状态转移关系：</p>\n<p><code>dp[i][j] = dp[i-1][j-1]+1 when nums1[i] == nums2[j] and i != 0 and j != 0</code></p>\n<p><code>dp[i][j] = 1 when nums1[i] == nums2[j] and i==0 || j == 0</code></p>\n<p><code>dp[i][j] = 0 when nums1[i] != nums2[j] and i==0 || j == 0</code></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findLength</span><span class=\"params\">(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l1</span> <span class=\"operator\">=</span> nums1.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l2</span> <span class=\"operator\">=</span> nums2.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[l1][l2];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; l1; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; l2; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">csame</span> <span class=\"operator\">=</span> nums1[i] == nums2[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[i][j] = csame ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(csame) &#123;</span><br><span class=\"line\">                        dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                max = Math.max(dp[i][j], max);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"死锁","date":"2022-05-31T00:52:56.000Z","_content":"\n# 什么是死锁\n\n多线程情况下，线程互相拥有对方需要的资源从而相互等待资源释放，从而导致程序无法继续进行造成死锁。\n\n\n\n# 如何解决\n\n1. 固定枷锁顺序\n\n   可以通过业务字段运算排序确定加锁的顺序\n\n2. 尽可能减小锁的范围\n\n   等到操作共享变量时再加锁，降低死锁概率\n\n3. 定时锁\n\n   一段时间获取不到锁，释放掉\n","source":"_posts/死锁.md","raw":"---\ntitle: 死锁\ndate: 2022-05-31 08:52:56\ntags:\n  - 死锁\n  - 面试\n---\n\n# 什么是死锁\n\n多线程情况下，线程互相拥有对方需要的资源从而相互等待资源释放，从而导致程序无法继续进行造成死锁。\n\n\n\n# 如何解决\n\n1. 固定枷锁顺序\n\n   可以通过业务字段运算排序确定加锁的顺序\n\n2. 尽可能减小锁的范围\n\n   等到操作共享变量时再加锁，降低死锁概率\n\n3. 定时锁\n\n   一段时间获取不到锁，释放掉\n","slug":"死锁","published":1,"updated":"2022-05-31T00:58:19.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zt0023wuh8a2wtb7a2","content":"<h1 id=\"什么是死锁\"><a href=\"#什么是死锁\" class=\"headerlink\" title=\"什么是死锁\"></a>什么是死锁</h1><p>多线程情况下，线程互相拥有对方需要的资源从而相互等待资源释放，从而导致程序无法继续进行造成死锁。</p>\n<h1 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h1><ol>\n<li><p>固定枷锁顺序</p>\n<p>可以通过业务字段运算排序确定加锁的顺序</p>\n</li>\n<li><p>尽可能减小锁的范围</p>\n<p>等到操作共享变量时再加锁，降低死锁概率</p>\n</li>\n<li><p>定时锁</p>\n<p>一段时间获取不到锁，释放掉</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是死锁\"><a href=\"#什么是死锁\" class=\"headerlink\" title=\"什么是死锁\"></a>什么是死锁</h1><p>多线程情况下，线程互相拥有对方需要的资源从而相互等待资源释放，从而导致程序无法继续进行造成死锁。</p>\n<h1 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h1><ol>\n<li><p>固定枷锁顺序</p>\n<p>可以通过业务字段运算排序确定加锁的顺序</p>\n</li>\n<li><p>尽可能减小锁的范围</p>\n<p>等到操作共享变量时再加锁，降低死锁概率</p>\n</li>\n<li><p>定时锁</p>\n<p>一段时间获取不到锁，释放掉</p>\n</li>\n</ol>\n"},{"title":"滑动窗口最大值","date":"2022-05-31T11:26:47.000Z","_content":"\n[滑动窗口最大值](https://leetcode.cn/problems/sliding-window-maximum/)\n\n给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n\n返回 滑动窗口中的最大值 。\n\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n思路：维护一个单调递减栈（如果区间内来了一个更大的值，之前的都不参与计算最大值。但是如果来一个较小的数，如果大数走出区间这个小一点的数就要参与计算最大值）。每次到达区间新值时计算当前区间最大值更新即可。此处注意栈是后进先出，由于是递减栈，所以我们要找的肯定在栈底部更接近，此处由于java的Stack类继承Vector可以通过迭代器从底部遍历，从而节省性能。还有需要注意走过的区间要将入栈的数据删掉，节省下次寻找区间最值的时间。\n\n代码：\n\n```java\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int length = nums.length;\n        int[] ret = new int[length - k + 1];\n        Stack<Integer> stack = new Stack();\n        int index = 0;\n        int retIndex = 0;\n        while(index < length) {\n             while(!stack.isEmpty() && nums[index] > nums[stack.peek()]) {\n                stack.pop();\n            }\n            stack.push(index);\n            if(index >= k - 1) {\n                ret[retIndex] = findMax(stack,nums, index - k + 1);\n                retIndex++;\n            }\n            index++;\n\n        }\n        return ret;\n    }\n    public int findMax(Stack<Integer> stack,int[] nums, int minIndex){\n        // 此处用迭代器，可以从最早push的数据开始检索\n        Iterator<Integer> it = stack.iterator();\n        while(it.hasNext()){\n            int s = it.next();\n            if(s >= minIndex) {\n                return nums[s];\n            }else{\n                // remove掉不会再参与计算的数据，节省内存并减少下次遍历时间\n                it.remove();\n            }\n        }\n        return 0;\n    }\n}\n```\n\n\n\n","source":"_posts/滑动窗口最大值.md","raw":"---\ntitle: 滑动窗口最大值\ndate: 2022-05-31 19:26:47\ntags:\n  - leetcode\n  - stack\n---\n\n[滑动窗口最大值](https://leetcode.cn/problems/sliding-window-maximum/)\n\n给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n\n返回 滑动窗口中的最大值 。\n\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n思路：维护一个单调递减栈（如果区间内来了一个更大的值，之前的都不参与计算最大值。但是如果来一个较小的数，如果大数走出区间这个小一点的数就要参与计算最大值）。每次到达区间新值时计算当前区间最大值更新即可。此处注意栈是后进先出，由于是递减栈，所以我们要找的肯定在栈底部更接近，此处由于java的Stack类继承Vector可以通过迭代器从底部遍历，从而节省性能。还有需要注意走过的区间要将入栈的数据删掉，节省下次寻找区间最值的时间。\n\n代码：\n\n```java\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int length = nums.length;\n        int[] ret = new int[length - k + 1];\n        Stack<Integer> stack = new Stack();\n        int index = 0;\n        int retIndex = 0;\n        while(index < length) {\n             while(!stack.isEmpty() && nums[index] > nums[stack.peek()]) {\n                stack.pop();\n            }\n            stack.push(index);\n            if(index >= k - 1) {\n                ret[retIndex] = findMax(stack,nums, index - k + 1);\n                retIndex++;\n            }\n            index++;\n\n        }\n        return ret;\n    }\n    public int findMax(Stack<Integer> stack,int[] nums, int minIndex){\n        // 此处用迭代器，可以从最早push的数据开始检索\n        Iterator<Integer> it = stack.iterator();\n        while(it.hasNext()){\n            int s = it.next();\n            if(s >= minIndex) {\n                return nums[s];\n            }else{\n                // remove掉不会再参与计算的数据，节省内存并减少下次遍历时间\n                it.remove();\n            }\n        }\n        return 0;\n    }\n}\n```\n\n\n\n","slug":"滑动窗口最大值","published":1,"updated":"2022-05-31T11:33:35.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zu0025wuh80c7r8eir","content":"<p><a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">滑动窗口最大值</a></p>\n<p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回 滑动窗口中的最大值 。</p>\n<p>输入：nums &#x3D; [1,3,-1,-3,5,3,6,7], k &#x3D; 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                最大值</p>\n<hr>\n<p>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p>\n<p>思路：维护一个单调递减栈（如果区间内来了一个更大的值，之前的都不参与计算最大值。但是如果来一个较小的数，如果大数走出区间这个小一点的数就要参与计算最大值）。每次到达区间新值时计算当前区间最大值更新即可。此处注意栈是后进先出，由于是递减栈，所以我们要找的肯定在栈底部更接近，此处由于java的Stack类继承Vector可以通过迭代器从底部遍历，从而节省性能。还有需要注意走过的区间要将入栈的数据删掉，节省下次寻找区间最值的时间。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxSlidingWindow(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">retIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index &lt; length) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; nums[index] &gt; nums[stack.peek()]) &#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stack.push(index);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;= k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                ret[retIndex] = findMax(stack,nums, index - k + <span class=\"number\">1</span>);</span><br><span class=\"line\">                retIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMax</span><span class=\"params\">(Stack&lt;Integer&gt; stack,<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> minIndex)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处用迭代器，可以从最早push的数据开始检索</span></span><br><span class=\"line\">        Iterator&lt;Integer&gt; it = stack.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s &gt;= minIndex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[s];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// remove掉不会再参与计算的数据，节省内存并减少下次遍历时间</span></span><br><span class=\"line\">                it.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">滑动窗口最大值</a></p>\n<p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回 滑动窗口中的最大值 。</p>\n<p>输入：nums &#x3D; [1,3,-1,-3,5,3,6,7], k &#x3D; 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                最大值</p>\n<hr>\n<p>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p>\n<p>思路：维护一个单调递减栈（如果区间内来了一个更大的值，之前的都不参与计算最大值。但是如果来一个较小的数，如果大数走出区间这个小一点的数就要参与计算最大值）。每次到达区间新值时计算当前区间最大值更新即可。此处注意栈是后进先出，由于是递减栈，所以我们要找的肯定在栈底部更接近，此处由于java的Stack类继承Vector可以通过迭代器从底部遍历，从而节省性能。还有需要注意走过的区间要将入栈的数据删掉，节省下次寻找区间最值的时间。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxSlidingWindow(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">retIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index &lt; length) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; nums[index] &gt; nums[stack.peek()]) &#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stack.push(index);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;= k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                ret[retIndex] = findMax(stack,nums, index - k + <span class=\"number\">1</span>);</span><br><span class=\"line\">                retIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMax</span><span class=\"params\">(Stack&lt;Integer&gt; stack,<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> minIndex)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处用迭代器，可以从最早push的数据开始检索</span></span><br><span class=\"line\">        Iterator&lt;Integer&gt; it = stack.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s &gt;= minIndex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[s];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// remove掉不会再参与计算的数据，节省内存并减少下次遍历时间</span></span><br><span class=\"line\">                it.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"线程池","date":"2022-05-31T03:05:43.000Z","_content":"\n# 创建方式\n\nThreadPoolExecutor创建，了解线程创建参数避免资源耗尽。\n\n# 核心参数\n\n- 核心线程数\n- 最大线程数\n- 线程空闲时间\n- 阻塞队列\n  - `ArrayBlockingQueue`\n  - `LinkedBlockingQuewue`\n  - `PriorityBlockingQueue`\n- 拒绝策略\n  - 丢弃任务并抛异常\n  - 直接丢掉新任务\n  - 丢掉队列中最早的任务\n  - 提交任务的线程执行该任务\n\n# 任务提交执行流程\n\n1. 提交任务\n2. 判断当前线程数是否小雨核心线程，如果小于则创建核心线程执行\n3. 否则判断阻塞队列是否已满，如果已满执行4，否则5\n4. 判断当前线程数是否达到最大线程数，如果达到则触发拒绝策略，否则创建新线程执行\n5. 加入阻塞队列即可\n\n# 参数设计\n\n1. 根据任务类型设计：\n\n   **CPU密集型**：与CPU核心数1～2倍。（不设置过多是CPU已经占用很高，避免无意义的上下文切换）\n\n   **IO密集型**：采用《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：**线程数 = CPU 核心数 \\*（1+平均等待时间/平均工作时间）**\n\n2. 压测确定\n\n   为了更准确的参数配置，可以通过压测来确定服务的最佳线程数量。\n","source":"_posts/线程池.md","raw":"---\ntitle: 线程池\ndate: 2022-05-31 11:05:43\ntags:\n  - 线程池\n  - java\n---\n\n# 创建方式\n\nThreadPoolExecutor创建，了解线程创建参数避免资源耗尽。\n\n# 核心参数\n\n- 核心线程数\n- 最大线程数\n- 线程空闲时间\n- 阻塞队列\n  - `ArrayBlockingQueue`\n  - `LinkedBlockingQuewue`\n  - `PriorityBlockingQueue`\n- 拒绝策略\n  - 丢弃任务并抛异常\n  - 直接丢掉新任务\n  - 丢掉队列中最早的任务\n  - 提交任务的线程执行该任务\n\n# 任务提交执行流程\n\n1. 提交任务\n2. 判断当前线程数是否小雨核心线程，如果小于则创建核心线程执行\n3. 否则判断阻塞队列是否已满，如果已满执行4，否则5\n4. 判断当前线程数是否达到最大线程数，如果达到则触发拒绝策略，否则创建新线程执行\n5. 加入阻塞队列即可\n\n# 参数设计\n\n1. 根据任务类型设计：\n\n   **CPU密集型**：与CPU核心数1～2倍。（不设置过多是CPU已经占用很高，避免无意义的上下文切换）\n\n   **IO密集型**：采用《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：**线程数 = CPU 核心数 \\*（1+平均等待时间/平均工作时间）**\n\n2. 压测确定\n\n   为了更准确的参数配置，可以通过压测来确定服务的最佳线程数量。\n","slug":"线程池","published":1,"updated":"2022-05-31T03:37:34.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zu0027wuh8gavgdwjh","content":"<h1 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h1><p>ThreadPoolExecutor创建，了解线程创建参数避免资源耗尽。</p>\n<h1 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h1><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间</li>\n<li>阻塞队列<ul>\n<li><code>ArrayBlockingQueue</code></li>\n<li><code>LinkedBlockingQuewue</code></li>\n<li><code>PriorityBlockingQueue</code></li>\n</ul>\n</li>\n<li>拒绝策略<ul>\n<li>丢弃任务并抛异常</li>\n<li>直接丢掉新任务</li>\n<li>丢掉队列中最早的任务</li>\n<li>提交任务的线程执行该任务</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"任务提交执行流程\"><a href=\"#任务提交执行流程\" class=\"headerlink\" title=\"任务提交执行流程\"></a>任务提交执行流程</h1><ol>\n<li>提交任务</li>\n<li>判断当前线程数是否小雨核心线程，如果小于则创建核心线程执行</li>\n<li>否则判断阻塞队列是否已满，如果已满执行4，否则5</li>\n<li>判断当前线程数是否达到最大线程数，如果达到则触发拒绝策略，否则创建新线程执行</li>\n<li>加入阻塞队列即可</li>\n</ol>\n<h1 id=\"参数设计\"><a href=\"#参数设计\" class=\"headerlink\" title=\"参数设计\"></a>参数设计</h1><ol>\n<li><p>根据任务类型设计：</p>\n<p><strong>CPU密集型</strong>：与CPU核心数1～2倍。（不设置过多是CPU已经占用很高，避免无意义的上下文切换）</p>\n<p><strong>IO密集型</strong>：采用《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：<strong>线程数 &#x3D; CPU 核心数 *（1+平均等待时间&#x2F;平均工作时间）</strong></p>\n</li>\n<li><p>压测确定</p>\n<p>为了更准确的参数配置，可以通过压测来确定服务的最佳线程数量。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h1><p>ThreadPoolExecutor创建，了解线程创建参数避免资源耗尽。</p>\n<h1 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h1><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间</li>\n<li>阻塞队列<ul>\n<li><code>ArrayBlockingQueue</code></li>\n<li><code>LinkedBlockingQuewue</code></li>\n<li><code>PriorityBlockingQueue</code></li>\n</ul>\n</li>\n<li>拒绝策略<ul>\n<li>丢弃任务并抛异常</li>\n<li>直接丢掉新任务</li>\n<li>丢掉队列中最早的任务</li>\n<li>提交任务的线程执行该任务</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"任务提交执行流程\"><a href=\"#任务提交执行流程\" class=\"headerlink\" title=\"任务提交执行流程\"></a>任务提交执行流程</h1><ol>\n<li>提交任务</li>\n<li>判断当前线程数是否小雨核心线程，如果小于则创建核心线程执行</li>\n<li>否则判断阻塞队列是否已满，如果已满执行4，否则5</li>\n<li>判断当前线程数是否达到最大线程数，如果达到则触发拒绝策略，否则创建新线程执行</li>\n<li>加入阻塞队列即可</li>\n</ol>\n<h1 id=\"参数设计\"><a href=\"#参数设计\" class=\"headerlink\" title=\"参数设计\"></a>参数设计</h1><ol>\n<li><p>根据任务类型设计：</p>\n<p><strong>CPU密集型</strong>：与CPU核心数1～2倍。（不设置过多是CPU已经占用很高，避免无意义的上下文切换）</p>\n<p><strong>IO密集型</strong>：采用《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：<strong>线程数 &#x3D; CPU 核心数 *（1+平均等待时间&#x2F;平均工作时间）</strong></p>\n</li>\n<li><p>压测确定</p>\n<p>为了更准确的参数配置，可以通过压测来确定服务的最佳线程数量。</p>\n</li>\n</ol>\n"},{"title":"组合总和","date":"2022-06-03T02:22:10.000Z","_content":"\n[组合总和](https://leetcode.cn/problems/combination-sum/)\n\n给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。\n\ncandidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 \n\n对于给定的输入，保证和为 target 的不同组合数少于 150 个。\n\n```java\n输入：candidates = [2,3,6,7], target = 7\n输出：[[2,2,3],[7]]\n解释：\n2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。\n7 也是一个候选， 7 = 7 。\n仅有这两种组合。\n```\n\n\n\n思路：针对候选数组，每次可以有三种操作：\n\n- 选取一个继续下一个\n- 选取后不往下走（可重复选取）\n- 不选取往下走\n\n经分析，发现第一个操作的结果会背后两个操作包含，所以只需要考虑后两种即可\n\n代码：\n\n```java\nclass Solution {\n    List<List<Integer>> rsl = new ArrayList();\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        List<Integer> path = new ArrayList();\n        find(candidates, 0, target, path);\n        return rsl;\n    }\n\n    public void find(int[] candidates, int idx, int target, List<Integer> path){\n        if(target < 0) {\n            return;\n        }\n        if(target == 0) {\n            rsl.add(new ArrayList(path));\n            return;\n        }\n        if(idx > candidates.length - 1) {\n            return;\n        }\n        int cur = candidates[idx];\n        // 拿了往下走，被包含所以不用做\n        // path.add(cur);\n        // find(candidates, idx+1, target - cur, path);\n        // path.remove(path.size()-1);\n\n        // 拿了原地不动\n        path.add(cur);\n        find(candidates, idx, target - cur, path);\n        path.remove(path.size()-1);\n\n        // 不拿往下走\n        find(candidates, idx+1, target, path);\n    }\n}\n```\n\n","source":"_posts/组合总和.md","raw":"---\ntitle: 组合总和\ndate: 2022-06-03 10:22:10\ntags:\n  - leetcode\n  - 算法\n  - 组合\n---\n\n[组合总和](https://leetcode.cn/problems/combination-sum/)\n\n给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。\n\ncandidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 \n\n对于给定的输入，保证和为 target 的不同组合数少于 150 个。\n\n```java\n输入：candidates = [2,3,6,7], target = 7\n输出：[[2,2,3],[7]]\n解释：\n2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。\n7 也是一个候选， 7 = 7 。\n仅有这两种组合。\n```\n\n\n\n思路：针对候选数组，每次可以有三种操作：\n\n- 选取一个继续下一个\n- 选取后不往下走（可重复选取）\n- 不选取往下走\n\n经分析，发现第一个操作的结果会背后两个操作包含，所以只需要考虑后两种即可\n\n代码：\n\n```java\nclass Solution {\n    List<List<Integer>> rsl = new ArrayList();\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        List<Integer> path = new ArrayList();\n        find(candidates, 0, target, path);\n        return rsl;\n    }\n\n    public void find(int[] candidates, int idx, int target, List<Integer> path){\n        if(target < 0) {\n            return;\n        }\n        if(target == 0) {\n            rsl.add(new ArrayList(path));\n            return;\n        }\n        if(idx > candidates.length - 1) {\n            return;\n        }\n        int cur = candidates[idx];\n        // 拿了往下走，被包含所以不用做\n        // path.add(cur);\n        // find(candidates, idx+1, target - cur, path);\n        // path.remove(path.size()-1);\n\n        // 拿了原地不动\n        path.add(cur);\n        find(candidates, idx, target - cur, path);\n        path.remove(path.size()-1);\n\n        // 不拿往下走\n        find(candidates, idx+1, target, path);\n    }\n}\n```\n\n","slug":"组合总和","published":1,"updated":"2022-06-03T02:29:36.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zv002awuh8bqqt27mi","content":"<p><a href=\"https://leetcode.cn/problems/combination-sum/\">组合总和</a></p>\n<p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。</p>\n<p>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p>\n<p>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：candidates = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], target = <span class=\"number\">7</span></span><br><span class=\"line\">输出：[[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">7</span>]]</span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"number\">2</span> 和 <span class=\"number\">3</span> 可以形成一组候选，<span class=\"number\">2</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> = <span class=\"number\">7</span> 。注意 <span class=\"number\">2</span> 可以使用多次。</span><br><span class=\"line\"><span class=\"number\">7</span> 也是一个候选， <span class=\"number\">7</span> = <span class=\"number\">7</span> 。</span><br><span class=\"line\">仅有这两种组合。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：针对候选数组，每次可以有三种操作：</p>\n<ul>\n<li>选取一个继续下一个</li>\n<li>选取后不往下走（可重复选取）</li>\n<li>不选取往下走</li>\n</ul>\n<p>经分析，发现第一个操作的结果会背后两个操作包含，所以只需要考虑后两种即可</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; rsl = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        List&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        find(candidates, <span class=\"number\">0</span>, target, path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rsl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> idx, <span class=\"type\">int</span> target, List&lt;Integer&gt; path)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            rsl.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(path));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(idx &gt; candidates.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> candidates[idx];</span><br><span class=\"line\">        <span class=\"comment\">// 拿了往下走，被包含所以不用做</span></span><br><span class=\"line\">        <span class=\"comment\">// path.add(cur);</span></span><br><span class=\"line\">        <span class=\"comment\">// find(candidates, idx+1, target - cur, path);</span></span><br><span class=\"line\">        <span class=\"comment\">// path.remove(path.size()-1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拿了原地不动</span></span><br><span class=\"line\">        path.add(cur);</span><br><span class=\"line\">        find(candidates, idx, target - cur, path);</span><br><span class=\"line\">        path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不拿往下走</span></span><br><span class=\"line\">        find(candidates, idx+<span class=\"number\">1</span>, target, path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/combination-sum/\">组合总和</a></p>\n<p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。</p>\n<p>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p>\n<p>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：candidates = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], target = <span class=\"number\">7</span></span><br><span class=\"line\">输出：[[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">7</span>]]</span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"number\">2</span> 和 <span class=\"number\">3</span> 可以形成一组候选，<span class=\"number\">2</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> = <span class=\"number\">7</span> 。注意 <span class=\"number\">2</span> 可以使用多次。</span><br><span class=\"line\"><span class=\"number\">7</span> 也是一个候选， <span class=\"number\">7</span> = <span class=\"number\">7</span> 。</span><br><span class=\"line\">仅有这两种组合。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：针对候选数组，每次可以有三种操作：</p>\n<ul>\n<li>选取一个继续下一个</li>\n<li>选取后不往下走（可重复选取）</li>\n<li>不选取往下走</li>\n</ul>\n<p>经分析，发现第一个操作的结果会背后两个操作包含，所以只需要考虑后两种即可</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; rsl = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        List&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        find(candidates, <span class=\"number\">0</span>, target, path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rsl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> idx, <span class=\"type\">int</span> target, List&lt;Integer&gt; path)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            rsl.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(path));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(idx &gt; candidates.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> candidates[idx];</span><br><span class=\"line\">        <span class=\"comment\">// 拿了往下走，被包含所以不用做</span></span><br><span class=\"line\">        <span class=\"comment\">// path.add(cur);</span></span><br><span class=\"line\">        <span class=\"comment\">// find(candidates, idx+1, target - cur, path);</span></span><br><span class=\"line\">        <span class=\"comment\">// path.remove(path.size()-1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拿了原地不动</span></span><br><span class=\"line\">        path.add(cur);</span><br><span class=\"line\">        find(candidates, idx, target - cur, path);</span><br><span class=\"line\">        path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不拿往下走</span></span><br><span class=\"line\">        find(candidates, idx+<span class=\"number\">1</span>, target, path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"结构化,半结构化和非结构化数据","date":"2022-06-04T11:07:40.000Z","_content":"\n转自https://cloud.tencent.com/developer/article/1351609\n\n# **一、结构化数据**\n\n结构化的数据是指可以使用[关系型数据库](https://cloud.tencent.com/product/cdb-overview?from=10680)表示和存储，表现为二维形式的数据。一般特点是：数据以行为单位，一行数据表示一个实体的信息，每一行数据的属性是相同的。举一个例子：\n\n```javascript\nid      name            age     gender\n1       Liu Yi          20      male\n2       Chen Er         35      female\n3       Zhang San       28      male\n```\n\n复制\n\n所以，结构化的数据的存储和排列是很有规律的，这对查询和修改等操作很有帮助。\n\n但是，它的扩展性不好。比如，如果字段不固定，利用关系型数据库也是比较困难的，有人会说，需要的时候加个字段就可以了，这样的方法也不是不可以，但在实际运用中每次都进行反复的表结构变更是非常痛苦的，这也容易导致后台接口从数据库取数据出错。你也可以预先设定大量的预备字段，但这样的话，时间一长很容易弄不清除字段和数据的对应状态，即哪个字段保存有哪些数据。\n\n# **二、半结构化数据**\n\n半结构化数据是结构化数据的一种形式，它并不符合关系型数据库或其他数据表的形式关联起来的数据模型结构，但包含相关标记，用来分隔语义元素以及对记录和字段进行分层。因此，它也被称为自描述的结构。\n\n半结构化数据，属于同一类实体可以有不同的属性，即使他们被组合在一起，这些属性的顺序并不重要。\n\n常见的半结构数据有XML和JSON，对于对于两个XML文件，第一个可能有\n\n```javascript\n<person>\n    <name>A</name>\n    <age>13</age>\n    <gender>female</gender>\n</person>\n```\n\n复制\n\n第二个可能为：\n\n```javascript\n<person>\n    <name>B</name>\n    <gender>male</gender>\n</person>\n```\n\n复制\n\n从上面的例子中，属性的顺序是不重要的，不同的半结构化数据的属性的个数是不一定一样的。有些人说半结构化数据是以树或者图的数据结构存储的数据，怎么理解呢？上面的例子中，标签是树的根节点，和标签是子节点。通过这样的数据格式，可以自由地表达很多有用的信息，包括自我描述信息（元数据）。所以，半结构化数据的扩展性是很好的。\n\n# **三、非结构化数据**\n\n非结构化数据是数据结构不规则或不完整，没有预定义的数据模型，不方便用数据库二维逻辑表来表现的数据。包括所有格式的办公文档、文本、图片、各类报表、图像和音频/视频信息等等。\n\n非结构化数据其格式非常多样，标准也是多样性的，而且在技术上非结构化信息比结构化信息更难标准化和理解。所以存储、检索、发布以及利用需要更加智能化的IT技术，比如海量存储、智能检索、知识挖掘、内容保护、信息的增值开发利用等。\n\n# **四、应用场景**\n\n结构化数据，简单来说就是数据库。结合到典型场景中更容易理解，比如企业ERP、财务系统；医疗HIS数据库；教育一卡通；政府行政审批；其他核心数据库等。这些应用需要哪些存储方案呢？基本包括高速存储应用需求、数据备份需求、数据共享需求以及数据容灾需求。\n\n非结构化数据，包括视频、音频、图片、图像、文档、文本等形式。具体到典型案例中，像是医疗影像系统、教育视频点播、视频监控、国土GIS、设计院、文件服务器（PDM/FTP）、媒体资源管理等具体应用，这些行业对于存储需求包括数据存储、数据备份以及数据共享等。\n\n半结构化数据，包括邮件、HTML、报表、资源库等等，典型场景如邮件系统、WEB集群、教学资源库、数据挖掘系统、档案系统等等。这些应用对于数据存储、数据备份、数据共享以及数据归档 等基本存储需求。\n","source":"_posts/结构化-半结构化和非结构化数据.md","raw":"---\ntitle: 结构化,半结构化和非结构化数据\ndate: 2022-06-04 19:07:40\ntags:\n  - 数据处理\n---\n\n转自https://cloud.tencent.com/developer/article/1351609\n\n# **一、结构化数据**\n\n结构化的数据是指可以使用[关系型数据库](https://cloud.tencent.com/product/cdb-overview?from=10680)表示和存储，表现为二维形式的数据。一般特点是：数据以行为单位，一行数据表示一个实体的信息，每一行数据的属性是相同的。举一个例子：\n\n```javascript\nid      name            age     gender\n1       Liu Yi          20      male\n2       Chen Er         35      female\n3       Zhang San       28      male\n```\n\n复制\n\n所以，结构化的数据的存储和排列是很有规律的，这对查询和修改等操作很有帮助。\n\n但是，它的扩展性不好。比如，如果字段不固定，利用关系型数据库也是比较困难的，有人会说，需要的时候加个字段就可以了，这样的方法也不是不可以，但在实际运用中每次都进行反复的表结构变更是非常痛苦的，这也容易导致后台接口从数据库取数据出错。你也可以预先设定大量的预备字段，但这样的话，时间一长很容易弄不清除字段和数据的对应状态，即哪个字段保存有哪些数据。\n\n# **二、半结构化数据**\n\n半结构化数据是结构化数据的一种形式，它并不符合关系型数据库或其他数据表的形式关联起来的数据模型结构，但包含相关标记，用来分隔语义元素以及对记录和字段进行分层。因此，它也被称为自描述的结构。\n\n半结构化数据，属于同一类实体可以有不同的属性，即使他们被组合在一起，这些属性的顺序并不重要。\n\n常见的半结构数据有XML和JSON，对于对于两个XML文件，第一个可能有\n\n```javascript\n<person>\n    <name>A</name>\n    <age>13</age>\n    <gender>female</gender>\n</person>\n```\n\n复制\n\n第二个可能为：\n\n```javascript\n<person>\n    <name>B</name>\n    <gender>male</gender>\n</person>\n```\n\n复制\n\n从上面的例子中，属性的顺序是不重要的，不同的半结构化数据的属性的个数是不一定一样的。有些人说半结构化数据是以树或者图的数据结构存储的数据，怎么理解呢？上面的例子中，标签是树的根节点，和标签是子节点。通过这样的数据格式，可以自由地表达很多有用的信息，包括自我描述信息（元数据）。所以，半结构化数据的扩展性是很好的。\n\n# **三、非结构化数据**\n\n非结构化数据是数据结构不规则或不完整，没有预定义的数据模型，不方便用数据库二维逻辑表来表现的数据。包括所有格式的办公文档、文本、图片、各类报表、图像和音频/视频信息等等。\n\n非结构化数据其格式非常多样，标准也是多样性的，而且在技术上非结构化信息比结构化信息更难标准化和理解。所以存储、检索、发布以及利用需要更加智能化的IT技术，比如海量存储、智能检索、知识挖掘、内容保护、信息的增值开发利用等。\n\n# **四、应用场景**\n\n结构化数据，简单来说就是数据库。结合到典型场景中更容易理解，比如企业ERP、财务系统；医疗HIS数据库；教育一卡通；政府行政审批；其他核心数据库等。这些应用需要哪些存储方案呢？基本包括高速存储应用需求、数据备份需求、数据共享需求以及数据容灾需求。\n\n非结构化数据，包括视频、音频、图片、图像、文档、文本等形式。具体到典型案例中，像是医疗影像系统、教育视频点播、视频监控、国土GIS、设计院、文件服务器（PDM/FTP）、媒体资源管理等具体应用，这些行业对于存储需求包括数据存储、数据备份以及数据共享等。\n\n半结构化数据，包括邮件、HTML、报表、资源库等等，典型场景如邮件系统、WEB集群、教学资源库、数据挖掘系统、档案系统等等。这些应用对于数据存储、数据备份、数据共享以及数据归档 等基本存储需求。\n","slug":"结构化-半结构化和非结构化数据","published":1,"updated":"2022-06-04T11:13:26.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zw002bwuh8fohcf0zo","content":"<p>转自<a href=\"https://cloud.tencent.com/developer/article/1351609\">https://cloud.tencent.com/developer/article/1351609</a></p>\n<h1 id=\"一、结构化数据\"><a href=\"#一、结构化数据\" class=\"headerlink\" title=\"一、结构化数据\"></a><strong>一、结构化数据</strong></h1><p>结构化的数据是指可以使用<a href=\"https://cloud.tencent.com/product/cdb-overview?from=10680\">关系型数据库</a>表示和存储，表现为二维形式的数据。一般特点是：数据以行为单位，一行数据表示一个实体的信息，每一行数据的属性是相同的。举一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id      name            age     gender</span><br><span class=\"line\"><span class=\"number\">1</span>       <span class=\"title class_\">Liu</span> <span class=\"title class_\">Yi</span>          <span class=\"number\">20</span>      male</span><br><span class=\"line\"><span class=\"number\">2</span>       <span class=\"title class_\">Chen</span> <span class=\"title class_\">Er</span>         <span class=\"number\">35</span>      female</span><br><span class=\"line\"><span class=\"number\">3</span>       <span class=\"title class_\">Zhang</span> <span class=\"title class_\">San</span>       <span class=\"number\">28</span>      male</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>所以，结构化的数据的存储和排列是很有规律的，这对查询和修改等操作很有帮助。</p>\n<p>但是，它的扩展性不好。比如，如果字段不固定，利用关系型数据库也是比较困难的，有人会说，需要的时候加个字段就可以了，这样的方法也不是不可以，但在实际运用中每次都进行反复的表结构变更是非常痛苦的，这也容易导致后台接口从数据库取数据出错。你也可以预先设定大量的预备字段，但这样的话，时间一长很容易弄不清除字段和数据的对应状态，即哪个字段保存有哪些数据。</p>\n<h1 id=\"二、半结构化数据\"><a href=\"#二、半结构化数据\" class=\"headerlink\" title=\"二、半结构化数据\"></a><strong>二、半结构化数据</strong></h1><p>半结构化数据是结构化数据的一种形式，它并不符合关系型数据库或其他数据表的形式关联起来的数据模型结构，但包含相关标记，用来分隔语义元素以及对记录和字段进行分层。因此，它也被称为自描述的结构。</p>\n<p>半结构化数据，属于同一类实体可以有不同的属性，即使他们被组合在一起，这些属性的顺序并不重要。</p>\n<p>常见的半结构数据有XML和JSON，对于对于两个XML文件，第一个可能有</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;person&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">gender</span>&gt;</span>female<span class=\"tag\">&lt;/<span class=\"name\">gender</span>&gt;</span></span></span><br><span class=\"line\">&lt;/person&gt;</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>第二个可能为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;person&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">gender</span>&gt;</span>male<span class=\"tag\">&lt;/<span class=\"name\">gender</span>&gt;</span></span></span><br><span class=\"line\">&lt;/person&gt;</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>从上面的例子中，属性的顺序是不重要的，不同的半结构化数据的属性的个数是不一定一样的。有些人说半结构化数据是以树或者图的数据结构存储的数据，怎么理解呢？上面的例子中，标签是树的根节点，和标签是子节点。通过这样的数据格式，可以自由地表达很多有用的信息，包括自我描述信息（元数据）。所以，半结构化数据的扩展性是很好的。</p>\n<h1 id=\"三、非结构化数据\"><a href=\"#三、非结构化数据\" class=\"headerlink\" title=\"三、非结构化数据\"></a><strong>三、非结构化数据</strong></h1><p>非结构化数据是数据结构不规则或不完整，没有预定义的数据模型，不方便用数据库二维逻辑表来表现的数据。包括所有格式的办公文档、文本、图片、各类报表、图像和音频&#x2F;视频信息等等。</p>\n<p>非结构化数据其格式非常多样，标准也是多样性的，而且在技术上非结构化信息比结构化信息更难标准化和理解。所以存储、检索、发布以及利用需要更加智能化的IT技术，比如海量存储、智能检索、知识挖掘、内容保护、信息的增值开发利用等。</p>\n<h1 id=\"四、应用场景\"><a href=\"#四、应用场景\" class=\"headerlink\" title=\"四、应用场景\"></a><strong>四、应用场景</strong></h1><p>结构化数据，简单来说就是数据库。结合到典型场景中更容易理解，比如企业ERP、财务系统；医疗HIS数据库；教育一卡通；政府行政审批；其他核心数据库等。这些应用需要哪些存储方案呢？基本包括高速存储应用需求、数据备份需求、数据共享需求以及数据容灾需求。</p>\n<p>非结构化数据，包括视频、音频、图片、图像、文档、文本等形式。具体到典型案例中，像是医疗影像系统、教育视频点播、视频监控、国土GIS、设计院、文件服务器（PDM&#x2F;FTP）、媒体资源管理等具体应用，这些行业对于存储需求包括数据存储、数据备份以及数据共享等。</p>\n<p>半结构化数据，包括邮件、HTML、报表、资源库等等，典型场景如邮件系统、WEB集群、教学资源库、数据挖掘系统、档案系统等等。这些应用对于数据存储、数据备份、数据共享以及数据归档 等基本存储需求。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转自<a href=\"https://cloud.tencent.com/developer/article/1351609\">https://cloud.tencent.com/developer/article/1351609</a></p>\n<h1 id=\"一、结构化数据\"><a href=\"#一、结构化数据\" class=\"headerlink\" title=\"一、结构化数据\"></a><strong>一、结构化数据</strong></h1><p>结构化的数据是指可以使用<a href=\"https://cloud.tencent.com/product/cdb-overview?from=10680\">关系型数据库</a>表示和存储，表现为二维形式的数据。一般特点是：数据以行为单位，一行数据表示一个实体的信息，每一行数据的属性是相同的。举一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id      name            age     gender</span><br><span class=\"line\"><span class=\"number\">1</span>       <span class=\"title class_\">Liu</span> <span class=\"title class_\">Yi</span>          <span class=\"number\">20</span>      male</span><br><span class=\"line\"><span class=\"number\">2</span>       <span class=\"title class_\">Chen</span> <span class=\"title class_\">Er</span>         <span class=\"number\">35</span>      female</span><br><span class=\"line\"><span class=\"number\">3</span>       <span class=\"title class_\">Zhang</span> <span class=\"title class_\">San</span>       <span class=\"number\">28</span>      male</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>所以，结构化的数据的存储和排列是很有规律的，这对查询和修改等操作很有帮助。</p>\n<p>但是，它的扩展性不好。比如，如果字段不固定，利用关系型数据库也是比较困难的，有人会说，需要的时候加个字段就可以了，这样的方法也不是不可以，但在实际运用中每次都进行反复的表结构变更是非常痛苦的，这也容易导致后台接口从数据库取数据出错。你也可以预先设定大量的预备字段，但这样的话，时间一长很容易弄不清除字段和数据的对应状态，即哪个字段保存有哪些数据。</p>\n<h1 id=\"二、半结构化数据\"><a href=\"#二、半结构化数据\" class=\"headerlink\" title=\"二、半结构化数据\"></a><strong>二、半结构化数据</strong></h1><p>半结构化数据是结构化数据的一种形式，它并不符合关系型数据库或其他数据表的形式关联起来的数据模型结构，但包含相关标记，用来分隔语义元素以及对记录和字段进行分层。因此，它也被称为自描述的结构。</p>\n<p>半结构化数据，属于同一类实体可以有不同的属性，即使他们被组合在一起，这些属性的顺序并不重要。</p>\n<p>常见的半结构数据有XML和JSON，对于对于两个XML文件，第一个可能有</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;person&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">gender</span>&gt;</span>female<span class=\"tag\">&lt;/<span class=\"name\">gender</span>&gt;</span></span></span><br><span class=\"line\">&lt;/person&gt;</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>第二个可能为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;person&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">gender</span>&gt;</span>male<span class=\"tag\">&lt;/<span class=\"name\">gender</span>&gt;</span></span></span><br><span class=\"line\">&lt;/person&gt;</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>从上面的例子中，属性的顺序是不重要的，不同的半结构化数据的属性的个数是不一定一样的。有些人说半结构化数据是以树或者图的数据结构存储的数据，怎么理解呢？上面的例子中，标签是树的根节点，和标签是子节点。通过这样的数据格式，可以自由地表达很多有用的信息，包括自我描述信息（元数据）。所以，半结构化数据的扩展性是很好的。</p>\n<h1 id=\"三、非结构化数据\"><a href=\"#三、非结构化数据\" class=\"headerlink\" title=\"三、非结构化数据\"></a><strong>三、非结构化数据</strong></h1><p>非结构化数据是数据结构不规则或不完整，没有预定义的数据模型，不方便用数据库二维逻辑表来表现的数据。包括所有格式的办公文档、文本、图片、各类报表、图像和音频&#x2F;视频信息等等。</p>\n<p>非结构化数据其格式非常多样，标准也是多样性的，而且在技术上非结构化信息比结构化信息更难标准化和理解。所以存储、检索、发布以及利用需要更加智能化的IT技术，比如海量存储、智能检索、知识挖掘、内容保护、信息的增值开发利用等。</p>\n<h1 id=\"四、应用场景\"><a href=\"#四、应用场景\" class=\"headerlink\" title=\"四、应用场景\"></a><strong>四、应用场景</strong></h1><p>结构化数据，简单来说就是数据库。结合到典型场景中更容易理解，比如企业ERP、财务系统；医疗HIS数据库；教育一卡通；政府行政审批；其他核心数据库等。这些应用需要哪些存储方案呢？基本包括高速存储应用需求、数据备份需求、数据共享需求以及数据容灾需求。</p>\n<p>非结构化数据，包括视频、音频、图片、图像、文档、文本等形式。具体到典型案例中，像是医疗影像系统、教育视频点播、视频监控、国土GIS、设计院、文件服务器（PDM&#x2F;FTP）、媒体资源管理等具体应用，这些行业对于存储需求包括数据存储、数据备份以及数据共享等。</p>\n<p>半结构化数据，包括邮件、HTML、报表、资源库等等，典型场景如邮件系统、WEB集群、教学资源库、数据挖掘系统、档案系统等等。这些应用对于数据存储、数据备份、数据共享以及数据归档 等基本存储需求。</p>\n"},{"title":"英文面试自我介绍","date":"2022-06-05T02:59:50.000Z","_content":"\n转自: [英文面试准备](https://zhuanlan.zhihu.com/p/30566237)\n\n外企面试，英文自我介绍是必答题，是送分题。\n\n无论是电话面试，还是face to face面试，只要能流利，语速适度的完成1分钟左右自我介绍，基本都可以通关。\n\n而大部分面试者，要么没有准备，要么磕磕巴巴，要么自我介绍太长，要么语速过快......\n\n如果你面试环节的自我介绍被面试官打断了，99%是个失败的自我介绍。 \n\n**英语面试都有套路和方法的，内容原创，禁止转载。**\n\n\n\n帮助大家有个精彩面试开局，**奉上英语自我介绍**「 **方程式」。**\n\n## **回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。**\n\n## **01 自我介绍方程式**\n\n## **A. For New Graduates 毕业生自我介绍**\n\n我叫小小，xx大学，xx专业毕业。大学期间我顺利通过xx级，xx级，拿到xx证书，我的平均成绩都在Top xx，我是xx协会的xx，是xx志愿者，我在平时还参加了xx实践项目。我熟练掌握英语、计算机和xx，精通office软件，具有(可以开始说你的各种能力)良好的沟通能力，xx能力，xx能力，xx能力，和人际交往能力....我相信我很适合xx职位.谢谢。\n\nI am **Xiao Xiao**. I recently graduated from **×× University** with a **bachelor degree in Business Accounting**. My GPA was among the **top 3** in my class. I passed **CET6.** Besides studying I was very active on campus. I participated in **volunteer activities** whenever I had time. I became the **Chairman for the Student Union** during my senior year. I also worked with Baidu as a **Social Media Intern** for a semester. I learned a lot about **content curation** and **using social media tools**. I could speak **（pretty） good English** and I’m fluent in Mandarin Chinese (Hahaha...因为我是中国人). I am highly proficient with **Office.** I have great communication **skills**. I am an **outgoing person**. I am very **responsible and hardworking**. I believe I’m a good fit for the Department Assistant position. Thank you for the opportunity.\n\n描述顺序拆解：\n\n![v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r](v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r.jpg)\n\n**B. For Working Professionals 有工作经验自我介绍**\n\n我是小小，具有xx年xx领域的经验，现在是xx公司xx职位。之前是有xx年xx行业经验，xx行业xx经验。我的专长是xx比如说品牌管理和业务发展。我也很擅长xx比如说项目管理和活动策划。我英语很好英语、计算机和xx，擅长xx， 在工作中，我曾经获得xx等奖项。我有优秀的沟通技能，有很强的团队精神和自我驱动力。我相信以我的经验和热情我能够在xx岗位上给xx公司的成功做出贡献。谢谢。\n\nI am **Xiao Xiao**. I have **over 8 years of experience in marketing**. I am the **team manager of marketing for HP since 2013**. Previously I worked in **IT for a year** and **retail for another 4 years or so**. My specialties include **brand management** and **business development**. I’m also very experienced with **project management** and **event coordination**. I was voted the **2016 Best Employee** among my peers. I could speak **（pretty） good English** and I’m fluent in Mandarin Chinese(Hahaha...因为我是中国人). I am highly proficient with **Microsoft Office softwares and Photoshop**. I have **excellent written and verbal communication skills**. I’m a **team player and self-driven**. I believe I have the combination of experience and enthusiasm to contribute to the success of Intel Shanghai as the Senior Manager of Marketing. Thanks. \n\n描述顺序拆解：\n\n![v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg](v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg.png)\n\n**C. Top 10个常用句型**\n\n**计算机和英语证书**\n\nI am highly proficient with…\n\n**学习成绩优秀**\n\nMy grades were top in the class.\n\n**社团/志愿者/实践项目**\n\nI was very active on campus.\n\nI’ve participated in many campus groups, volunteer programs, and practical activities\n\n**具备能力**\n\nI’m passionate about…\n\nI’m very familiar with…\n\nI’m experienced with…\n\n**行业经验**\n\nI’ve work in marketing/sales/business development/international education for X years\n\n**管理经验**\n\nI have x years of management experiences\n\n**项目经验**\n\nI took the lead in xxx project which was very successful.\n\n**获奖经历**\n\nI was recognized as…\n\nI was awarded the…\n\nI was voted the…\n\n**性格特质**\n\nI’m a people person.\n\nI’m a team player.\n\nI’m very hardworking.\n\nI’m super self-driven.\n\n**职位匹配描述**\n\nI believe I have the right combination of experience and enthusiasm to be successful in xxx position.\n\nI believe I am a good fit for xxx company as the xxx position. \n\nI believe I can do a great job as your xxx.\n\n\n\n**D: General Skill list 通用技能列表**\n\n**Personality and Characteristics 好用的性格和特征**\n\nA people person; 善于与人打交道的人\n\nA team player; 善于团队合作的人\n\nA good listener;好的倾听者\n\nA good leader; 好的领导\n\nAn analytical thinker; 善于分析的思考者\n\nHard working; 勤奋的\n\nSelf-motivated;有上进心的，积极主动的\n\nVery driven;自我驱动很强的\n\nAdaptable; 适应能力不错\n\nEnergetic;精力充沛的\n\nProactive;积极主动的\n\nBusiness oriented;商业/业务导向的\n\nResults oriented;结果导向的\n\nHigh attention to detail; 非常关注细节\n\n\n\n**Skills 技能**\n\nExcellent communication skills; 卓越的沟通技能\n\nOutstanding organization skills; 出众的组织技能\n\nGreat verbal and written communication\nskills in English and Chinese; 优秀的中英文口语和书面交流技能\n\nGood interpersonal skills; 很好的交际能力\n\nFantastic organizational skills; 极好组织能力\n\nExcellent time management skills;卓越的时间管理技能\n\nFantastic negotiation skills；极好的谈判技能\n\nStrong analytical skills; 很强的分析能力\n\nHighly proficient in PC skills.精通电脑\n\n\n\n**Abilities 能力**\n\nAbility to work effectively with staff at all levels; 能和各个级别员工高效工作\n\nAbility to interpret financial statements/statistics; 解释财务报表/统计数据的能力\n\nStrong problem solving ability; 较强的问题处理能力\n\nStrong business acumen; 良好的商业敏感度\n\nAbility to prioritize and work within tight timeframe; 能在时间紧迫的情况下安排工作优先等级\n\nExcellent research ability; 优秀的研究/调研能力\n\nVery familiar with labor law and related policies in China; 非常熟悉劳动法和中国的相关政策法规\n\nFluent in both English and Mandarin Chinese;英语和中文都很流利\n\nTech savvy；科技通\n\nAbility to adapt quickly to any new accounting/information system; 能够迅速适应任何新会计/信息系统\n\n\n\n**Computer skills 电脑技能**\n\nGood at Office 精通 Office\n\nProficient in Photoshop 精通PS\n\nHigh proficiency in PowerPoint 精通PPT\n\nAdvanced level proficiency in Excel 精通Excel\n\n\n\n**Certificate List 证书列表**\n\nCET-4;四级\n\nCET-6;六级\n\nCertificate of English Interpreting:\nPreliminary; 英语初级口译\n\nCertificate of English Interpreting:\nIntermediate; 英语中级口译\n\nCertificate of English Interpreting:\nAdvanced; 英语高级口译\n\nCertificate of Teachers’Qualification (English); 教师资格证书\n\nCertificate of Mandarin Test.普通话测试证书\n\n......\n\n\n\n**Personality and characteristics 更多性格特质形容词**\n\naggressive有进取心的,攻击性的 (这不是一个好的特质，听起来像是很有野心)\n\npassionate/enthusiastic 热情的\n\ncreative 富有创造性（力）的\n\ninsightful 富有洞察力的\n\ndiligent 好学的,勤奋的\n\nliberal 慷慨的,不拘泥的,宽大的\n\nnice 友善的\n\nKind 善良的\n\nfriendly 友善的\n\nconsiderate考虑周到的,体谅的\n\nhumorous 幽默的\n\nconfident 自信的\n\nimaginative 富想像力的\n\nresponsible 负责的\n\ncourageous 勇敢的\n\nindependent 独立的\n\ndemanding 要求多的 （a demanding position对员工要求很多，很高的职位）\n\nindividualistic 个人主义的\n\nefficient 效率高的,有能力的\n\nenergetic 精力旺盛的\n\nloyal 忠诚的\n\nmodest 谦虚的\n\nthoughtful 考虑周到的\n\nmotivated 有动力的\n\npositive/optimistic 积极的/乐观的\n\nopen-minded 思想开明的\n\ntrustworthy 值得信赖的\n\ngentle 温文尔雅的\n\nprecise 精确的\n\ngood-natured 脾气好的,温厚的\n\nidealistic 理想主义的\n\nwitty 急智的\n\nwise 明智的,聪明的\n\nsmart/intelligent/clever 聪明的\n\noutgoing/sociable 爱好交际的\n\neasy-going 随和的,跟谁都处得来\n","source":"_posts/英文面试自我介绍.md","raw":"---\ntitle: 英文面试自我介绍\ndate: 2022-06-05 10:59:50\ntags:\n  - 面试\n  - 英语\n---\n\n转自: [英文面试准备](https://zhuanlan.zhihu.com/p/30566237)\n\n外企面试，英文自我介绍是必答题，是送分题。\n\n无论是电话面试，还是face to face面试，只要能流利，语速适度的完成1分钟左右自我介绍，基本都可以通关。\n\n而大部分面试者，要么没有准备，要么磕磕巴巴，要么自我介绍太长，要么语速过快......\n\n如果你面试环节的自我介绍被面试官打断了，99%是个失败的自我介绍。 \n\n**英语面试都有套路和方法的，内容原创，禁止转载。**\n\n\n\n帮助大家有个精彩面试开局，**奉上英语自我介绍**「 **方程式」。**\n\n## **回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。**\n\n## **01 自我介绍方程式**\n\n## **A. For New Graduates 毕业生自我介绍**\n\n我叫小小，xx大学，xx专业毕业。大学期间我顺利通过xx级，xx级，拿到xx证书，我的平均成绩都在Top xx，我是xx协会的xx，是xx志愿者，我在平时还参加了xx实践项目。我熟练掌握英语、计算机和xx，精通office软件，具有(可以开始说你的各种能力)良好的沟通能力，xx能力，xx能力，xx能力，和人际交往能力....我相信我很适合xx职位.谢谢。\n\nI am **Xiao Xiao**. I recently graduated from **×× University** with a **bachelor degree in Business Accounting**. My GPA was among the **top 3** in my class. I passed **CET6.** Besides studying I was very active on campus. I participated in **volunteer activities** whenever I had time. I became the **Chairman for the Student Union** during my senior year. I also worked with Baidu as a **Social Media Intern** for a semester. I learned a lot about **content curation** and **using social media tools**. I could speak **（pretty） good English** and I’m fluent in Mandarin Chinese (Hahaha...因为我是中国人). I am highly proficient with **Office.** I have great communication **skills**. I am an **outgoing person**. I am very **responsible and hardworking**. I believe I’m a good fit for the Department Assistant position. Thank you for the opportunity.\n\n描述顺序拆解：\n\n![v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r](v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r.jpg)\n\n**B. For Working Professionals 有工作经验自我介绍**\n\n我是小小，具有xx年xx领域的经验，现在是xx公司xx职位。之前是有xx年xx行业经验，xx行业xx经验。我的专长是xx比如说品牌管理和业务发展。我也很擅长xx比如说项目管理和活动策划。我英语很好英语、计算机和xx，擅长xx， 在工作中，我曾经获得xx等奖项。我有优秀的沟通技能，有很强的团队精神和自我驱动力。我相信以我的经验和热情我能够在xx岗位上给xx公司的成功做出贡献。谢谢。\n\nI am **Xiao Xiao**. I have **over 8 years of experience in marketing**. I am the **team manager of marketing for HP since 2013**. Previously I worked in **IT for a year** and **retail for another 4 years or so**. My specialties include **brand management** and **business development**. I’m also very experienced with **project management** and **event coordination**. I was voted the **2016 Best Employee** among my peers. I could speak **（pretty） good English** and I’m fluent in Mandarin Chinese(Hahaha...因为我是中国人). I am highly proficient with **Microsoft Office softwares and Photoshop**. I have **excellent written and verbal communication skills**. I’m a **team player and self-driven**. I believe I have the combination of experience and enthusiasm to contribute to the success of Intel Shanghai as the Senior Manager of Marketing. Thanks. \n\n描述顺序拆解：\n\n![v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg](v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg.png)\n\n**C. Top 10个常用句型**\n\n**计算机和英语证书**\n\nI am highly proficient with…\n\n**学习成绩优秀**\n\nMy grades were top in the class.\n\n**社团/志愿者/实践项目**\n\nI was very active on campus.\n\nI’ve participated in many campus groups, volunteer programs, and practical activities\n\n**具备能力**\n\nI’m passionate about…\n\nI’m very familiar with…\n\nI’m experienced with…\n\n**行业经验**\n\nI’ve work in marketing/sales/business development/international education for X years\n\n**管理经验**\n\nI have x years of management experiences\n\n**项目经验**\n\nI took the lead in xxx project which was very successful.\n\n**获奖经历**\n\nI was recognized as…\n\nI was awarded the…\n\nI was voted the…\n\n**性格特质**\n\nI’m a people person.\n\nI’m a team player.\n\nI’m very hardworking.\n\nI’m super self-driven.\n\n**职位匹配描述**\n\nI believe I have the right combination of experience and enthusiasm to be successful in xxx position.\n\nI believe I am a good fit for xxx company as the xxx position. \n\nI believe I can do a great job as your xxx.\n\n\n\n**D: General Skill list 通用技能列表**\n\n**Personality and Characteristics 好用的性格和特征**\n\nA people person; 善于与人打交道的人\n\nA team player; 善于团队合作的人\n\nA good listener;好的倾听者\n\nA good leader; 好的领导\n\nAn analytical thinker; 善于分析的思考者\n\nHard working; 勤奋的\n\nSelf-motivated;有上进心的，积极主动的\n\nVery driven;自我驱动很强的\n\nAdaptable; 适应能力不错\n\nEnergetic;精力充沛的\n\nProactive;积极主动的\n\nBusiness oriented;商业/业务导向的\n\nResults oriented;结果导向的\n\nHigh attention to detail; 非常关注细节\n\n\n\n**Skills 技能**\n\nExcellent communication skills; 卓越的沟通技能\n\nOutstanding organization skills; 出众的组织技能\n\nGreat verbal and written communication\nskills in English and Chinese; 优秀的中英文口语和书面交流技能\n\nGood interpersonal skills; 很好的交际能力\n\nFantastic organizational skills; 极好组织能力\n\nExcellent time management skills;卓越的时间管理技能\n\nFantastic negotiation skills；极好的谈判技能\n\nStrong analytical skills; 很强的分析能力\n\nHighly proficient in PC skills.精通电脑\n\n\n\n**Abilities 能力**\n\nAbility to work effectively with staff at all levels; 能和各个级别员工高效工作\n\nAbility to interpret financial statements/statistics; 解释财务报表/统计数据的能力\n\nStrong problem solving ability; 较强的问题处理能力\n\nStrong business acumen; 良好的商业敏感度\n\nAbility to prioritize and work within tight timeframe; 能在时间紧迫的情况下安排工作优先等级\n\nExcellent research ability; 优秀的研究/调研能力\n\nVery familiar with labor law and related policies in China; 非常熟悉劳动法和中国的相关政策法规\n\nFluent in both English and Mandarin Chinese;英语和中文都很流利\n\nTech savvy；科技通\n\nAbility to adapt quickly to any new accounting/information system; 能够迅速适应任何新会计/信息系统\n\n\n\n**Computer skills 电脑技能**\n\nGood at Office 精通 Office\n\nProficient in Photoshop 精通PS\n\nHigh proficiency in PowerPoint 精通PPT\n\nAdvanced level proficiency in Excel 精通Excel\n\n\n\n**Certificate List 证书列表**\n\nCET-4;四级\n\nCET-6;六级\n\nCertificate of English Interpreting:\nPreliminary; 英语初级口译\n\nCertificate of English Interpreting:\nIntermediate; 英语中级口译\n\nCertificate of English Interpreting:\nAdvanced; 英语高级口译\n\nCertificate of Teachers’Qualification (English); 教师资格证书\n\nCertificate of Mandarin Test.普通话测试证书\n\n......\n\n\n\n**Personality and characteristics 更多性格特质形容词**\n\naggressive有进取心的,攻击性的 (这不是一个好的特质，听起来像是很有野心)\n\npassionate/enthusiastic 热情的\n\ncreative 富有创造性（力）的\n\ninsightful 富有洞察力的\n\ndiligent 好学的,勤奋的\n\nliberal 慷慨的,不拘泥的,宽大的\n\nnice 友善的\n\nKind 善良的\n\nfriendly 友善的\n\nconsiderate考虑周到的,体谅的\n\nhumorous 幽默的\n\nconfident 自信的\n\nimaginative 富想像力的\n\nresponsible 负责的\n\ncourageous 勇敢的\n\nindependent 独立的\n\ndemanding 要求多的 （a demanding position对员工要求很多，很高的职位）\n\nindividualistic 个人主义的\n\nefficient 效率高的,有能力的\n\nenergetic 精力旺盛的\n\nloyal 忠诚的\n\nmodest 谦虚的\n\nthoughtful 考虑周到的\n\nmotivated 有动力的\n\npositive/optimistic 积极的/乐观的\n\nopen-minded 思想开明的\n\ntrustworthy 值得信赖的\n\ngentle 温文尔雅的\n\nprecise 精确的\n\ngood-natured 脾气好的,温厚的\n\nidealistic 理想主义的\n\nwitty 急智的\n\nwise 明智的,聪明的\n\nsmart/intelligent/clever 聪明的\n\noutgoing/sociable 爱好交际的\n\neasy-going 随和的,跟谁都处得来\n","slug":"英文面试自我介绍","published":1,"updated":"2022-06-05T03:10:41.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zw002dwuh8bs7rgvca","content":"<p>转自: <a href=\"https://zhuanlan.zhihu.com/p/30566237\">英文面试准备</a></p>\n<p>外企面试，英文自我介绍是必答题，是送分题。</p>\n<p>无论是电话面试，还是face to face面试，只要能流利，语速适度的完成1分钟左右自我介绍，基本都可以通关。</p>\n<p>而大部分面试者，要么没有准备，要么磕磕巴巴，要么自我介绍太长，要么语速过快……</p>\n<p>如果你面试环节的自我介绍被面试官打断了，99%是个失败的自我介绍。 </p>\n<p><strong>英语面试都有套路和方法的，内容原创，禁止转载。</strong></p>\n<p>帮助大家有个精彩面试开局，<strong>奉上英语自我介绍</strong>「 <strong>方程式」。</strong></p>\n<h2 id=\"回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。\"><a href=\"#回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。\" class=\"headerlink\" title=\"回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。\"></a><strong>回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。</strong></h2><h2 id=\"01-自我介绍方程式\"><a href=\"#01-自我介绍方程式\" class=\"headerlink\" title=\"01 自我介绍方程式\"></a><strong>01 自我介绍方程式</strong></h2><h2 id=\"A-For-New-Graduates-毕业生自我介绍\"><a href=\"#A-For-New-Graduates-毕业生自我介绍\" class=\"headerlink\" title=\"A. For New Graduates 毕业生自我介绍\"></a><strong>A. For New Graduates 毕业生自我介绍</strong></h2><p>我叫小小，xx大学，xx专业毕业。大学期间我顺利通过xx级，xx级，拿到xx证书，我的平均成绩都在Top xx，我是xx协会的xx，是xx志愿者，我在平时还参加了xx实践项目。我熟练掌握英语、计算机和xx，精通office软件，具有(可以开始说你的各种能力)良好的沟通能力，xx能力，xx能力，xx能力，和人际交往能力….我相信我很适合xx职位.谢谢。</p>\n<p>I am <strong>Xiao Xiao</strong>. I recently graduated from <strong>×× University</strong> with a <strong>bachelor degree in Business Accounting</strong>. My GPA was among the <strong>top 3</strong> in my class. I passed <strong>CET6.</strong> Besides studying I was very active on campus. I participated in <strong>volunteer activities</strong> whenever I had time. I became the <strong>Chairman for the Student Union</strong> during my senior year. I also worked with Baidu as a <strong>Social Media Intern</strong> for a semester. I learned a lot about <strong>content curation</strong> and <strong>using social media tools</strong>. I could speak <strong>（pretty） good English</strong> and I’m fluent in Mandarin Chinese (Hahaha…因为我是中国人). I am highly proficient with <strong>Office.</strong> I have great communication <strong>skills</strong>. I am an <strong>outgoing person</strong>. I am very <strong>responsible and hardworking</strong>. I believe I’m a good fit for the Department Assistant position. Thank you for the opportunity.</p>\n<p>描述顺序拆解：</p>\n<p><img src=\"/2022/06/05/%E8%8B%B1%E6%96%87%E9%9D%A2%E8%AF%95%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r.jpg\" alt=\"v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r\"></p>\n<p><strong>B. For Working Professionals 有工作经验自我介绍</strong></p>\n<p>我是小小，具有xx年xx领域的经验，现在是xx公司xx职位。之前是有xx年xx行业经验，xx行业xx经验。我的专长是xx比如说品牌管理和业务发展。我也很擅长xx比如说项目管理和活动策划。我英语很好英语、计算机和xx，擅长xx， 在工作中，我曾经获得xx等奖项。我有优秀的沟通技能，有很强的团队精神和自我驱动力。我相信以我的经验和热情我能够在xx岗位上给xx公司的成功做出贡献。谢谢。</p>\n<p>I am <strong>Xiao Xiao</strong>. I have <strong>over 8 years of experience in marketing</strong>. I am the <strong>team manager of marketing for HP since 2013</strong>. Previously I worked in <strong>IT for a year</strong> and <strong>retail for another 4 years or so</strong>. My specialties include <strong>brand management</strong> and <strong>business development</strong>. I’m also very experienced with <strong>project management</strong> and <strong>event coordination</strong>. I was voted the <strong>2016 Best Employee</strong> among my peers. I could speak <strong>（pretty） good English</strong> and I’m fluent in Mandarin Chinese(Hahaha…因为我是中国人). I am highly proficient with <strong>Microsoft Office softwares and Photoshop</strong>. I have <strong>excellent written and verbal communication skills</strong>. I’m a <strong>team player and self-driven</strong>. I believe I have the combination of experience and enthusiasm to contribute to the success of Intel Shanghai as the Senior Manager of Marketing. Thanks. </p>\n<p>描述顺序拆解：</p>\n<p><img src=\"/2022/06/05/%E8%8B%B1%E6%96%87%E9%9D%A2%E8%AF%95%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg.png\" alt=\"v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg\"></p>\n<p><strong>C. Top 10个常用句型</strong></p>\n<p><strong>计算机和英语证书</strong></p>\n<p>I am highly proficient with…</p>\n<p><strong>学习成绩优秀</strong></p>\n<p>My grades were top in the class.</p>\n<p><strong>社团&#x2F;志愿者&#x2F;实践项目</strong></p>\n<p>I was very active on campus.</p>\n<p>I’ve participated in many campus groups, volunteer programs, and practical activities</p>\n<p><strong>具备能力</strong></p>\n<p>I’m passionate about…</p>\n<p>I’m very familiar with…</p>\n<p>I’m experienced with…</p>\n<p><strong>行业经验</strong></p>\n<p>I’ve work in marketing&#x2F;sales&#x2F;business development&#x2F;international education for X years</p>\n<p><strong>管理经验</strong></p>\n<p>I have x years of management experiences</p>\n<p><strong>项目经验</strong></p>\n<p>I took the lead in xxx project which was very successful.</p>\n<p><strong>获奖经历</strong></p>\n<p>I was recognized as…</p>\n<p>I was awarded the…</p>\n<p>I was voted the…</p>\n<p><strong>性格特质</strong></p>\n<p>I’m a people person.</p>\n<p>I’m a team player.</p>\n<p>I’m very hardworking.</p>\n<p>I’m super self-driven.</p>\n<p><strong>职位匹配描述</strong></p>\n<p>I believe I have the right combination of experience and enthusiasm to be successful in xxx position.</p>\n<p>I believe I am a good fit for xxx company as the xxx position. </p>\n<p>I believe I can do a great job as your xxx.</p>\n<p><strong>D: General Skill list 通用技能列表</strong></p>\n<p><strong>Personality and Characteristics 好用的性格和特征</strong></p>\n<p>A people person; 善于与人打交道的人</p>\n<p>A team player; 善于团队合作的人</p>\n<p>A good listener;好的倾听者</p>\n<p>A good leader; 好的领导</p>\n<p>An analytical thinker; 善于分析的思考者</p>\n<p>Hard working; 勤奋的</p>\n<p>Self-motivated;有上进心的，积极主动的</p>\n<p>Very driven;自我驱动很强的</p>\n<p>Adaptable; 适应能力不错</p>\n<p>Energetic;精力充沛的</p>\n<p>Proactive;积极主动的</p>\n<p>Business oriented;商业&#x2F;业务导向的</p>\n<p>Results oriented;结果导向的</p>\n<p>High attention to detail; 非常关注细节</p>\n<p><strong>Skills 技能</strong></p>\n<p>Excellent communication skills; 卓越的沟通技能</p>\n<p>Outstanding organization skills; 出众的组织技能</p>\n<p>Great verbal and written communication<br>skills in English and Chinese; 优秀的中英文口语和书面交流技能</p>\n<p>Good interpersonal skills; 很好的交际能力</p>\n<p>Fantastic organizational skills; 极好组织能力</p>\n<p>Excellent time management skills;卓越的时间管理技能</p>\n<p>Fantastic negotiation skills；极好的谈判技能</p>\n<p>Strong analytical skills; 很强的分析能力</p>\n<p>Highly proficient in PC skills.精通电脑</p>\n<p><strong>Abilities 能力</strong></p>\n<p>Ability to work effectively with staff at all levels; 能和各个级别员工高效工作</p>\n<p>Ability to interpret financial statements&#x2F;statistics; 解释财务报表&#x2F;统计数据的能力</p>\n<p>Strong problem solving ability; 较强的问题处理能力</p>\n<p>Strong business acumen; 良好的商业敏感度</p>\n<p>Ability to prioritize and work within tight timeframe; 能在时间紧迫的情况下安排工作优先等级</p>\n<p>Excellent research ability; 优秀的研究&#x2F;调研能力</p>\n<p>Very familiar with labor law and related policies in China; 非常熟悉劳动法和中国的相关政策法规</p>\n<p>Fluent in both English and Mandarin Chinese;英语和中文都很流利</p>\n<p>Tech savvy；科技通</p>\n<p>Ability to adapt quickly to any new accounting&#x2F;information system; 能够迅速适应任何新会计&#x2F;信息系统</p>\n<p><strong>Computer skills 电脑技能</strong></p>\n<p>Good at Office 精通 Office</p>\n<p>Proficient in Photoshop 精通PS</p>\n<p>High proficiency in PowerPoint 精通PPT</p>\n<p>Advanced level proficiency in Excel 精通Excel</p>\n<p><strong>Certificate List 证书列表</strong></p>\n<p>CET-4;四级</p>\n<p>CET-6;六级</p>\n<p>Certificate of English Interpreting:<br>Preliminary; 英语初级口译</p>\n<p>Certificate of English Interpreting:<br>Intermediate; 英语中级口译</p>\n<p>Certificate of English Interpreting:<br>Advanced; 英语高级口译</p>\n<p>Certificate of Teachers’Qualification (English); 教师资格证书</p>\n<p>Certificate of Mandarin Test.普通话测试证书</p>\n<p>……</p>\n<p><strong>Personality and characteristics 更多性格特质形容词</strong></p>\n<p>aggressive有进取心的,攻击性的 (这不是一个好的特质，听起来像是很有野心)</p>\n<p>passionate&#x2F;enthusiastic 热情的</p>\n<p>creative 富有创造性（力）的</p>\n<p>insightful 富有洞察力的</p>\n<p>diligent 好学的,勤奋的</p>\n<p>liberal 慷慨的,不拘泥的,宽大的</p>\n<p>nice 友善的</p>\n<p>Kind 善良的</p>\n<p>friendly 友善的</p>\n<p>considerate考虑周到的,体谅的</p>\n<p>humorous 幽默的</p>\n<p>confident 自信的</p>\n<p>imaginative 富想像力的</p>\n<p>responsible 负责的</p>\n<p>courageous 勇敢的</p>\n<p>independent 独立的</p>\n<p>demanding 要求多的 （a demanding position对员工要求很多，很高的职位）</p>\n<p>individualistic 个人主义的</p>\n<p>efficient 效率高的,有能力的</p>\n<p>energetic 精力旺盛的</p>\n<p>loyal 忠诚的</p>\n<p>modest 谦虚的</p>\n<p>thoughtful 考虑周到的</p>\n<p>motivated 有动力的</p>\n<p>positive&#x2F;optimistic 积极的&#x2F;乐观的</p>\n<p>open-minded 思想开明的</p>\n<p>trustworthy 值得信赖的</p>\n<p>gentle 温文尔雅的</p>\n<p>precise 精确的</p>\n<p>good-natured 脾气好的,温厚的</p>\n<p>idealistic 理想主义的</p>\n<p>witty 急智的</p>\n<p>wise 明智的,聪明的</p>\n<p>smart&#x2F;intelligent&#x2F;clever 聪明的</p>\n<p>outgoing&#x2F;sociable 爱好交际的</p>\n<p>easy-going 随和的,跟谁都处得来</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转自: <a href=\"https://zhuanlan.zhihu.com/p/30566237\">英文面试准备</a></p>\n<p>外企面试，英文自我介绍是必答题，是送分题。</p>\n<p>无论是电话面试，还是face to face面试，只要能流利，语速适度的完成1分钟左右自我介绍，基本都可以通关。</p>\n<p>而大部分面试者，要么没有准备，要么磕磕巴巴，要么自我介绍太长，要么语速过快……</p>\n<p>如果你面试环节的自我介绍被面试官打断了，99%是个失败的自我介绍。 </p>\n<p><strong>英语面试都有套路和方法的，内容原创，禁止转载。</strong></p>\n<p>帮助大家有个精彩面试开局，<strong>奉上英语自我介绍</strong>「 <strong>方程式」。</strong></p>\n<h2 id=\"回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。\"><a href=\"#回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。\" class=\"headerlink\" title=\"回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。\"></a><strong>回答很长，拿好纸和笔，跟上思路，就可以写出为自己量身定制的自我介绍。</strong></h2><h2 id=\"01-自我介绍方程式\"><a href=\"#01-自我介绍方程式\" class=\"headerlink\" title=\"01 自我介绍方程式\"></a><strong>01 自我介绍方程式</strong></h2><h2 id=\"A-For-New-Graduates-毕业生自我介绍\"><a href=\"#A-For-New-Graduates-毕业生自我介绍\" class=\"headerlink\" title=\"A. For New Graduates 毕业生自我介绍\"></a><strong>A. For New Graduates 毕业生自我介绍</strong></h2><p>我叫小小，xx大学，xx专业毕业。大学期间我顺利通过xx级，xx级，拿到xx证书，我的平均成绩都在Top xx，我是xx协会的xx，是xx志愿者，我在平时还参加了xx实践项目。我熟练掌握英语、计算机和xx，精通office软件，具有(可以开始说你的各种能力)良好的沟通能力，xx能力，xx能力，xx能力，和人际交往能力….我相信我很适合xx职位.谢谢。</p>\n<p>I am <strong>Xiao Xiao</strong>. I recently graduated from <strong>×× University</strong> with a <strong>bachelor degree in Business Accounting</strong>. My GPA was among the <strong>top 3</strong> in my class. I passed <strong>CET6.</strong> Besides studying I was very active on campus. I participated in <strong>volunteer activities</strong> whenever I had time. I became the <strong>Chairman for the Student Union</strong> during my senior year. I also worked with Baidu as a <strong>Social Media Intern</strong> for a semester. I learned a lot about <strong>content curation</strong> and <strong>using social media tools</strong>. I could speak <strong>（pretty） good English</strong> and I’m fluent in Mandarin Chinese (Hahaha…因为我是中国人). I am highly proficient with <strong>Office.</strong> I have great communication <strong>skills</strong>. I am an <strong>outgoing person</strong>. I am very <strong>responsible and hardworking</strong>. I believe I’m a good fit for the Department Assistant position. Thank you for the opportunity.</p>\n<p>描述顺序拆解：</p>\n<p><img src=\"/2022/06/05/%E8%8B%B1%E6%96%87%E9%9D%A2%E8%AF%95%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r.jpg\" alt=\"v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r\"></p>\n<p><strong>B. For Working Professionals 有工作经验自我介绍</strong></p>\n<p>我是小小，具有xx年xx领域的经验，现在是xx公司xx职位。之前是有xx年xx行业经验，xx行业xx经验。我的专长是xx比如说品牌管理和业务发展。我也很擅长xx比如说项目管理和活动策划。我英语很好英语、计算机和xx，擅长xx， 在工作中，我曾经获得xx等奖项。我有优秀的沟通技能，有很强的团队精神和自我驱动力。我相信以我的经验和热情我能够在xx岗位上给xx公司的成功做出贡献。谢谢。</p>\n<p>I am <strong>Xiao Xiao</strong>. I have <strong>over 8 years of experience in marketing</strong>. I am the <strong>team manager of marketing for HP since 2013</strong>. Previously I worked in <strong>IT for a year</strong> and <strong>retail for another 4 years or so</strong>. My specialties include <strong>brand management</strong> and <strong>business development</strong>. I’m also very experienced with <strong>project management</strong> and <strong>event coordination</strong>. I was voted the <strong>2016 Best Employee</strong> among my peers. I could speak <strong>（pretty） good English</strong> and I’m fluent in Mandarin Chinese(Hahaha…因为我是中国人). I am highly proficient with <strong>Microsoft Office softwares and Photoshop</strong>. I have <strong>excellent written and verbal communication skills</strong>. I’m a <strong>team player and self-driven</strong>. I believe I have the combination of experience and enthusiasm to contribute to the success of Intel Shanghai as the Senior Manager of Marketing. Thanks. </p>\n<p>描述顺序拆解：</p>\n<p><img src=\"/2022/06/05/%E8%8B%B1%E6%96%87%E9%9D%A2%E8%AF%95%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg.png\" alt=\"v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg\"></p>\n<p><strong>C. Top 10个常用句型</strong></p>\n<p><strong>计算机和英语证书</strong></p>\n<p>I am highly proficient with…</p>\n<p><strong>学习成绩优秀</strong></p>\n<p>My grades were top in the class.</p>\n<p><strong>社团&#x2F;志愿者&#x2F;实践项目</strong></p>\n<p>I was very active on campus.</p>\n<p>I’ve participated in many campus groups, volunteer programs, and practical activities</p>\n<p><strong>具备能力</strong></p>\n<p>I’m passionate about…</p>\n<p>I’m very familiar with…</p>\n<p>I’m experienced with…</p>\n<p><strong>行业经验</strong></p>\n<p>I’ve work in marketing&#x2F;sales&#x2F;business development&#x2F;international education for X years</p>\n<p><strong>管理经验</strong></p>\n<p>I have x years of management experiences</p>\n<p><strong>项目经验</strong></p>\n<p>I took the lead in xxx project which was very successful.</p>\n<p><strong>获奖经历</strong></p>\n<p>I was recognized as…</p>\n<p>I was awarded the…</p>\n<p>I was voted the…</p>\n<p><strong>性格特质</strong></p>\n<p>I’m a people person.</p>\n<p>I’m a team player.</p>\n<p>I’m very hardworking.</p>\n<p>I’m super self-driven.</p>\n<p><strong>职位匹配描述</strong></p>\n<p>I believe I have the right combination of experience and enthusiasm to be successful in xxx position.</p>\n<p>I believe I am a good fit for xxx company as the xxx position. </p>\n<p>I believe I can do a great job as your xxx.</p>\n<p><strong>D: General Skill list 通用技能列表</strong></p>\n<p><strong>Personality and Characteristics 好用的性格和特征</strong></p>\n<p>A people person; 善于与人打交道的人</p>\n<p>A team player; 善于团队合作的人</p>\n<p>A good listener;好的倾听者</p>\n<p>A good leader; 好的领导</p>\n<p>An analytical thinker; 善于分析的思考者</p>\n<p>Hard working; 勤奋的</p>\n<p>Self-motivated;有上进心的，积极主动的</p>\n<p>Very driven;自我驱动很强的</p>\n<p>Adaptable; 适应能力不错</p>\n<p>Energetic;精力充沛的</p>\n<p>Proactive;积极主动的</p>\n<p>Business oriented;商业&#x2F;业务导向的</p>\n<p>Results oriented;结果导向的</p>\n<p>High attention to detail; 非常关注细节</p>\n<p><strong>Skills 技能</strong></p>\n<p>Excellent communication skills; 卓越的沟通技能</p>\n<p>Outstanding organization skills; 出众的组织技能</p>\n<p>Great verbal and written communication<br>skills in English and Chinese; 优秀的中英文口语和书面交流技能</p>\n<p>Good interpersonal skills; 很好的交际能力</p>\n<p>Fantastic organizational skills; 极好组织能力</p>\n<p>Excellent time management skills;卓越的时间管理技能</p>\n<p>Fantastic negotiation skills；极好的谈判技能</p>\n<p>Strong analytical skills; 很强的分析能力</p>\n<p>Highly proficient in PC skills.精通电脑</p>\n<p><strong>Abilities 能力</strong></p>\n<p>Ability to work effectively with staff at all levels; 能和各个级别员工高效工作</p>\n<p>Ability to interpret financial statements&#x2F;statistics; 解释财务报表&#x2F;统计数据的能力</p>\n<p>Strong problem solving ability; 较强的问题处理能力</p>\n<p>Strong business acumen; 良好的商业敏感度</p>\n<p>Ability to prioritize and work within tight timeframe; 能在时间紧迫的情况下安排工作优先等级</p>\n<p>Excellent research ability; 优秀的研究&#x2F;调研能力</p>\n<p>Very familiar with labor law and related policies in China; 非常熟悉劳动法和中国的相关政策法规</p>\n<p>Fluent in both English and Mandarin Chinese;英语和中文都很流利</p>\n<p>Tech savvy；科技通</p>\n<p>Ability to adapt quickly to any new accounting&#x2F;information system; 能够迅速适应任何新会计&#x2F;信息系统</p>\n<p><strong>Computer skills 电脑技能</strong></p>\n<p>Good at Office 精通 Office</p>\n<p>Proficient in Photoshop 精通PS</p>\n<p>High proficiency in PowerPoint 精通PPT</p>\n<p>Advanced level proficiency in Excel 精通Excel</p>\n<p><strong>Certificate List 证书列表</strong></p>\n<p>CET-4;四级</p>\n<p>CET-6;六级</p>\n<p>Certificate of English Interpreting:<br>Preliminary; 英语初级口译</p>\n<p>Certificate of English Interpreting:<br>Intermediate; 英语中级口译</p>\n<p>Certificate of English Interpreting:<br>Advanced; 英语高级口译</p>\n<p>Certificate of Teachers’Qualification (English); 教师资格证书</p>\n<p>Certificate of Mandarin Test.普通话测试证书</p>\n<p>……</p>\n<p><strong>Personality and characteristics 更多性格特质形容词</strong></p>\n<p>aggressive有进取心的,攻击性的 (这不是一个好的特质，听起来像是很有野心)</p>\n<p>passionate&#x2F;enthusiastic 热情的</p>\n<p>creative 富有创造性（力）的</p>\n<p>insightful 富有洞察力的</p>\n<p>diligent 好学的,勤奋的</p>\n<p>liberal 慷慨的,不拘泥的,宽大的</p>\n<p>nice 友善的</p>\n<p>Kind 善良的</p>\n<p>friendly 友善的</p>\n<p>considerate考虑周到的,体谅的</p>\n<p>humorous 幽默的</p>\n<p>confident 自信的</p>\n<p>imaginative 富想像力的</p>\n<p>responsible 负责的</p>\n<p>courageous 勇敢的</p>\n<p>independent 独立的</p>\n<p>demanding 要求多的 （a demanding position对员工要求很多，很高的职位）</p>\n<p>individualistic 个人主义的</p>\n<p>efficient 效率高的,有能力的</p>\n<p>energetic 精力旺盛的</p>\n<p>loyal 忠诚的</p>\n<p>modest 谦虚的</p>\n<p>thoughtful 考虑周到的</p>\n<p>motivated 有动力的</p>\n<p>positive&#x2F;optimistic 积极的&#x2F;乐观的</p>\n<p>open-minded 思想开明的</p>\n<p>trustworthy 值得信赖的</p>\n<p>gentle 温文尔雅的</p>\n<p>precise 精确的</p>\n<p>good-natured 脾气好的,温厚的</p>\n<p>idealistic 理想主义的</p>\n<p>witty 急智的</p>\n<p>wise 明智的,聪明的</p>\n<p>smart&#x2F;intelligent&#x2F;clever 聪明的</p>\n<p>outgoing&#x2F;sociable 爱好交际的</p>\n<p>easy-going 随和的,跟谁都处得来</p>\n"},{"title":"路径总和 II","date":"2022-06-02T06:52:06.000Z","_content":"\n[路径总和 II](https://leetcode.cn/problems/path-sum-ii/)\n\n给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。\n\n叶子节点 是指没有子节点的节点。\n\n![pathsumii1](pathsumii1.jpg)\n\n```\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]\n```\n\n思路：求root节点开始到叶子节点和为target的路径，等于当前节点加上子节点到叶子节点和为：target - root.val的路径。采用先序遍历，在遍历过程维护当前路径与子路径并及时回退\n\n代码：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // 全局结果\n    List<List<Integer>> result = new ArrayList();\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n        if(root == null) {\n            return result;\n        }\n        // 临时路径\n        List<Integer> tmp = new ArrayList();\n        findPath(root, targetSum, tmp);\n        return result;\n    }\n\n    public void findPath(TreeNode node, int target, List<Integer> tmp){\n        int val = node.val;\n        // 添加当前节点路径\n        tmp.add(val);\n        // 计算子节点需要满足的target\n        target -= val;\n        // 叶子节点\n        if(node.left == null && node.right == null) {\n            if(target == 0) {  // found matched\n                List<Integer> t = new ArrayList();\n                t.addAll(tmp);\n                result.add(t);\n            }\n        } else{\n            // 找左子树\n            if(node.left != null) {\n                findPath(node.left, target, tmp);\n            }\n            if(node.right != null) {\n                findPath(node.right, target, tmp);\n            }\n        }\n\t\t\t\t// 回退临时路径\n        tmp.remove(tmp.size()-1);\n    }\n}\n```\n\n","source":"_posts/路径总和-II.md","raw":"---\ntitle: 路径总和 II\ndate: 2022-06-02 14:52:06\ntags:\n  - leetcode\n  - 算法\n  - 树\n---\n\n[路径总和 II](https://leetcode.cn/problems/path-sum-ii/)\n\n给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。\n\n叶子节点 是指没有子节点的节点。\n\n![pathsumii1](pathsumii1.jpg)\n\n```\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]\n```\n\n思路：求root节点开始到叶子节点和为target的路径，等于当前节点加上子节点到叶子节点和为：target - root.val的路径。采用先序遍历，在遍历过程维护当前路径与子路径并及时回退\n\n代码：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // 全局结果\n    List<List<Integer>> result = new ArrayList();\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n        if(root == null) {\n            return result;\n        }\n        // 临时路径\n        List<Integer> tmp = new ArrayList();\n        findPath(root, targetSum, tmp);\n        return result;\n    }\n\n    public void findPath(TreeNode node, int target, List<Integer> tmp){\n        int val = node.val;\n        // 添加当前节点路径\n        tmp.add(val);\n        // 计算子节点需要满足的target\n        target -= val;\n        // 叶子节点\n        if(node.left == null && node.right == null) {\n            if(target == 0) {  // found matched\n                List<Integer> t = new ArrayList();\n                t.addAll(tmp);\n                result.add(t);\n            }\n        } else{\n            // 找左子树\n            if(node.left != null) {\n                findPath(node.left, target, tmp);\n            }\n            if(node.right != null) {\n                findPath(node.right, target, tmp);\n            }\n        }\n\t\t\t\t// 回退临时路径\n        tmp.remove(tmp.size()-1);\n    }\n}\n```\n\n","slug":"路径总和-II","published":1,"updated":"2022-06-03T02:55:57.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zx002ewuh8bpba0omf","content":"<p><a href=\"https://leetcode.cn/problems/path-sum-ii/\">路径总和 II</a></p>\n<p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p>\n<p>叶子节点 是指没有子节点的节点。</p>\n<p><img src=\"/2022/06/02/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-II/pathsumii1.jpg\" alt=\"pathsumii1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22</span><br><span class=\"line\">输出：[[5,4,11,2],[5,8,4,5]]</span><br></pre></td></tr></table></figure>\n\n<p>思路：求root节点开始到叶子节点和为target的路径，等于当前节点加上子节点到叶子节点和为：target - root.val的路径。采用先序遍历，在遍历过程维护当前路径与子路径并及时回退</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 全局结果</span></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> targetSum)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 临时路径</span></span><br><span class=\"line\">        List&lt;Integer&gt; tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        findPath(root, targetSum, tmp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findPath</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> target, List&lt;Integer&gt; tmp)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> node.val;</span><br><span class=\"line\">        <span class=\"comment\">// 添加当前节点路径</span></span><br><span class=\"line\">        tmp.add(val);</span><br><span class=\"line\">        <span class=\"comment\">// 计算子节点需要满足的target</span></span><br><span class=\"line\">        target -= val;</span><br><span class=\"line\">        <span class=\"comment\">// 叶子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.left == <span class=\"literal\">null</span> &amp;&amp; node.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// found matched</span></span><br><span class=\"line\">                List&lt;Integer&gt; t = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">                t.addAll(tmp);</span><br><span class=\"line\">                result.add(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找左子树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                findPath(node.left, target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                findPath(node.right, target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 回退临时路径</span></span><br><span class=\"line\">        tmp.remove(tmp.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/path-sum-ii/\">路径总和 II</a></p>\n<p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p>\n<p>叶子节点 是指没有子节点的节点。</p>\n<p><img src=\"/2022/06/02/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-II/pathsumii1.jpg\" alt=\"pathsumii1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22</span><br><span class=\"line\">输出：[[5,4,11,2],[5,8,4,5]]</span><br></pre></td></tr></table></figure>\n\n<p>思路：求root节点开始到叶子节点和为target的路径，等于当前节点加上子节点到叶子节点和为：target - root.val的路径。采用先序遍历，在遍历过程维护当前路径与子路径并及时回退</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 全局结果</span></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> targetSum)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 临时路径</span></span><br><span class=\"line\">        List&lt;Integer&gt; tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        findPath(root, targetSum, tmp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findPath</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> target, List&lt;Integer&gt; tmp)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> node.val;</span><br><span class=\"line\">        <span class=\"comment\">// 添加当前节点路径</span></span><br><span class=\"line\">        tmp.add(val);</span><br><span class=\"line\">        <span class=\"comment\">// 计算子节点需要满足的target</span></span><br><span class=\"line\">        target -= val;</span><br><span class=\"line\">        <span class=\"comment\">// 叶子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.left == <span class=\"literal\">null</span> &amp;&amp; node.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// found matched</span></span><br><span class=\"line\">                List&lt;Integer&gt; t = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">                t.addAll(tmp);</span><br><span class=\"line\">                result.add(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找左子树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                findPath(node.left, target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                findPath(node.right, target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 回退临时路径</span></span><br><span class=\"line\">        tmp.remove(tmp.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"长度最小的子数组","date":"2022-06-07T01:41:20.000Z","_content":"\n[长度最小的子数组](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n\n给定一个含有 n 个正整数的数组和一个正整数 target 。\n\n找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。\n\n```\n输入：target = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n```\n\n思路: 先遍历找到第一个累加到大于等于target的索引值idx,找不到就返回0. 随后设置左指针为0, 右指针为idx. 通过控制左右指针移动寻找最短连续子数组长度\n\n代码:\n\n```java\nclass Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        // 最短长度\n        int match = nums.length;\n        // 当前累计和\n        int sum = 0;\n        // 从0开始第一个累计和达到target的索引\n        int beginIdx = -1;\n        for(int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n            if(sum >= target) {\n                beginIdx = i;\n                break;\n            }\n        }\n        if(beginIdx == -1) {\n            return 0;\n        }\n        int l = 0;\n        int r = beginIdx;\n        while(l <= r && r < nums.length) {\n            if(sum >= target) {\n                match = Math.min(match, r - l + 1);\n                if(match == 1) {\n                    return 1;\n                }\n                // 当前sum满足条件,尝试左指针右移并更新sum\n                sum -= nums[l];\n                l++;\n            } else {\n                // 当前sum不满足条件,右指针右移并更新sum\n                r++;\n                if(r >= nums.length){\n                    break;\n                }\n                sum += nums[r];\n            }\n        }\n        return match;\n    }\n}\n```\n\n","source":"_posts/长度最小的子数组.md","raw":"---\ntitle: 长度最小的子数组\ndate: 2022-06-07 09:41:20\ntags:\n  - leetcode\n  - 算法\n  - 双指针\n---\n\n[长度最小的子数组](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n\n给定一个含有 n 个正整数的数组和一个正整数 target 。\n\n找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。\n\n```\n输入：target = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n```\n\n思路: 先遍历找到第一个累加到大于等于target的索引值idx,找不到就返回0. 随后设置左指针为0, 右指针为idx. 通过控制左右指针移动寻找最短连续子数组长度\n\n代码:\n\n```java\nclass Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        // 最短长度\n        int match = nums.length;\n        // 当前累计和\n        int sum = 0;\n        // 从0开始第一个累计和达到target的索引\n        int beginIdx = -1;\n        for(int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n            if(sum >= target) {\n                beginIdx = i;\n                break;\n            }\n        }\n        if(beginIdx == -1) {\n            return 0;\n        }\n        int l = 0;\n        int r = beginIdx;\n        while(l <= r && r < nums.length) {\n            if(sum >= target) {\n                match = Math.min(match, r - l + 1);\n                if(match == 1) {\n                    return 1;\n                }\n                // 当前sum满足条件,尝试左指针右移并更新sum\n                sum -= nums[l];\n                l++;\n            } else {\n                // 当前sum不满足条件,右指针右移并更新sum\n                r++;\n                if(r >= nums.length){\n                    break;\n                }\n                sum += nums[r];\n            }\n        }\n        return match;\n    }\n}\n```\n\n","slug":"长度最小的子数组","published":1,"updated":"2022-06-07T01:46:03.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zx002fwuh808ih0eu2","content":"<p><a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">长度最小的子数组</a></p>\n<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>\n<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>\n\n<p>思路: 先遍历找到第一个累加到大于等于target的索引值idx,找不到就返回0. 随后设置左指针为0, 右指针为idx. 通过控制左右指针移动寻找最短连续子数组长度</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 最短长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">match</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 当前累计和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从0开始第一个累计和达到target的索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">beginIdx</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            sum += nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum &gt;= target) &#123;</span><br><span class=\"line\">                beginIdx = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(beginIdx == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> beginIdx;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt;= r &amp;&amp; r &lt; nums.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum &gt;= target) &#123;</span><br><span class=\"line\">                match = Math.min(match, r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(match == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 当前sum满足条件,尝试左指针右移并更新sum</span></span><br><span class=\"line\">                sum -= nums[l];</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当前sum不满足条件,右指针右移并更新sum</span></span><br><span class=\"line\">                r++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(r &gt;= nums.length)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sum += nums[r];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> match;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">长度最小的子数组</a></p>\n<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>\n<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>\n\n<p>思路: 先遍历找到第一个累加到大于等于target的索引值idx,找不到就返回0. 随后设置左指针为0, 右指针为idx. 通过控制左右指针移动寻找最短连续子数组长度</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 最短长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">match</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 当前累计和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从0开始第一个累计和达到target的索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">beginIdx</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            sum += nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum &gt;= target) &#123;</span><br><span class=\"line\">                beginIdx = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(beginIdx == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> beginIdx;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt;= r &amp;&amp; r &lt; nums.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum &gt;= target) &#123;</span><br><span class=\"line\">                match = Math.min(match, r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(match == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 当前sum满足条件,尝试左指针右移并更新sum</span></span><br><span class=\"line\">                sum -= nums[l];</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当前sum不满足条件,右指针右移并更新sum</span></span><br><span class=\"line\">                r++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(r &gt;= nums.length)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sum += nums[r];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> match;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"零钱兑换","date":"2022-06-01T13:01:29.000Z","_content":"\n[零钱兑换](https://leetcode.cn/problems/coin-change/)\n\n给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。\n\n计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。\n\n你可以认为每种硬币的数量是无限的。\n\n```\n输入：coins = [1, 2, 5], amount = 11\n输出：3 \n解释：11 = 5 + 5 + 1\n```\n\n思路：dp[amount]，计算每个amount的关于提供硬币的所需硬币数量：针对提供的硬币数组，计算从0～amount的dp数组。存在这样的关系：\n\n- 需要计算每一个金额最小的硬币数\n- 遍历每一个硬币，如果可以大于要组成的amount，直接continue（无法通过这个硬币组成该金额）\n- 小于amount，组成amount的硬币个数为：dp[amount - coinAmount] + 1（需要注意，如果dp[amount - coinAmount] 为-1，即无法组成该amount硬币组合，直接continue）\n- 对于每种组合，求最小的进行赋值：dp[amount] = min(dp[amount - coinAmount] ) + 1\n\n\n\n代码：\n\n```java\nclass Solution {\n    public int coinChange(int[] coins, int amount) {\n        int[] dp = new int[amount + 1];\n        for(int am = 1; am <= amount; am++) {\n            Integer count = null;\n            for(int coin : coins) {\n                int other = am - coin;\n                if(other < 0) {\n                    // 如果硬币面值过大，直接丢弃这种组合方式\n                    continue;\n                }else{\n                    // 表示没有这种组合方式，丢弃\n                    if(dp[other] == -1) {\n                        continue;\n                    }\n                    // 首次直接赋值，后续需要取较小值更新\n                    count = count == null ? dp[other] + 1 : Math.min(count,dp[other] + 1);\n                }\n            }\n            dp[am] = count == null ? -1 : count;\n\n        }\n        return dp[amount];\n    }\n}\n```\n\n \n","source":"_posts/零钱兑换.md","raw":"---\ntitle: 零钱兑换\ndate: 2022-06-01 21:01:29\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[零钱兑换](https://leetcode.cn/problems/coin-change/)\n\n给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。\n\n计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。\n\n你可以认为每种硬币的数量是无限的。\n\n```\n输入：coins = [1, 2, 5], amount = 11\n输出：3 \n解释：11 = 5 + 5 + 1\n```\n\n思路：dp[amount]，计算每个amount的关于提供硬币的所需硬币数量：针对提供的硬币数组，计算从0～amount的dp数组。存在这样的关系：\n\n- 需要计算每一个金额最小的硬币数\n- 遍历每一个硬币，如果可以大于要组成的amount，直接continue（无法通过这个硬币组成该金额）\n- 小于amount，组成amount的硬币个数为：dp[amount - coinAmount] + 1（需要注意，如果dp[amount - coinAmount] 为-1，即无法组成该amount硬币组合，直接continue）\n- 对于每种组合，求最小的进行赋值：dp[amount] = min(dp[amount - coinAmount] ) + 1\n\n\n\n代码：\n\n```java\nclass Solution {\n    public int coinChange(int[] coins, int amount) {\n        int[] dp = new int[amount + 1];\n        for(int am = 1; am <= amount; am++) {\n            Integer count = null;\n            for(int coin : coins) {\n                int other = am - coin;\n                if(other < 0) {\n                    // 如果硬币面值过大，直接丢弃这种组合方式\n                    continue;\n                }else{\n                    // 表示没有这种组合方式，丢弃\n                    if(dp[other] == -1) {\n                        continue;\n                    }\n                    // 首次直接赋值，后续需要取较小值更新\n                    count = count == null ? dp[other] + 1 : Math.min(count,dp[other] + 1);\n                }\n            }\n            dp[am] = count == null ? -1 : count;\n\n        }\n        return dp[amount];\n    }\n}\n```\n\n \n","slug":"零钱兑换","published":1,"updated":"2022-06-01T13:27:56.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zy002iwuh8doz85s42","content":"<p><a href=\"https://leetcode.cn/problems/coin-change/\">零钱兑换</a></p>\n<p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p>\n<p>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。</p>\n<p>你可以认为每种硬币的数量是无限的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：coins = [1, 2, 5], amount = 11</span><br><span class=\"line\">输出：3 </span><br><span class=\"line\">解释：11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>\n\n<p>思路：dp[amount]，计算每个amount的关于提供硬币的所需硬币数量：针对提供的硬币数组，计算从0～amount的dp数组。存在这样的关系：</p>\n<ul>\n<li>需要计算每一个金额最小的硬币数</li>\n<li>遍历每一个硬币，如果可以大于要组成的amount，直接continue（无法通过这个硬币组成该金额）</li>\n<li>小于amount，组成amount的硬币个数为：dp[amount - coinAmount] + 1（需要注意，如果dp[amount - coinAmount] 为-1，即无法组成该amount硬币组合，直接continue）</li>\n<li>对于每种组合，求最小的进行赋值：dp[amount] &#x3D; min(dp[amount - coinAmount] ) + 1</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">coinChange</span><span class=\"params\">(<span class=\"type\">int</span>[] coins, <span class=\"type\">int</span> amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">am</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; am &lt;= amount; am++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Integer</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> coin : coins) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">other</span> <span class=\"operator\">=</span> am - coin;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(other &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果硬币面值过大，直接丢弃这种组合方式</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 表示没有这种组合方式，丢弃</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[other] == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 首次直接赋值，后续需要取较小值更新</span></span><br><span class=\"line\">                    count = count == <span class=\"literal\">null</span> ? dp[other] + <span class=\"number\">1</span> : Math.min(count,dp[other] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[am] = count == <span class=\"literal\">null</span> ? -<span class=\"number\">1</span> : count;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[amount];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/coin-change/\">零钱兑换</a></p>\n<p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p>\n<p>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。</p>\n<p>你可以认为每种硬币的数量是无限的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：coins = [1, 2, 5], amount = 11</span><br><span class=\"line\">输出：3 </span><br><span class=\"line\">解释：11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>\n\n<p>思路：dp[amount]，计算每个amount的关于提供硬币的所需硬币数量：针对提供的硬币数组，计算从0～amount的dp数组。存在这样的关系：</p>\n<ul>\n<li>需要计算每一个金额最小的硬币数</li>\n<li>遍历每一个硬币，如果可以大于要组成的amount，直接continue（无法通过这个硬币组成该金额）</li>\n<li>小于amount，组成amount的硬币个数为：dp[amount - coinAmount] + 1（需要注意，如果dp[amount - coinAmount] 为-1，即无法组成该amount硬币组合，直接continue）</li>\n<li>对于每种组合，求最小的进行赋值：dp[amount] &#x3D; min(dp[amount - coinAmount] ) + 1</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">coinChange</span><span class=\"params\">(<span class=\"type\">int</span>[] coins, <span class=\"type\">int</span> amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">am</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; am &lt;= amount; am++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Integer</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> coin : coins) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">other</span> <span class=\"operator\">=</span> am - coin;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(other &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果硬币面值过大，直接丢弃这种组合方式</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 表示没有这种组合方式，丢弃</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[other] == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 首次直接赋值，后续需要取较小值更新</span></span><br><span class=\"line\">                    count = count == <span class=\"literal\">null</span> ? dp[other] + <span class=\"number\">1</span> : Math.min(count,dp[other] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[am] = count == <span class=\"literal\">null</span> ? -<span class=\"number\">1</span> : count;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[amount];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"项目介绍之亮点与难点","date":"2022-05-30T01:34:16.000Z","_content":"\n面试中对于项目考察，通常会询问项目中的亮点已经难点。这其实是考察对工作熟悉以及发现并解决问题能力，还有总结归纳的能力。\n\n# 1.项目亮点\n\n采用了哪种技术方案，达成了什么样的效果。新方案的优劣势如何？\n\n比如：\n\n- 针对复杂业务根据模块拆分从而更加灵活\n- 改为无状态服务解耦\n- 采用订阅发布模型集中维护数据流向，结偶并提升容错和可维护性\n- 采用了统一网关进行链路追踪方便问题定位以及集中化配置\n- 采用配置中心提供即时生效的配置更新与完善的权限控制\n- 统一日志采集提供快速问题定位\n- 告警系统提供实时邮件提醒\n- ......\n\n\n\n# 2.项目难点\n\n遇到了什么棘手的问题，如何分析定位问题？如果解决？\n\n比如：\n\n- 由于MQ失败重试导致的数据错误\n\n  由于MQ一般不会无限重试，所以在对于错误消息会设置延迟重试。此时存在一个问题：如果A，B两笔数据存在依赖关系。这将导致数据不一致。后续我们采用error-callback对于错误数据进行异步修复，并对修复数据集进行监控。\n\n- Kerberos认证多HBase集群错误\n\n  再多集群情况下采用Kerberos认证时发现存在无法找到正确relm的情况。后续通过debug发现对于请求的Kerberos配置读取存在静态存储。通过阅读源码使用Config.refresh() 在每次获取链接时重新读取配置即可。\n\n- JVM方法区OOM\n\n  由于读取配置文件解析时使用的序列化工具内部采用ASM技术动态生成。导致大量Class被加载，最终导致OOM。后续优化方案：配置无需多次加载，对配置进行缓存即可。\n\n- DNS导致HBase Region不可用\n\n  由于采用公司集中配置管理的DNS服务。其中存在冲突配置导致RegionServer连接异常。排查发现后联系IT解决冲突。\n\n- ......\n\n\n\n# 总结\n\n对于项目面试，首先对项目有自己的认识靠清楚几个问题：\n\n- 是解决什么问题的？\n- 是如何解决的？\n- 解决过程中遇到哪些问题？\n- 问题产生的原因是什么？\n- 如果解决遇到问题的？\n- 为什么这样解决？\n- 如何减少问题发生的？\n- 有哪些调优的经验？\n","source":"_posts/项目介绍之亮点与难点.md","raw":"---\ntitle: 项目介绍之亮点与难点\ndate: 2022-05-30 09:34:16\ntags: \n  - 面试\n  - 项目\n---\n\n面试中对于项目考察，通常会询问项目中的亮点已经难点。这其实是考察对工作熟悉以及发现并解决问题能力，还有总结归纳的能力。\n\n# 1.项目亮点\n\n采用了哪种技术方案，达成了什么样的效果。新方案的优劣势如何？\n\n比如：\n\n- 针对复杂业务根据模块拆分从而更加灵活\n- 改为无状态服务解耦\n- 采用订阅发布模型集中维护数据流向，结偶并提升容错和可维护性\n- 采用了统一网关进行链路追踪方便问题定位以及集中化配置\n- 采用配置中心提供即时生效的配置更新与完善的权限控制\n- 统一日志采集提供快速问题定位\n- 告警系统提供实时邮件提醒\n- ......\n\n\n\n# 2.项目难点\n\n遇到了什么棘手的问题，如何分析定位问题？如果解决？\n\n比如：\n\n- 由于MQ失败重试导致的数据错误\n\n  由于MQ一般不会无限重试，所以在对于错误消息会设置延迟重试。此时存在一个问题：如果A，B两笔数据存在依赖关系。这将导致数据不一致。后续我们采用error-callback对于错误数据进行异步修复，并对修复数据集进行监控。\n\n- Kerberos认证多HBase集群错误\n\n  再多集群情况下采用Kerberos认证时发现存在无法找到正确relm的情况。后续通过debug发现对于请求的Kerberos配置读取存在静态存储。通过阅读源码使用Config.refresh() 在每次获取链接时重新读取配置即可。\n\n- JVM方法区OOM\n\n  由于读取配置文件解析时使用的序列化工具内部采用ASM技术动态生成。导致大量Class被加载，最终导致OOM。后续优化方案：配置无需多次加载，对配置进行缓存即可。\n\n- DNS导致HBase Region不可用\n\n  由于采用公司集中配置管理的DNS服务。其中存在冲突配置导致RegionServer连接异常。排查发现后联系IT解决冲突。\n\n- ......\n\n\n\n# 总结\n\n对于项目面试，首先对项目有自己的认识靠清楚几个问题：\n\n- 是解决什么问题的？\n- 是如何解决的？\n- 解决过程中遇到哪些问题？\n- 问题产生的原因是什么？\n- 如果解决遇到问题的？\n- 为什么这样解决？\n- 如何减少问题发生的？\n- 有哪些调优的经验？\n","slug":"项目介绍之亮点与难点","published":1,"updated":"2022-05-30T09:03:19.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zy002kwuh83sl21j9m","content":"<p>面试中对于项目考察，通常会询问项目中的亮点已经难点。这其实是考察对工作熟悉以及发现并解决问题能力，还有总结归纳的能力。</p>\n<h1 id=\"1-项目亮点\"><a href=\"#1-项目亮点\" class=\"headerlink\" title=\"1.项目亮点\"></a>1.项目亮点</h1><p>采用了哪种技术方案，达成了什么样的效果。新方案的优劣势如何？</p>\n<p>比如：</p>\n<ul>\n<li>针对复杂业务根据模块拆分从而更加灵活</li>\n<li>改为无状态服务解耦</li>\n<li>采用订阅发布模型集中维护数据流向，结偶并提升容错和可维护性</li>\n<li>采用了统一网关进行链路追踪方便问题定位以及集中化配置</li>\n<li>采用配置中心提供即时生效的配置更新与完善的权限控制</li>\n<li>统一日志采集提供快速问题定位</li>\n<li>告警系统提供实时邮件提醒</li>\n<li>……</li>\n</ul>\n<h1 id=\"2-项目难点\"><a href=\"#2-项目难点\" class=\"headerlink\" title=\"2.项目难点\"></a>2.项目难点</h1><p>遇到了什么棘手的问题，如何分析定位问题？如果解决？</p>\n<p>比如：</p>\n<ul>\n<li><p>由于MQ失败重试导致的数据错误</p>\n<p>由于MQ一般不会无限重试，所以在对于错误消息会设置延迟重试。此时存在一个问题：如果A，B两笔数据存在依赖关系。这将导致数据不一致。后续我们采用error-callback对于错误数据进行异步修复，并对修复数据集进行监控。</p>\n</li>\n<li><p>Kerberos认证多HBase集群错误</p>\n<p>再多集群情况下采用Kerberos认证时发现存在无法找到正确relm的情况。后续通过debug发现对于请求的Kerberos配置读取存在静态存储。通过阅读源码使用Config.refresh() 在每次获取链接时重新读取配置即可。</p>\n</li>\n<li><p>JVM方法区OOM</p>\n<p>由于读取配置文件解析时使用的序列化工具内部采用ASM技术动态生成。导致大量Class被加载，最终导致OOM。后续优化方案：配置无需多次加载，对配置进行缓存即可。</p>\n</li>\n<li><p>DNS导致HBase Region不可用</p>\n<p>由于采用公司集中配置管理的DNS服务。其中存在冲突配置导致RegionServer连接异常。排查发现后联系IT解决冲突。</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于项目面试，首先对项目有自己的认识靠清楚几个问题：</p>\n<ul>\n<li>是解决什么问题的？</li>\n<li>是如何解决的？</li>\n<li>解决过程中遇到哪些问题？</li>\n<li>问题产生的原因是什么？</li>\n<li>如果解决遇到问题的？</li>\n<li>为什么这样解决？</li>\n<li>如何减少问题发生的？</li>\n<li>有哪些调优的经验？</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>面试中对于项目考察，通常会询问项目中的亮点已经难点。这其实是考察对工作熟悉以及发现并解决问题能力，还有总结归纳的能力。</p>\n<h1 id=\"1-项目亮点\"><a href=\"#1-项目亮点\" class=\"headerlink\" title=\"1.项目亮点\"></a>1.项目亮点</h1><p>采用了哪种技术方案，达成了什么样的效果。新方案的优劣势如何？</p>\n<p>比如：</p>\n<ul>\n<li>针对复杂业务根据模块拆分从而更加灵活</li>\n<li>改为无状态服务解耦</li>\n<li>采用订阅发布模型集中维护数据流向，结偶并提升容错和可维护性</li>\n<li>采用了统一网关进行链路追踪方便问题定位以及集中化配置</li>\n<li>采用配置中心提供即时生效的配置更新与完善的权限控制</li>\n<li>统一日志采集提供快速问题定位</li>\n<li>告警系统提供实时邮件提醒</li>\n<li>……</li>\n</ul>\n<h1 id=\"2-项目难点\"><a href=\"#2-项目难点\" class=\"headerlink\" title=\"2.项目难点\"></a>2.项目难点</h1><p>遇到了什么棘手的问题，如何分析定位问题？如果解决？</p>\n<p>比如：</p>\n<ul>\n<li><p>由于MQ失败重试导致的数据错误</p>\n<p>由于MQ一般不会无限重试，所以在对于错误消息会设置延迟重试。此时存在一个问题：如果A，B两笔数据存在依赖关系。这将导致数据不一致。后续我们采用error-callback对于错误数据进行异步修复，并对修复数据集进行监控。</p>\n</li>\n<li><p>Kerberos认证多HBase集群错误</p>\n<p>再多集群情况下采用Kerberos认证时发现存在无法找到正确relm的情况。后续通过debug发现对于请求的Kerberos配置读取存在静态存储。通过阅读源码使用Config.refresh() 在每次获取链接时重新读取配置即可。</p>\n</li>\n<li><p>JVM方法区OOM</p>\n<p>由于读取配置文件解析时使用的序列化工具内部采用ASM技术动态生成。导致大量Class被加载，最终导致OOM。后续优化方案：配置无需多次加载，对配置进行缓存即可。</p>\n</li>\n<li><p>DNS导致HBase Region不可用</p>\n<p>由于采用公司集中配置管理的DNS服务。其中存在冲突配置导致RegionServer连接异常。排查发现后联系IT解决冲突。</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于项目面试，首先对项目有自己的认识靠清楚几个问题：</p>\n<ul>\n<li>是解决什么问题的？</li>\n<li>是如何解决的？</li>\n<li>解决过程中遇到哪些问题？</li>\n<li>问题产生的原因是什么？</li>\n<li>如果解决遇到问题的？</li>\n<li>为什么这样解决？</li>\n<li>如何减少问题发生的？</li>\n<li>有哪些调优的经验？</li>\n</ul>\n"},{"title":"验证二叉搜索树","date":"2022-06-02T02:00:15.000Z","_content":"\n[验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/)\n\n给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。\n\n有效 二叉搜索树定义如下：\n\n节点的左子树只包含 小于 当前节点的数。\n节点的右子树只包含 大于 当前节点的数。\n所有左子树和右子树自身必须也是二叉搜索树。\n\n![tree1](tree1.jpg)\n\n```\n输入：root = [2,1,3]\n输出：true\n```\n\n\n\n思路：判断二叉搜索树合法，需要根节点判断左右子树最大最小节点满足题目关系。可以维护一个子节点值范围（递归子节点时维护并判断当前节点合法性），通过此范围与根节点值判断。从而判断该节点是否合法。\n\n\n\n**递归思路：先自顶向下分析，然后分析底层边界逻辑反向验证，然后开始实现。**\n\n代码：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        Integer[] vals = new Integer[2];\n        return isValid(root, vals);\n    }\n\n    /**\n     * root：要判断合法的子树根节点\n     * vals：该子树值范围\n     *\n     */\n    public boolean isValid(TreeNode root, Integer[] vals) {\n        if(root == null) { \n            return true;\n        }\n        // 对于叶子节点还是其他都出实话当前值作为范围\n        vals[0] = root.val;\n        vals[1] = root.val;\n\n        if(root.left != null) {\n            // 此处用一个新的对象，防止污染当前节点范围\n            Integer[] tval = new Integer[2];\n            boolean left = isValid(root.left, tval);\n            if(!left) {\n                return false;\n            }\n            if(root.val <= tval[1]) {\n                return false;\n            }\n            if(tval[1] >= root.val){\n                return false;\n            }\n            // 以左子树范围更新当前节点范围，如果上面条件通过则树合法，以子树范围更新可以扩大当前子树值范围\n            vals[0] = tval[0];\n        }\n        // 同上\n        if(root.right != null){\n            Integer[] tval = new Integer[2];\n            boolean right = isValid(root.right, tval);\n            if(!right) {\n                return false;\n            }\n            if(root.val >= tval[0]) {\n                return false;\n            }\n            if(tval[0] <= root.val){\n                return false;\n            }\n            vals[1] = tval[1];\n        }\n        return true;\n    }\n}\n```\n\n","source":"_posts/验证二叉搜索树.md","raw":"---\ntitle: 验证二叉搜索树\ndate: 2022-06-02 10:00:15\ntags:\n  - leetcode\n  - 树\n  - 算法\n  - 递归\n---\n\n[验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/)\n\n给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。\n\n有效 二叉搜索树定义如下：\n\n节点的左子树只包含 小于 当前节点的数。\n节点的右子树只包含 大于 当前节点的数。\n所有左子树和右子树自身必须也是二叉搜索树。\n\n![tree1](tree1.jpg)\n\n```\n输入：root = [2,1,3]\n输出：true\n```\n\n\n\n思路：判断二叉搜索树合法，需要根节点判断左右子树最大最小节点满足题目关系。可以维护一个子节点值范围（递归子节点时维护并判断当前节点合法性），通过此范围与根节点值判断。从而判断该节点是否合法。\n\n\n\n**递归思路：先自顶向下分析，然后分析底层边界逻辑反向验证，然后开始实现。**\n\n代码：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        Integer[] vals = new Integer[2];\n        return isValid(root, vals);\n    }\n\n    /**\n     * root：要判断合法的子树根节点\n     * vals：该子树值范围\n     *\n     */\n    public boolean isValid(TreeNode root, Integer[] vals) {\n        if(root == null) { \n            return true;\n        }\n        // 对于叶子节点还是其他都出实话当前值作为范围\n        vals[0] = root.val;\n        vals[1] = root.val;\n\n        if(root.left != null) {\n            // 此处用一个新的对象，防止污染当前节点范围\n            Integer[] tval = new Integer[2];\n            boolean left = isValid(root.left, tval);\n            if(!left) {\n                return false;\n            }\n            if(root.val <= tval[1]) {\n                return false;\n            }\n            if(tval[1] >= root.val){\n                return false;\n            }\n            // 以左子树范围更新当前节点范围，如果上面条件通过则树合法，以子树范围更新可以扩大当前子树值范围\n            vals[0] = tval[0];\n        }\n        // 同上\n        if(root.right != null){\n            Integer[] tval = new Integer[2];\n            boolean right = isValid(root.right, tval);\n            if(!right) {\n                return false;\n            }\n            if(root.val >= tval[0]) {\n                return false;\n            }\n            if(tval[0] <= root.val){\n                return false;\n            }\n            vals[1] = tval[1];\n        }\n        return true;\n    }\n}\n```\n\n","slug":"验证二叉搜索树","published":1,"updated":"2022-06-02T02:26:45.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl46po0zz002nwuh8hz6l82ov","content":"<p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">验证二叉搜索树</a></p>\n<p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p>\n<p>有效 二叉搜索树定义如下：</p>\n<p>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p>\n<p><img src=\"/2022/06/02/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/tree1.jpg\" alt=\"tree1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [2,1,3]</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：判断二叉搜索树合法，需要根节点判断左右子树最大最小节点满足题目关系。可以维护一个子节点值范围（递归子节点时维护并判断当前节点合法性），通过此范围与根节点值判断。从而判断该节点是否合法。</p>\n<p><strong>递归思路：先自顶向下分析，然后分析底层边界逻辑反向验证，然后开始实现。</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Integer[] vals = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isValid(root, vals);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * root：要判断合法的子树根节点</span></span><br><span class=\"line\"><span class=\"comment\">     * vals：该子树值范围</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(TreeNode root, Integer[] vals)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 对于叶子节点还是其他都出实话当前值作为范围</span></span><br><span class=\"line\">        vals[<span class=\"number\">0</span>] = root.val;</span><br><span class=\"line\">        vals[<span class=\"number\">1</span>] = root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 此处用一个新的对象，防止污染当前节点范围</span></span><br><span class=\"line\">            Integer[] tval = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> isValid(root.left, tval);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!left) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &lt;= tval[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tval[<span class=\"number\">1</span>] &gt;= root.val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 以左子树范围更新当前节点范围，如果上面条件通过则树合法，以子树范围更新可以扩大当前子树值范围</span></span><br><span class=\"line\">            vals[<span class=\"number\">0</span>] = tval[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            Integer[] tval = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> isValid(root.right, tval);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!right) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &gt;= tval[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tval[<span class=\"number\">0</span>] &lt;= root.val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            vals[<span class=\"number\">1</span>] = tval[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">验证二叉搜索树</a></p>\n<p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p>\n<p>有效 二叉搜索树定义如下：</p>\n<p>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p>\n<p><img src=\"/2022/06/02/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/tree1.jpg\" alt=\"tree1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [2,1,3]</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：判断二叉搜索树合法，需要根节点判断左右子树最大最小节点满足题目关系。可以维护一个子节点值范围（递归子节点时维护并判断当前节点合法性），通过此范围与根节点值判断。从而判断该节点是否合法。</p>\n<p><strong>递归思路：先自顶向下分析，然后分析底层边界逻辑反向验证，然后开始实现。</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Integer[] vals = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isValid(root, vals);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * root：要判断合法的子树根节点</span></span><br><span class=\"line\"><span class=\"comment\">     * vals：该子树值范围</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(TreeNode root, Integer[] vals)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 对于叶子节点还是其他都出实话当前值作为范围</span></span><br><span class=\"line\">        vals[<span class=\"number\">0</span>] = root.val;</span><br><span class=\"line\">        vals[<span class=\"number\">1</span>] = root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 此处用一个新的对象，防止污染当前节点范围</span></span><br><span class=\"line\">            Integer[] tval = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> isValid(root.left, tval);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!left) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &lt;= tval[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tval[<span class=\"number\">1</span>] &gt;= root.val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 以左子树范围更新当前节点范围，如果上面条件通过则树合法，以子树范围更新可以扩大当前子树值范围</span></span><br><span class=\"line\">            vals[<span class=\"number\">0</span>] = tval[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            Integer[] tval = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> isValid(root.right, tval);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!right) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &gt;= tval[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tval[<span class=\"number\">0</span>] &lt;= root.val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            vals[<span class=\"number\">1</span>] = tval[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/Hexo-图片/20200707101943_hCjji.jpeg","post":"cl46po0z50009wuh85g425y9u","slug":"20200707101943_hCjji.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Kubernetes基础概念/components-of-kubernetes.svg","post":"cl46po0z8000gwuh821xwatyr","slug":"components-of-kubernetes.svg","modified":1,"renderable":1},{"_id":"source/_posts/Redis数据结构底层原/listpack节点.png","post":"cl46po0zd000nwuh88mhr34h9","slug":"listpack节点.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis数据结构底层原/quicklist.png","post":"cl46po0zd000nwuh88mhr34h9","slug":"quicklist.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis数据结构底层原/redis全景图.png","post":"cl46po0zd000nwuh88mhr34h9","slug":"redis全景图.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis数据结构底层原/redis数据结构-lastnew.png","post":"cl46po0zd000nwuh88mhr34h9","slug":"redis数据结构-lastnew.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis数据结构底层原/压缩列表节点结构.png","post":"cl46po0zd000nwuh88mhr34h9","slug":"压缩列表节点结构.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis数据结构底层原/哈希表结构.png","post":"cl46po0zd000nwuh88mhr34h9","slug":"哈希表结构.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis数据结构底层原/键值对结构.png","post":"cl46po0zd000nwuh88mhr34h9","slug":"键值对结构.png","modified":1,"renderable":1},{"_id":"source/_posts/TCP半连接队列和全连接队列溢出/3d05f574867b70d1134e685e5f5ac137.jpg","post":"cl46po0zf000uwuh8g35ockkt","slug":"3d05f574867b70d1134e685e5f5ac137.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ThreadLoacl/640.jpeg","post":"cl46po0zg000wwuh8cagpcj1z","slug":"640.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/ThreadLoacl/image-20220531114220950.png","post":"cl46po0zg000wwuh8cagpcj1z","slug":"image-20220531114220950.png","modified":1,"renderable":1},{"_id":"source/_posts/不同路径/robot_maze.png","post":"cl46po0zh000zwuh8fs296p84","slug":"robot_maze.png","modified":1,"renderable":1},{"_id":"source/_posts/二叉搜索树与双向链表/bstdlloriginalbst.png","post":"cl46po0zj0015wuh833ibfwab","slug":"bstdlloriginalbst.png","modified":1,"renderable":1},{"_id":"source/_posts/二叉搜索树与双向链表/bstdllreturndll.png","post":"cl46po0zj0015wuh833ibfwab","slug":"bstdllreturndll.png","modified":1,"renderable":1},{"_id":"source/_posts/删除排序链表中的重复元素/list1.jpg","post":"cl46po0zl001dwuh81nd316fm","slug":"list1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/岛屿的最大面积/maxarea1-grid.jpg","post":"cl46po0zp001pwuh81n790f3i","slug":"maxarea1-grid.jpg","modified":1,"renderable":1},{"_id":"source/_posts/旋转图像/mat1.jpg","post":"cl46po0zq001swuh84fwv6w9y","slug":"mat1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/英文面试自我介绍/v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg.png","post":"cl46po0zw002dwuh8bs7rgvca","slug":"v2-be67c5fbf089d4a1fe958c16c9bd82bf_1440w.jpg.png","modified":1,"renderable":1},{"_id":"source/_posts/英文面试自我介绍/v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r.jpg","post":"cl46po0zw002dwuh8bs7rgvca","slug":"v2-e8f4b001bc4db1ad2b8f28bd3ec8f525_r.jpg","modified":1,"renderable":1},{"_id":"source/_posts/路径总和-II/pathsumii1.jpg","post":"cl46po0zx002ewuh8bpba0omf","slug":"pathsumii1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/验证二叉搜索树/tree1.jpg","post":"cl46po0zz002nwuh8hz6l82ov","slug":"tree1.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cl46po0yw0001wuh8dsx7cf09","tag_id":"cl46po0z10004wuh8bl6ubq5z","_id":"cl46po0z8000fwuh8fjqr65xa"},{"post_id":"cl46po0yw0001wuh8dsx7cf09","tag_id":"cl46po0z5000awuh88liq37x8","_id":"cl46po0z9000hwuh81tfnew82"},{"post_id":"cl46po0z00003wuh8gmxnaq99","tag_id":"cl46po0z7000dwuh89cno32f0","_id":"cl46po0zf000twuh802h30exn"},{"post_id":"cl46po0z00003wuh8gmxnaq99","tag_id":"cl46po0z9000iwuh88x9idb22","_id":"cl46po0zg000vwuh89xaz5d67"},{"post_id":"cl46po0z00003wuh8gmxnaq99","tag_id":"cl46po0z5000awuh88liq37x8","_id":"cl46po0zh000ywuh8as5mgcxg"},{"post_id":"cl46po0z00003wuh8gmxnaq99","tag_id":"cl46po0zd000owuh81vsp43oe","_id":"cl46po0zh0010wuh8566f3zs2"},{"post_id":"cl46po0z30006wuh80e993987","tag_id":"cl46po0zf000swuh8e67d1cit","_id":"cl46po0zj0014wuh80fzhe1aq"},{"post_id":"cl46po0z30006wuh80e993987","tag_id":"cl46po0zg000xwuh86cclhk6m","_id":"cl46po0zj0016wuh87nrxgbde"},{"post_id":"cl46po0z40008wuh89yjocg31","tag_id":"cl46po0zi0012wuh81cw3ctjp","_id":"cl46po0zl001cwuh89zuselse"},{"post_id":"cl46po0z40008wuh89yjocg31","tag_id":"cl46po0zj0017wuh8czqjayv5","_id":"cl46po0zm001ewuh87mlvg4q5"},{"post_id":"cl46po0z50009wuh85g425y9u","tag_id":"cl46po0zl001bwuh8g7s79s3m","_id":"cl46po0zp001lwuh861wpds0t"},{"post_id":"cl46po0z50009wuh85g425y9u","tag_id":"cl46po0zm001gwuh8fxvxdvnh","_id":"cl46po0zp001nwuh81yta451l"},{"post_id":"cl46po0z6000bwuh8f7l7614j","tag_id":"cl46po0zl001bwuh8g7s79s3m","_id":"cl46po0zr001wwuh8d3qxcf72"},{"post_id":"cl46po0z6000bwuh8f7l7614j","tag_id":"cl46po0zp001owuh82ewnbqsg","_id":"cl46po0zs001ywuh84d9r2fi2"},{"post_id":"cl46po0z6000bwuh8f7l7614j","tag_id":"cl46po0zq001rwuh8axl5hgk0","_id":"cl46po0zt0021wuh80hub611c"},{"post_id":"cl46po0z6000cwuh89r6ldgnc","tag_id":"cl46po0zr001vwuh8293odzmd","_id":"cl46po0zu0026wuh8hcwfh41n"},{"post_id":"cl46po0z6000cwuh89r6ldgnc","tag_id":"cl46po0zs0020wuh86bvph25p","_id":"cl46po0zv0028wuh81ei7e7o9"},{"post_id":"cl46po0z7000ewuh80cd07vha","tag_id":"cl46po0zt0024wuh8gaw92kp1","_id":"cl46po0zy002hwuh8cg0ieqac"},{"post_id":"cl46po0z7000ewuh80cd07vha","tag_id":"cl46po0zr001vwuh8293odzmd","_id":"cl46po0zy002jwuh8dop04c7d"},{"post_id":"cl46po0z7000ewuh80cd07vha","tag_id":"cl46po0zw002cwuh8f8el0tmo","_id":"cl46po0zz002mwuh88mr701m6"},{"post_id":"cl46po0z8000gwuh821xwatyr","tag_id":"cl46po0zy002gwuh8hrv1hwvm","_id":"cl46po0zz002owuh8ep3cd4d9"},{"post_id":"cl46po0z9000jwuh8bil4eg0a","tag_id":"cl46po0zz002lwuh81nf9ahgi","_id":"cl46po100002swuh8drau6ugs"},{"post_id":"cl46po0z9000jwuh8bil4eg0a","tag_id":"cl46po0zz002pwuh88zbhfsn7","_id":"cl46po100002twuh84w9t4q47"},{"post_id":"cl46po0z9000jwuh8bil4eg0a","tag_id":"cl46po100002qwuh8gj0n4fhb","_id":"cl46po100002vwuh8avtygti1"},{"post_id":"cl46po0zb000mwuh86i502n7i","tag_id":"cl46po100002rwuh80puy2zdg","_id":"cl46po100002xwuh88v117adt"},{"post_id":"cl46po0zb000mwuh86i502n7i","tag_id":"cl46po100002uwuh869f9fxam","_id":"cl46po100002ywuh81dav5qms"},{"post_id":"cl46po0zd000nwuh88mhr34h9","tag_id":"cl46po100002wwuh8cqhd33mu","_id":"cl46po1000030wuh88gypf4gf"},{"post_id":"cl46po0ze000pwuh84z0w1qjn","tag_id":"cl46po100002zwuh80dty4sja","_id":"cl46po1010033wuh8dk0324ad"},{"post_id":"cl46po0ze000pwuh84z0w1qjn","tag_id":"cl46po0zt0024wuh8gaw92kp1","_id":"cl46po1010034wuh88ftp63is"},{"post_id":"cl46po0ze000qwuh80w751hiw","tag_id":"cl46po0zt0024wuh8gaw92kp1","_id":"cl46po1010036wuh8gp501qzq"},{"post_id":"cl46po0ze000rwuh804xp1nq5","tag_id":"cl46po1010035wuh8d3rl8nri","_id":"cl46po102003bwuh8bfxa4plf"},{"post_id":"cl46po0ze000rwuh804xp1nq5","tag_id":"cl46po0zf000swuh8e67d1cit","_id":"cl46po102003cwuh83lfmfye8"},{"post_id":"cl46po0ze000rwuh804xp1nq5","tag_id":"cl46po0z5000awuh88liq37x8","_id":"cl46po102003ewuh8ac0w7mwa"},{"post_id":"cl46po0ze000rwuh804xp1nq5","tag_id":"cl46po1010038wuh89vca7uy4","_id":"cl46po102003fwuh8b3hx3msm"},{"post_id":"cl46po0ze000rwuh804xp1nq5","tag_id":"cl46po1020039wuh82kl7boti","_id":"cl46po102003hwuh87hdod05i"},{"post_id":"cl46po0zf000uwuh8g35ockkt","tag_id":"cl46po102003awuh8dd5y4e11","_id":"cl46po103003iwuh8d14n1e6m"},{"post_id":"cl46po0zg000wwuh8cagpcj1z","tag_id":"cl46po1010038wuh89vca7uy4","_id":"cl46po103003kwuh8210h1a1n"},{"post_id":"cl46po0zg000wwuh8cagpcj1z","tag_id":"cl46po102003gwuh8fonr1ijd","_id":"cl46po103003lwuh8gq40c5ep"},{"post_id":"cl46po0zh000zwuh8fs296p84","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po103003pwuh81e9l5z42"},{"post_id":"cl46po0zh000zwuh8fs296p84","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po103003qwuh84p3o4eeu"},{"post_id":"cl46po0zh000zwuh8fs296p84","tag_id":"cl46po103003nwuh89igj66nm","_id":"cl46po104003swuh8356gf15h"},{"post_id":"cl46po0zi0013wuh82ufpe4fw","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po104003uwuh80l98fg9v"},{"post_id":"cl46po0zi0013wuh82ufpe4fw","tag_id":"cl46po103003nwuh89igj66nm","_id":"cl46po104003vwuh8df1ebihs"},{"post_id":"cl46po0zj0015wuh833ibfwab","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po1050040wuh82f12ecfz"},{"post_id":"cl46po0zj0015wuh833ibfwab","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po1050041wuh8efgm7yjz"},{"post_id":"cl46po0zj0015wuh833ibfwab","tag_id":"cl46po104003xwuh81faa8krf","_id":"cl46po1050043wuh8b6ez4yo5"},{"post_id":"cl46po0zj0015wuh833ibfwab","tag_id":"cl46po104003ywuh8aevnh3c1","_id":"cl46po1050044wuh8fxth5p1r"},{"post_id":"cl46po0zk0018wuh8cvm0hwnf","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po1060047wuh8beqhelqi"},{"post_id":"cl46po0zk0018wuh8cvm0hwnf","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po1060048wuh81f5yfjm5"},{"post_id":"cl46po0zk0018wuh8cvm0hwnf","tag_id":"cl46po104003xwuh81faa8krf","_id":"cl46po106004awuh86x9p323l"},{"post_id":"cl46po0zk0019wuh8f5kj28hs","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po106004dwuh82izm167f"},{"post_id":"cl46po0zk0019wuh8f5kj28hs","tag_id":"cl46po1060049wuh82ls5gjr0","_id":"cl46po106004ewuh8guw6hwrs"},{"post_id":"cl46po0zk0019wuh8f5kj28hs","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po106004gwuh81iz9e5cn"},{"post_id":"cl46po0zk001awuh87e3o1wgl","tag_id":"cl46po106004cwuh8a2515t0r","_id":"cl46po107004iwuh8bfuwejz8"},{"post_id":"cl46po0zk001awuh87e3o1wgl","tag_id":"cl46po106004fwuh8hmpu21ey","_id":"cl46po107004jwuh80a3ieqb4"},{"post_id":"cl46po0zl001dwuh81nd316fm","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po107004owuh87vtj1t2j"},{"post_id":"cl46po0zl001dwuh81nd316fm","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po107004pwuh8a4fi7kfd"},{"post_id":"cl46po0zl001dwuh81nd316fm","tag_id":"cl46po104003ywuh8aevnh3c1","_id":"cl46po108004rwuh8baua2gvf"},{"post_id":"cl46po0zl001dwuh81nd316fm","tag_id":"cl46po107004mwuh854nagase","_id":"cl46po108004swuh833olc3gf"},{"post_id":"cl46po0zm001fwuh872wrftta","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po108004vwuh8c6m2bj7u"},{"post_id":"cl46po0zm001fwuh872wrftta","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po108004wwuh8bihj3vjg"},{"post_id":"cl46po0zm001fwuh872wrftta","tag_id":"cl46po108004twuh8c6445ssx","_id":"cl46po108004ywuh840ykfodi"},{"post_id":"cl46po0zn001hwuh8fjbxasp6","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po1090051wuh82mlh0rtv"},{"post_id":"cl46po0zn001hwuh8fjbxasp6","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po1090052wuh8gphva97i"},{"post_id":"cl46po0zn001hwuh8fjbxasp6","tag_id":"cl46po109004zwuh8e3ioe7ia","_id":"cl46po1090054wuh88uklhvdq"},{"post_id":"cl46po0zn001iwuh88pp2824x","tag_id":"cl46po1090050wuh84bf5f451","_id":"cl46po1090055wuh8glo0cq1c"},{"post_id":"cl46po0zo001kwuh8ddzz038g","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10a0058wuh84aqa2h3e"},{"post_id":"cl46po0zo001kwuh8ddzz038g","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10a0059wuh85aflapks"},{"post_id":"cl46po0zp001mwuh886stamp7","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10a005cwuh87a7c95ae"},{"post_id":"cl46po0zp001mwuh886stamp7","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10a005dwuh82cl774n5"},{"post_id":"cl46po0zp001pwuh81n790f3i","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10b005gwuh89k6k02p4"},{"post_id":"cl46po0zp001pwuh81n790f3i","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10b005hwuh80muq63p4"},{"post_id":"cl46po0zq001qwuh8dolyhz39","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10b005mwuh8exlx1g94"},{"post_id":"cl46po0zq001qwuh8dolyhz39","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10b005nwuh86zzn5ay9"},{"post_id":"cl46po0zq001qwuh8dolyhz39","tag_id":"cl46po107004mwuh854nagase","_id":"cl46po10c005pwuh80lbpelvj"},{"post_id":"cl46po0zq001qwuh8dolyhz39","tag_id":"cl46po103003nwuh89igj66nm","_id":"cl46po10c005qwuh8d9rc8mpg"},{"post_id":"cl46po0zq001swuh84fwv6w9y","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10c005uwuh852ty4hhd"},{"post_id":"cl46po0zq001swuh84fwv6w9y","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10d005vwuh8667sa3dh"},{"post_id":"cl46po0zq001swuh84fwv6w9y","tag_id":"cl46po10c005rwuh89xgf5ww6","_id":"cl46po10d005xwuh889kk36u8"},{"post_id":"cl46po0zq001swuh84fwv6w9y","tag_id":"cl46po10c005swuh8f7wcdsvf","_id":"cl46po10d005ywuh8fs6h1egy"},{"post_id":"cl46po0zr001twuh8f4hyhdhh","tag_id":"cl46po10c005twuh8a7wyhu41","_id":"cl46po10e0061wuh81z273i1m"},{"post_id":"cl46po0zr001twuh8f4hyhdhh","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10e0062wuh85xn3dsjv"},{"post_id":"cl46po0zr001twuh8f4hyhdhh","tag_id":"cl46po10d005zwuh8dawb1j2z","_id":"cl46po10e0064wuh82b1k13zl"},{"post_id":"cl46po0zr001uwuh87nyj4fw5","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10e0067wuh81cc8dzg2"},{"post_id":"cl46po0zr001uwuh87nyj4fw5","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10e0068wuh8cksf4t2t"},{"post_id":"cl46po0zr001uwuh87nyj4fw5","tag_id":"cl46po103003nwuh89igj66nm","_id":"cl46po10f006awuh8086gd603"},{"post_id":"cl46po0zs001xwuh870h6hubi","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10f006dwuh8fkvwd077"},{"post_id":"cl46po0zs001xwuh870h6hubi","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10f006ewuh8debs2guz"},{"post_id":"cl46po0zs001xwuh870h6hubi","tag_id":"cl46po103003nwuh89igj66nm","_id":"cl46po10f006gwuh8fzkhe0pu"},{"post_id":"cl46po0zs001zwuh865xk1mfu","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10g006kwuh82k1mhrti"},{"post_id":"cl46po0zs001zwuh865xk1mfu","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10g006lwuh8ewrdg606"},{"post_id":"cl46po0zs001zwuh865xk1mfu","tag_id":"cl46po10g006hwuh85h6568cw","_id":"cl46po10g006nwuh8axbgb8kt"},{"post_id":"cl46po0zs001zwuh865xk1mfu","tag_id":"cl46po100002qwuh8gj0n4fhb","_id":"cl46po10g006owuh88yxz5niv"},{"post_id":"cl46po0zt0022wuh87ocic72g","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10h006rwuh88p8rh1ry"},{"post_id":"cl46po0zt0022wuh87ocic72g","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10h006swuh87nszezt3"},{"post_id":"cl46po0zt0022wuh87ocic72g","tag_id":"cl46po103003nwuh89igj66nm","_id":"cl46po10h006uwuh8hm328q7l"},{"post_id":"cl46po0zt0023wuh8a2wtb7a2","tag_id":"cl46po10h006qwuh8ehjx1skp","_id":"cl46po10h006wwuh8c8ru5g3t"},{"post_id":"cl46po0zt0023wuh8a2wtb7a2","tag_id":"cl46po0zt0024wuh8gaw92kp1","_id":"cl46po10h006xwuh8hwc40z2n"},{"post_id":"cl46po0zu0025wuh80c7r8eir","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10i0070wuh82o4zh9pa"},{"post_id":"cl46po0zu0025wuh80c7r8eir","tag_id":"cl46po109004zwuh8e3ioe7ia","_id":"cl46po10i0071wuh8a8k9ccv8"},{"post_id":"cl46po0zu0027wuh8gavgdwjh","tag_id":"cl46po10i006zwuh8f5ex71n0","_id":"cl46po10i0074wuh861i43b94"},{"post_id":"cl46po0zu0027wuh8gavgdwjh","tag_id":"cl46po1010038wuh89vca7uy4","_id":"cl46po10i0075wuh84loxepla"},{"post_id":"cl46po0zv002awuh8bqqt27mi","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10j0079wuh8685r6zzc"},{"post_id":"cl46po0zv002awuh8bqqt27mi","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10j007awuh83n9w4wng"},{"post_id":"cl46po0zv002awuh8bqqt27mi","tag_id":"cl46po10i0077wuh87atfgsef","_id":"cl46po10j007cwuh8fiou0zmg"},{"post_id":"cl46po0zw002bwuh8fohcf0zo","tag_id":"cl46po10j0078wuh85vvj5gs4","_id":"cl46po10j007dwuh826kw9hb2"},{"post_id":"cl46po0zw002dwuh8bs7rgvca","tag_id":"cl46po0zt0024wuh8gaw92kp1","_id":"cl46po10j007fwuh878djf0o6"},{"post_id":"cl46po0zw002dwuh8bs7rgvca","tag_id":"cl46po10j007bwuh8dazxbr5m","_id":"cl46po10j007gwuh85m8b1zsa"},{"post_id":"cl46po0zx002ewuh8bpba0omf","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10k007kwuh89cpkb1vt"},{"post_id":"cl46po0zx002ewuh8bpba0omf","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10k007lwuh8fcuxaquo"},{"post_id":"cl46po0zx002ewuh8bpba0omf","tag_id":"cl46po104003xwuh81faa8krf","_id":"cl46po10k007nwuh8a6rp0lrt"},{"post_id":"cl46po0zx002fwuh808ih0eu2","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10l007qwuh842lda5t4"},{"post_id":"cl46po0zx002fwuh808ih0eu2","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10l007rwuh89et324dm"},{"post_id":"cl46po0zx002fwuh808ih0eu2","tag_id":"cl46po10k007owuh82f1rc8pq","_id":"cl46po10l007twuh88tblfjy8"},{"post_id":"cl46po0zy002iwuh8doz85s42","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10l007wwuh81nru99po"},{"post_id":"cl46po0zy002iwuh8doz85s42","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10l007xwuh8330gffdp"},{"post_id":"cl46po0zy002iwuh8doz85s42","tag_id":"cl46po103003nwuh89igj66nm","_id":"cl46po10n007zwuh84py30b3g"},{"post_id":"cl46po0zy002kwuh83sl21j9m","tag_id":"cl46po0zt0024wuh8gaw92kp1","_id":"cl46po10n0080wuh85lfu5xzd"},{"post_id":"cl46po0zy002kwuh83sl21j9m","tag_id":"cl46po10l007vwuh89n4r2r8m","_id":"cl46po10o0082wuh8ch4969ev"},{"post_id":"cl46po0zz002nwuh8hz6l82ov","tag_id":"cl46po103003jwuh8bs3p80nu","_id":"cl46po10o0085wuh8h26z0uah"},{"post_id":"cl46po0zz002nwuh8hz6l82ov","tag_id":"cl46po104003xwuh81faa8krf","_id":"cl46po10o0086wuh8a32rc2t4"},{"post_id":"cl46po0zz002nwuh8hz6l82ov","tag_id":"cl46po103003mwuh8cbzmch55","_id":"cl46po10o0087wuh83nolaj88"},{"post_id":"cl46po0zz002nwuh8hz6l82ov","tag_id":"cl46po107004mwuh854nagase","_id":"cl46po10o0088wuh89kvtfglp"}],"Tag":[{"name":"AQS","_id":"cl46po0z10004wuh8bl6ubq5z"},{"name":"线程安全","_id":"cl46po0z5000awuh88liq37x8"},{"name":"AtomInteger","_id":"cl46po0z7000dwuh89cno32f0"},{"name":"LongAdder","_id":"cl46po0z9000iwuh88x9idb22"},{"name":"CAS","_id":"cl46po0zd000owuh81vsp43oe"},{"name":"并发","_id":"cl46po0zf000swuh8e67d1cit"},{"name":"线程同步","_id":"cl46po0zg000xwuh86cclhk6m"},{"name":"Docker","_id":"cl46po0zi0012wuh81cw3ctjp"},{"name":"网络原理","_id":"cl46po0zj0017wuh8czqjayv5"},{"name":"hexo","_id":"cl46po0zl001bwuh8g7s79s3m"},{"name":"教程","_id":"cl46po0zm001gwuh8fxvxdvnh"},{"name":"blog","_id":"cl46po0zp001owuh82ewnbqsg"},{"name":"工具","_id":"cl46po0zq001rwuh8axl5hgk0"},{"name":"Java","_id":"cl46po0zr001vwuh8293odzmd"},{"name":"IO","_id":"cl46po0zs0020wuh86bvph25p"},{"name":"面试","_id":"cl46po0zt0024wuh8gaw92kp1"},{"name":"基础","_id":"cl46po0zw002cwuh8f8el0tmo"},{"name":"k8s","_id":"cl46po0zy002gwuh8hrv1hwvm"},{"name":"数据库","_id":"cl46po0zz002lwuh81nf9ahgi"},{"name":"MySQL","_id":"cl46po0zz002pwuh88zbhfsn7"},{"name":"优化","_id":"cl46po100002qwuh8gj0n4fhb"},{"name":"RESTful","_id":"cl46po100002rwuh80puy2zdg"},{"name":"HATEOAS","_id":"cl46po100002uwuh869f9fxam"},{"name":"Redis","_id":"cl46po100002wwuh8cqhd33mu"},{"name":"sql","_id":"cl46po100002zwuh80dty4sja"},{"name":"锁","_id":"cl46po1010035wuh8d3rl8nri"},{"name":"java","_id":"cl46po1010038wuh89vca7uy4"},{"name":"关键字","_id":"cl46po1020039wuh82kl7boti"},{"name":"TCP","_id":"cl46po102003awuh8dd5y4e11"},{"name":"ThreadLocal","_id":"cl46po102003gwuh8fonr1ijd"},{"name":"leetcode","_id":"cl46po103003jwuh8bs3p80nu"},{"name":"算法","_id":"cl46po103003mwuh8cbzmch55"},{"name":"dp","_id":"cl46po103003nwuh89igj66nm"},{"name":"树","_id":"cl46po104003xwuh81faa8krf"},{"name":"链表","_id":"cl46po104003ywuh8aevnh3c1"},{"name":"二叉树","_id":"cl46po1060049wuh82ls5gjr0"},{"name":"分布式","_id":"cl46po106004cwuh8a2515t0r"},{"name":"CAP","_id":"cl46po106004fwuh8hmpu21ey"},{"name":"递归","_id":"cl46po107004mwuh854nagase"},{"name":"二分查找","_id":"cl46po108004twuh8c6445ssx"},{"name":"stack","_id":"cl46po109004zwuh8e3ioe7ia"},{"name":"数据结构","_id":"cl46po1090050wuh84bf5f451"},{"name":"迭代","_id":"cl46po10c005rwuh89xgf5ww6"},{"name":"数组","_id":"cl46po10c005swuh8f7wcdsvf"},{"name":"leedcode","_id":"cl46po10c005twuh8a7wyhu41"},{"name":"滑动窗口","_id":"cl46po10d005zwuh8dawb1j2z"},{"name":"hash","_id":"cl46po10g006hwuh85h6568cw"},{"name":"死锁","_id":"cl46po10h006qwuh8ehjx1skp"},{"name":"线程池","_id":"cl46po10i006zwuh8f5ex71n0"},{"name":"组合","_id":"cl46po10i0077wuh87atfgsef"},{"name":"数据处理","_id":"cl46po10j0078wuh85vvj5gs4"},{"name":"英语","_id":"cl46po10j007bwuh8dazxbr5m"},{"name":"双指针","_id":"cl46po10k007owuh82f1rc8pq"},{"name":"项目","_id":"cl46po10l007vwuh89n4r2r8m"}]}}