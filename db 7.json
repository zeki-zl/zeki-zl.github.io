{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"e0649762bd5fac7a1b9b2c8ab99a0dfc219a4fcb","modified":1653971666780},{"_id":"source/.DS_Store","hash":"faba0605c83466b66abbc034688559f4bc03c7ea","modified":1653971666782},{"_id":"source/_posts/AtomInteger与LongAdder.md","hash":"f0572f36953f320109a1507c438c37c993e9a833","modified":1653959529774},{"_id":"source/_posts/AQS.md","hash":"4dfd237c617e8af1b6a593e70161caa5c4cbc3e0","modified":1653985048215},{"_id":"source/_posts/Hexo-图片.md","hash":"5b16f76dbffb1ffa3642bc0e29b96f7fc7f7c7a3","modified":1653957430296},{"_id":"source/_posts/How-to-use-hexo.md","hash":"87e58c0f84edd54ece59255b02cb5f227182fb84","modified":1653905295201},{"_id":"source/_posts/Kubernetes基础概念.md","hash":"feff1712d76fec441ab60b23b19f0949ac9a069a","modified":1654146423224},{"_id":"source/_posts/CountDownLatch和CycilBarrier.md","hash":"4d50f4a48f4db2bde7f7813d45b9a621395a101c","modified":1653981291967},{"_id":"source/_posts/Java-IO.md","hash":"9980b17a63ab4ce44f5cfbd0b4060fd88b4a30db","modified":1653958233591},{"_id":"source/_posts/RAFT算法.md","hash":"0ac916699ee46150c415e81b17b4c60b5d7b912c","modified":1654047830620},{"_id":"source/_posts/RESTful.md","hash":"288be76fcab52b24496811972b88bfe9aa87d6d4","modified":1654047363159},{"_id":"source/_posts/Java-基础.md","hash":"bbe6a382d098fd10421ae0caf0a9531aa0a5c4cd","modified":1653901228742},{"_id":"source/_posts/乘积最大子数组.md","hash":"dafad6f425d23068dce99675d13b40eaa6ba5fbe","modified":1654313487174},{"_id":"source/_posts/从前序与中序遍历序列构造二叉树.md","hash":"4363092df63a38bd779a44c60593b18f2f15e197","modified":1653993937798},{"_id":"source/_posts/二叉树的直径.md","hash":"1639c2f0e94b5998eb428aa91782a1d7fd25a4bd","modified":1654157312107},{"_id":"source/_posts/不同路径.md","hash":"85e8132f6f89f64d7476536bee826f53b709b3d3","modified":1654259060387},{"_id":"source/_posts/删除排序链表中的重复元素.md","hash":"2744fe5dcf8bf2d5e724d01f1e169bcee3f330c0","modified":1654239149170},{"_id":"source/_posts/字符串解码.md","hash":"310d99660605343a73452a1222914a66659d7291","modified":1654312251657},{"_id":"source/_posts/在排序数组中查找元素的第一个和最后一个位置.md","hash":"baee81f32c8d657e523debdbffd6088ef51c2708","modified":1654230374617},{"_id":"source/_posts/岛屿的最大面积.md","hash":"2ee10e1295d464fc68d2e20d2e2cb43be4eb3cbd","modified":1654261441930},{"_id":"source/_posts/旋转图像.md","hash":"4d7f537976a4898dbab76425be4873e0175e539d","modified":1654221938203},{"_id":"source/_posts/最小路径和.md","hash":"01beb8cdd42a08eff1c0325fb9361da07720e510","modified":1654160046325},{"_id":"source/_posts/最小覆盖子串.md","hash":"2af43bd0ca653e13513fab9c50f39467806143b6","modified":1654091828329},{"_id":"source/_posts/最长有效括号.md","hash":"a2cb82952fbea5552c8a2c8ce3d755870cfaf8f3","modified":1654090076407},{"_id":"source/_posts/最长连续序列.md","hash":"f318db87982d107dfc33c7cc0ba70f64cf0bdfe3","modified":1654260077005},{"_id":"source/_posts/最长重复子数组.md","hash":"725c49659eb07910ce3adffca0a4861419beb32b","modified":1654229247132},{"_id":"source/_posts/死锁.md","hash":"b4597df1b7f8c01e0f191eaf0b7112b77c691513","modified":1653958699239},{"_id":"source/_posts/Synchronized.md","hash":"e1d37c6fa32efdb62828a5dd44344a12c2dbfb26","modified":1653962339365},{"_id":"source/_posts/线程池.md","hash":"6c9ced0bfe537fd1fa977cf0098f043b4ef38b53","modified":1653968254267},{"_id":"source/_posts/组合总和.md","hash":"17c838e59b3c074a6a96c5e390c5f5980f0ca927","modified":1654223376371},{"_id":"source/_posts/路径总和-II.md","hash":"cbe4c1257905e59dfad4651d04613bc8365f2e9d","modified":1654224957102},{"_id":"source/_posts/零钱兑换.md","hash":"e59ce373fc98058827c639ef84677660c578e7bf","modified":1654090076306},{"_id":"source/_posts/滑动窗口最大值.md","hash":"0c85a21e1a333c839485d5fa9eb28230da2b3ee9","modified":1653996815266},{"_id":"source/_posts/验证二叉搜索树.md","hash":"e04e6c9faeeebc79eb4c6c14ecad658521905bfd","modified":1654136805986},{"_id":"source/_posts/项目介绍之亮点与难点.md","hash":"600edecb594a29b8b7c4cfaad8209ddf5b4d5e0b","modified":1653901399647},{"_id":"source/_posts/ThreadLoacl.md","hash":"00920290c4328d2034834ea0d4d709d4ac67a974","modified":1653971681927},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1653786132477},{"_id":"source/about/index.md","hash":"c24cce0ca0b8920918f603acdb8c4d40a911a6e7","modified":1653798028086},{"_id":"source/tags/index.md","hash":"1c1d62c269f160fadde13e9167902943c1ef5614","modified":1653900548972},{"_id":"source/404/index.md","hash":"73751f2936faa4326ce922bb168733b22e5c00fa","modified":1653798473418},{"_id":"source/_posts/删除排序链表中的重复元素/list1.jpg","hash":"1259812f50665b4ae19693c17e41cc36187cbf74","modified":1654238980415},{"_id":"source/categories/index.md","hash":"cfd06b397ade247f2181acdf392037b874eeb696","modified":1653900034105},{"_id":"source/_posts/旋转图像/mat1.jpg","hash":"909611016f48da823bed5ebfffb3a1862acf7093","modified":1654221524449},{"_id":"source/_posts/路径总和-II/pathsumii1.jpg","hash":"7747e8c542f6606b82ff7d0bdc122cb6c48047aa","modified":1654152783333},{"_id":"source/_posts/验证二叉搜索树/tree1.jpg","hash":"caeb731bf33ae5af2eb1dad04a87563c9519d4fb","modified":1654135334861},{"_id":"source/_posts/ThreadLoacl/640.jpeg","hash":"8127f2e21aadd24a255a1dc83586fb45212faddd","modified":1653971642449},{"_id":"source/_posts/不同路径/robot_maze.png","hash":"4b426c3adb98bd889d6b6c9b80ce0229a2dc0778","modified":1654258573422},{"_id":"source/_posts/Kubernetes基础概念/components-of-kubernetes.svg","hash":"2475489eaf20163ec0f54ddc1d92aa8d4c87c96b","modified":1654139669033},{"_id":"source/_posts/岛屿的最大面积/maxarea1-grid.jpg","hash":"19d3a850bc97a2db82cfd8c385e9b430e61f1d9a","modified":1654261249895},{"_id":"source/_posts/Hexo-图片/20200707101943_hCjji.jpeg","hash":"658b53ae28379a44889bbd55c9a7f079a77bb3b9","modified":1653924518195},{"_id":"source/_posts/ThreadLoacl/image-20220531114220950.png","hash":"293074650194def2700bfcc08e92331ee2c6aac1","modified":1653968540950},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1627608806000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1627608806000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1627608806000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1627608806000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1627608806000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1627608806000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1627608806000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1627608806000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1627608806000},{"_id":"themes/next/package.json","hash":"fcb1963192a2b93388b581b339a31900784adcfc","modified":1653903394585},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1627608806000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1627608806000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1627608806000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1627608806000},{"_id":"themes/next/_config.yml","hash":"0e542a6784929ef8182d13faf59216fd1c854c8d","modified":1653901870275},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1627608806000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1627608806000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1627608806000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1627608806000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1627608806000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1627608806000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1627608806000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1627608806000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1627608806000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1627608806000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1627608806000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1627608806000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1627608806000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1627608806000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1627608806000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1627608806000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1627608806000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1627608806000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1627608806000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1627608806000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1627608806000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1627608806000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1627608806000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1627608806000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1627608806000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1627608806000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1627608806000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1627608806000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1627608806000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1627608806000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1627608806000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1627608806000},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1627608806000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1627608806000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1627608806000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1627608806000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1627608806000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1627608806000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1627608806000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1627608806000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1627608806000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1627608806000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1627608806000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1627608806000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1627608806000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1627608806000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1627608806000},{"_id":"themes/next/source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1653900378401},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1627608806000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1627608806000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1627608806000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1627608806000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1627608806000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1627608806000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1627608806000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1627608806000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1627608806000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1627608806000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1627608806000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1627608806000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1627608806000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1627608806000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1627608806000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1627608806000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1627608806000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1627608806000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1627608806000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1627608806000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1627608806000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1627608806000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1627608806000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1627608806000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1627608806000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1627608806000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1627608806000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1627608806000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1627608806000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1627608806000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1627608806000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1627608806000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1627608806000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1627608806000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1627608806000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1627608806000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1627608806000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1627608806000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1627608806000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1627608806000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1627608806000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1627608806000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1627608806000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1627608806000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1627608806000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1627608806000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1627608806000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1627608806000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1627608806000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1627608806000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1627608806000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1627608806000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1627608806000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1627608806000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1627608806000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1627608806000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1627608806000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1627608806000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1627608806000},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1627608806000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1627608806000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1627608806000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1627608806000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1627608806000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1627608806000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1627608806000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1627608806000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1627608806000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1627608806000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1627608806000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1627608806000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1627608806000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1627608806000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1627608806000},{"_id":"themes/next/package-lock.json","hash":"784fc41172aa9b71ba5cff73f5bbaa5a08f8c590","modified":1653903394584},{"_id":"public/search.xml","hash":"09d96031244fbf65aa60d202141ee37d2b8f64fa","modified":1654313500423},{"_id":"public/categories/index.html","hash":"e158ea69c0acdaba1129acfb1c9e6a3f1cb3558c","modified":1654313500423},{"_id":"public/about/index.html","hash":"0a11a081e4ab24d088be7ff60e5c6ae6d53a98ea","modified":1654313500423},{"_id":"public/tags/index.html","hash":"e315a8e1c064be81847ba28bdf939375030d24ff","modified":1654313500423},{"_id":"public/404/index.html","hash":"45188366df5d734c8441086787a054d434a70e3a","modified":1654313500423},{"_id":"public/2022/06/01/最小覆盖子串/index.html","hash":"48af5575d3d74a782fe2a82fb780f0fb26f1885d","modified":1654313500423},{"_id":"public/2022/06/01/RAFT算法/index.html","hash":"44983ee04ba755302346bca45433d5c5efc50f2f","modified":1654313500423},{"_id":"public/2022/05/31/CountDownLatch和CycilBarrier/index.html","hash":"5e81a3de5d8ce771e0a8c0c78d7ce435b2c74520","modified":1654313500423},{"_id":"public/2022/05/31/ThreadLoacl/index.html","hash":"9d4eeb0890e27833e6d0b1bd4b1458e9a342eebd","modified":1654313500423},{"_id":"public/2022/05/31/线程池/index.html","hash":"d1337947043a055552dc2dcd1d596290e9837502","modified":1654313500423},{"_id":"public/2022/05/31/AtomInteger与LongAdder/index.html","hash":"7b0d3f6b1d8321415bf6a7db0c11fa9e893e3084","modified":1654313500423},{"_id":"public/2022/05/31/死锁/index.html","hash":"532cee00ad386ec59c8e04aed7e81e515ce94b72","modified":1654313500423},{"_id":"public/2022/05/31/Java-IO/index.html","hash":"3ee8d68a29d2c10ea864b240738ba2f6c39710da","modified":1654313500423},{"_id":"public/2022/05/30/Hexo-图片/index.html","hash":"9e1f749a273a5a221956e8719edd871b6958f04b","modified":1654313500423},{"_id":"public/2022/05/29/How-to-use-hexo/index.html","hash":"f7d9cbe62416d8dbd96031d51a5e168be8e27823","modified":1654313500423},{"_id":"public/2022/05/29/hello-world/index.html","hash":"1d2bf7061341ba397c1ce4b02cdc16cf967ed913","modified":1654313500423},{"_id":"public/archives/index.html","hash":"93acc26efaa5fcb2022ec658077d1cd0dcf87300","modified":1654313500423},{"_id":"public/archives/page/2/index.html","hash":"444d24af9b086f74943512f4233867340ff390a1","modified":1654313500423},{"_id":"public/archives/page/3/index.html","hash":"2915029113da3e81bce0007c915b0cb4de18e0cf","modified":1654313500423},{"_id":"public/archives/page/4/index.html","hash":"d4b1face50ac34211145300270357b85b8ca05f9","modified":1654313500423},{"_id":"public/archives/2022/index.html","hash":"f46532684b8177bbc4dd77ffd7514e6ba2bd2400","modified":1654313500423},{"_id":"public/archives/2022/page/2/index.html","hash":"75455664466417be9943f37c9781b7b27a7889b2","modified":1654313500423},{"_id":"public/archives/2022/page/3/index.html","hash":"c15fd76c4155b86f7dfc6038fbbee10db4ad2d06","modified":1654313500423},{"_id":"public/archives/2022/page/4/index.html","hash":"5d32e68f79b1db65def5da66cd583ed8a46b1d99","modified":1654313500423},{"_id":"public/archives/2022/05/index.html","hash":"516fde8d52ffcf32848b977f4277c5f90a4b9aee","modified":1654313500423},{"_id":"public/archives/2022/05/page/2/index.html","hash":"8fc2f8adedab83dc843d3980aeb9e7293ce7a34a","modified":1654313500423},{"_id":"public/archives/2022/06/index.html","hash":"a0e754bbb5a8a1b611b22196eac17af66ebbfe1d","modified":1654313500423},{"_id":"public/archives/2022/06/page/2/index.html","hash":"b86a830bc055a4d40013be08162026abcdb19e50","modified":1654313500423},{"_id":"public/tags/AQS/index.html","hash":"fe13a68001caabecb9956bc655486308adbd9f72","modified":1654313500423},{"_id":"public/tags/线程安全/index.html","hash":"1463b00c4b07d829ed47ac6bdc524d9b8e77f26b","modified":1654313500423},{"_id":"public/tags/AtomInteger/index.html","hash":"9ee4fb070f146b4d0afaad5fb29102787de94808","modified":1654313500423},{"_id":"public/tags/LongAdder/index.html","hash":"843a4e319f1db1b550153b219f8478dd4ff2329c","modified":1654313500423},{"_id":"public/tags/CAS/index.html","hash":"8d2184d160ee39d46646564fab8ca4ad629c5d75","modified":1654313500423},{"_id":"public/tags/hexo/index.html","hash":"a074b10ac6f7aeb1edd0b9fabb61c9751c38c05c","modified":1654313500423},{"_id":"public/tags/教程/index.html","hash":"c598f1512278f1c0a99ad26c2d0f108fb9714786","modified":1654313500423},{"_id":"public/tags/并发/index.html","hash":"37c228bcc95274390105f78288e3e783edb3bd41","modified":1654313500423},{"_id":"public/tags/线程同步/index.html","hash":"5486d48db9c0d38667da63868ba23dfc4a3b29df","modified":1654313500423},{"_id":"public/tags/blog/index.html","hash":"24c5b3d90fff94a9c10627318bd2b97e60750421","modified":1654313500423},{"_id":"public/tags/工具/index.html","hash":"93c709d3a1b7f371c4d949d43e4587cae39b30f6","modified":1654313500423},{"_id":"public/tags/Java/index.html","hash":"6fc83145ab363c85daf311a332e75de77fb040f4","modified":1654313500423},{"_id":"public/tags/IO/index.html","hash":"c92b5d6c5398c0175514973c0f822258db87e35c","modified":1654313500423},{"_id":"public/tags/面试/index.html","hash":"bf9a6ba23d6d57a4ae8baec1eb30f380574c428d","modified":1654313500423},{"_id":"public/tags/基础/index.html","hash":"854e381ad0539a7e58dabee340c36ee7727e66f2","modified":1654313500423},{"_id":"public/tags/k8s/index.html","hash":"50aa65a938332db1eed781ce261c50de3475fc64","modified":1654313500423},{"_id":"public/tags/RESTful/index.html","hash":"04354011b1278f28bd8bb597437b3a5bfeb81256","modified":1654313500423},{"_id":"public/tags/HATEOAS/index.html","hash":"96003ddcd1beafce929935fd73a05f21a3b14e58","modified":1654313500423},{"_id":"public/tags/锁/index.html","hash":"8181282e85b08cc941459f4fc54399bbe5c3ee56","modified":1654313500423},{"_id":"public/tags/java/index.html","hash":"502884e17b57a0184fcea2827e20352a0ad75c81","modified":1654313500423},{"_id":"public/tags/关键字/index.html","hash":"a5f5351a7f359137af0229c8ecce001d6baf663d","modified":1654313500423},{"_id":"public/tags/ThreadLocal/index.html","hash":"2589d2a652df13cbca09e528354e292f31fbe64b","modified":1654313500423},{"_id":"public/tags/leetcode/index.html","hash":"3c44d85a808b6bae4c8fc432f802f20b7046f542","modified":1654313500423},{"_id":"public/tags/leetcode/page/2/index.html","hash":"2532837b5f7d687de1f044c4057473f64fae2d8f","modified":1654313500423},{"_id":"public/tags/算法/index.html","hash":"41e9e72071093f5da9a208f13bf8c8b47ff9463e","modified":1654313500423},{"_id":"public/tags/算法/page/2/index.html","hash":"c2f8e785a339262d1c5aef2c67ea152751b00ac9","modified":1654313500423},{"_id":"public/tags/dp/index.html","hash":"2356f7df71c419e56cb0b616504494083aa2fe65","modified":1654313500423},{"_id":"public/tags/树/index.html","hash":"efee948579bb3d98b3abfd024b747095bb9ff785","modified":1654313500423},{"_id":"public/tags/二叉树/index.html","hash":"7931b6a0e793becb7c1dfbfafeee4285f4cd25c0","modified":1654313500423},{"_id":"public/tags/链表/index.html","hash":"9a094d430143813f731a81014d5ee119d003579d","modified":1654313500423},{"_id":"public/tags/递归/index.html","hash":"2446d4738349ff32bfea722aac980e62dece129e","modified":1654313500423},{"_id":"public/tags/二分查找/index.html","hash":"aa6d75ba7c6aeb0da5ad6172f423d6d389437230","modified":1654313500423},{"_id":"public/tags/迭代/index.html","hash":"754c06e1a296f6b27d9689867e0ba1d374c4539d","modified":1654313500423},{"_id":"public/tags/数组/index.html","hash":"f6096e2dfe457e5c5a6eef79e0d5c945a06bb846","modified":1654313500423},{"_id":"public/tags/leedcode/index.html","hash":"5818dc3f162ad2f35c0ac125fa977295831d36c3","modified":1654313500423},{"_id":"public/tags/滑动窗口/index.html","hash":"aa615a5ff60bb8245a46c50138028f4a44a43385","modified":1654313500423},{"_id":"public/tags/hash/index.html","hash":"170f3192ed3c9b207a54583f4aabd9f5699ed817","modified":1654313500423},{"_id":"public/tags/优化/index.html","hash":"382110185d77472c1fb2e89621024bed5362670c","modified":1654313500423},{"_id":"public/tags/死锁/index.html","hash":"a330e8e0476cd4d6d40ec9a8afc4bdf77d56f672","modified":1654313500423},{"_id":"public/tags/stack/index.html","hash":"3a3a9c17ffda688e0c1e8e1364b4ee984b18c8da","modified":1654313500423},{"_id":"public/tags/线程池/index.html","hash":"fafece36104d5c9a8004e3b98741acd9019179c4","modified":1654313500423},{"_id":"public/tags/组合/index.html","hash":"b88a469aba312d1fa15fec387d1b471a36e6c19d","modified":1654313500423},{"_id":"public/tags/项目/index.html","hash":"140ffe68c588a38e3552c73e921d24bbf527fed9","modified":1654313500423},{"_id":"public/2022/06/04/乘积最大子数组/index.html","hash":"34ddcb65b607769e9cb17439422acbbdfb10f219","modified":1654313500423},{"_id":"public/2022/06/04/字符串解码/index.html","hash":"e57eaad7375a6559d0e58c132df8270c077d3a25","modified":1654313500423},{"_id":"public/2022/06/03/岛屿的最大面积/index.html","hash":"860cfd93a2381fddddf969dc2b15196b27512a16","modified":1654313500423},{"_id":"public/2022/06/03/最长连续序列/index.html","hash":"d815f040ba1315bfaf0f852e0205243a72dcba4b","modified":1654313500423},{"_id":"public/2022/06/03/不同路径/index.html","hash":"91f81bbc8f1bec9804f83a54860af34f3471d050","modified":1654313500423},{"_id":"public/2022/06/03/删除排序链表中的重复元素/index.html","hash":"8031be919aea4d7485f79c4227ccf6249933cd08","modified":1654313500423},{"_id":"public/2022/06/03/在排序数组中查找元素的第一个和最后一个位置/index.html","hash":"eb3a5959d865798f699c67d1bfaf5c02e2231bd5","modified":1654313500423},{"_id":"public/2022/06/03/最长重复子数组/index.html","hash":"fb4029e7f0d7e0b336b603b8e1cca5ef58256fde","modified":1654313500423},{"_id":"public/2022/06/03/组合总和/index.html","hash":"649e238d95d59ced1a44814546fd26a897098803","modified":1654313500423},{"_id":"public/2022/06/03/旋转图像/index.html","hash":"81b589de125af2dc478be1c7ed5934994b889ec1","modified":1654313500423},{"_id":"public/2022/06/02/最小路径和/index.html","hash":"60c224901cb67fe7dd32b5d1359de8d0da749bdd","modified":1654313500423},{"_id":"public/2022/06/02/二叉树的直径/index.html","hash":"ce9784927b283ca6f84c283cfce3452f3039726a","modified":1654313500423},{"_id":"public/2022/06/02/路径总和-II/index.html","hash":"ee0e3249f45efe87b0decf0de8fea86ba9799ef1","modified":1654313500423},{"_id":"public/2022/06/02/Kubernetes基础概念/index.html","hash":"b89366855ba90a502031129427f5844561e957b3","modified":1654313500423},{"_id":"public/2022/06/02/验证二叉搜索树/index.html","hash":"638649375aed1be1bc4415225a0f0366b27b90dc","modified":1654313500423},{"_id":"public/2022/06/01/最长有效括号/index.html","hash":"614e9821a90937544a7127efa0b371b936ef1cbf","modified":1654313500423},{"_id":"public/2022/06/01/零钱兑换/index.html","hash":"a9929cc90b940ad7475b390568c374407e32f934","modified":1654313500423},{"_id":"public/2022/06/01/RESTful/index.html","hash":"e58abbcd916f7a9d83a82b12c438bd52149f0be7","modified":1654313500423},{"_id":"public/2022/05/31/滑动窗口最大值/index.html","hash":"23d29df08dfadd3368a1e2a70963ccb38666b1c8","modified":1654313500423},{"_id":"public/2022/05/31/从前序与中序遍历序列构造二叉树/index.html","hash":"2d99562b6ded5eedde6c569b49797554d2323cab","modified":1654313500423},{"_id":"public/2022/05/31/AQS/index.html","hash":"a5796c7544d0f52437f500cd739ffdda32f908e7","modified":1654313500423},{"_id":"public/2022/05/31/Synchronized/index.html","hash":"ff40b1f1ed7de62b2f2e1e47b46ddce6dbdbfb72","modified":1654313500423},{"_id":"public/2022/05/30/Java-基础/index.html","hash":"36e804cee97d8877268ff1f812d3482dcd653f42","modified":1654313500423},{"_id":"public/2022/05/30/项目介绍之亮点与难点/index.html","hash":"7e707c312669b51968638c79d808ad375443c92c","modified":1654313500423},{"_id":"public/index.html","hash":"745dc909dbe197f1f7c6a5dcb6403ca83178cbf6","modified":1654313500423},{"_id":"public/page/2/index.html","hash":"dda0bfb34b8e784f230bf7b812ea514ddd263ecf","modified":1654313500423},{"_id":"public/page/3/index.html","hash":"afd2410773aff4cc3f328ced3367a8f583fc67bf","modified":1654313500423},{"_id":"public/page/4/index.html","hash":"3b073242a35a6540248e8723b2e45cdcdc7add71","modified":1654313500423},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1654313500423},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1654313500423},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1654313500423},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1654313500423},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1654313500423},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1654313500423},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1654313500423},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1654313500423},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1654313500423},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1654313500423},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1654313500423},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1654313500423},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1654313500423},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1654313500423},{"_id":"public/2022/05/31/ThreadLoacl/640.jpeg","hash":"8127f2e21aadd24a255a1dc83586fb45212faddd","modified":1654313500423},{"_id":"public/2022/06/03/删除排序链表中的重复元素/list1.jpg","hash":"1259812f50665b4ae19693c17e41cc36187cbf74","modified":1654313500423},{"_id":"public/2022/06/03/旋转图像/mat1.jpg","hash":"909611016f48da823bed5ebfffb3a1862acf7093","modified":1654313500423},{"_id":"public/2022/06/03/不同路径/robot_maze.png","hash":"4b426c3adb98bd889d6b6c9b80ce0229a2dc0778","modified":1654313500423},{"_id":"public/2022/06/02/路径总和-II/pathsumii1.jpg","hash":"7747e8c542f6606b82ff7d0bdc122cb6c48047aa","modified":1654313500423},{"_id":"public/2022/06/02/验证二叉搜索树/tree1.jpg","hash":"caeb731bf33ae5af2eb1dad04a87563c9519d4fb","modified":1654313500423},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1654313500423},{"_id":"public/2022/06/02/Kubernetes基础概念/components-of-kubernetes.svg","hash":"2475489eaf20163ec0f54ddc1d92aa8d4c87c96b","modified":1654313500423},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1654313500423},{"_id":"public/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1654313500423},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1654313500423},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1654313500423},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1654313500423},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1654313500423},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1654313500423},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1654313500423},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1654313500423},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1654313500423},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1654313500423},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1654313500423},{"_id":"public/css/main.css","hash":"2c4bcb4128ea7112d25018e9996f44a7bd7d02cd","modified":1654313500423},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1654313500423},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1654313500423},{"_id":"public/2022/06/03/岛屿的最大面积/maxarea1-grid.jpg","hash":"19d3a850bc97a2db82cfd8c385e9b430e61f1d9a","modified":1654313500423},{"_id":"public/2022/05/30/Hexo-图片/20200707101943_hCjji.jpeg","hash":"658b53ae28379a44889bbd55c9a7f079a77bb3b9","modified":1654313500423},{"_id":"public/2022/05/31/ThreadLoacl/image-20220531114220950.png","hash":"293074650194def2700bfcc08e92331ee2c6aac1","modified":1654313500423}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2022-05-29T04:19:04.000Z","_content":"# ABOUT ME\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-05-29 12:19:04\n---\n# ABOUT ME\n","updated":"2022-05-29T04:20:28.086Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl3zbjmkh00007qh8d2qc70fp","content":"<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT ME\"></a>ABOUT ME</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT ME\"></a>ABOUT ME</h1>"},{"title":"categories","date":"2022-05-30T08:38:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-30 16:38:10\ntype: \"categories\"\n---\n","updated":"2022-05-30T08:40:34.105Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl3zbjmkm00027qh8g68egekq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-05-30T08:40:48.000Z","type":"tags","comments":1,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-30 16:40:48\ntype: \"tags\"\ncomments: true\n---\n\n","updated":"2022-05-30T08:49:08.972Z","path":"tags/index.html","layout":"page","_id":"cl3zbjmkp00057qh8hbmw6uol","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2022-05-29T04:27:32.000Z","_content":"\nNOT FOUND!\n","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-05-29 12:27:32\n---\n\nNOT FOUND!\n","updated":"2022-05-29T04:27:53.418Z","path":"404/index.html","comments":1,"layout":"page","_id":"cl3zbjmkq00077qh88j9w1w7e","content":"<p>NOT FOUND!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>NOT FOUND!</p>\n"}],"Post":[{"title":"AQS","date":"2022-05-31T01:59:15.000Z","_content":"\nAbstractQueueSynchroinzer。提供了一个锁框架。内部有一个Integer类型state和一个双向队列。封装了线程锁请求入FIFO双向队列入队出队以及线程挂起唤醒等过程，实现线程安全。\n\n# **两种模式**\n\n独占：State作为一个独占资源\n\n共享：State的32位拆分为多个资源。\n\n# **公平非公平**\n\n公平锁：通过FIFO队列，新锁请求放入队尾\n\n非公平锁：锁请求先尝试获取锁，获取失败再入队列\n\n# **加锁执行流程**（独占非公平锁为例）\n\n- 调用`lock()`方法\n- CAS尝试修改State获取锁\n- 获取锁成功\n- 获取失败，加入锁队列，前驱节点设置为`Signal`状态（有后继节点需要唤醒），挂起当前线程\n- 等待前驱节点获取锁唤醒执行后，唤醒后继线程获取锁继续执行\n\n# **解锁执行流程**\n\n- 调用`unlock()`方法\n- CAS尝试修改State\n- 修改成功释放锁\n- 唤醒下一个节点\n\n# Condition\n\n```java\n// 初始化\nLock lock = new ReentrantLock();\nCondition condition = lock.newCondition();\n\n// await\ntry {\n  lock.lock();\n  condition.await();\n} catch (InterruptedException e) {\n  e.printStackTrace();\n} finally {\n  lock.unlock();\n}\n\n// lock\ntry {\n  lock.lock();\n  condition.signal();\n} finally {\n  lock.unlock();\n}\n```\n\nCondition内部维护条件队列（单向链表）。当调用`awit()`时，加入条件队列中。调用`signal()`时将头节点转移到AQS队列尾部，等待唤醒执行。`signalAll()`会将所有条件队列的节点计入AQS队列。\n\n\n\n# Synchronized VS AQS\n\n- Synchronized 无需手动解锁，AQS需要\n- Synchronized膨胀为重量级锁后无法回退，AQS会自适应调整\n- Synchronized 的wait/notifyAll没有AQS Condition灵活\n- AQS可中断锁\n- AQS可以实现公平锁\n\n","source":"_posts/AQS.md","raw":"---\ntitle: AQS\ndate: 2022-05-31 09:59:15\ntags:\n  - AQS\n  - 线程安全\n---\n\nAbstractQueueSynchroinzer。提供了一个锁框架。内部有一个Integer类型state和一个双向队列。封装了线程锁请求入FIFO双向队列入队出队以及线程挂起唤醒等过程，实现线程安全。\n\n# **两种模式**\n\n独占：State作为一个独占资源\n\n共享：State的32位拆分为多个资源。\n\n# **公平非公平**\n\n公平锁：通过FIFO队列，新锁请求放入队尾\n\n非公平锁：锁请求先尝试获取锁，获取失败再入队列\n\n# **加锁执行流程**（独占非公平锁为例）\n\n- 调用`lock()`方法\n- CAS尝试修改State获取锁\n- 获取锁成功\n- 获取失败，加入锁队列，前驱节点设置为`Signal`状态（有后继节点需要唤醒），挂起当前线程\n- 等待前驱节点获取锁唤醒执行后，唤醒后继线程获取锁继续执行\n\n# **解锁执行流程**\n\n- 调用`unlock()`方法\n- CAS尝试修改State\n- 修改成功释放锁\n- 唤醒下一个节点\n\n# Condition\n\n```java\n// 初始化\nLock lock = new ReentrantLock();\nCondition condition = lock.newCondition();\n\n// await\ntry {\n  lock.lock();\n  condition.await();\n} catch (InterruptedException e) {\n  e.printStackTrace();\n} finally {\n  lock.unlock();\n}\n\n// lock\ntry {\n  lock.lock();\n  condition.signal();\n} finally {\n  lock.unlock();\n}\n```\n\nCondition内部维护条件队列（单向链表）。当调用`awit()`时，加入条件队列中。调用`signal()`时将头节点转移到AQS队列尾部，等待唤醒执行。`signalAll()`会将所有条件队列的节点计入AQS队列。\n\n\n\n# Synchronized VS AQS\n\n- Synchronized 无需手动解锁，AQS需要\n- Synchronized膨胀为重量级锁后无法回退，AQS会自适应调整\n- Synchronized 的wait/notifyAll没有AQS Condition灵活\n- AQS可中断锁\n- AQS可以实现公平锁\n\n","slug":"AQS","published":1,"updated":"2022-05-31T08:17:28.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkk00017qh8fnhohmdj","content":"<p>AbstractQueueSynchroinzer。提供了一个锁框架。内部有一个Integer类型state和一个双向队列。封装了线程锁请求入FIFO双向队列入队出队以及线程挂起唤醒等过程，实现线程安全。</p>\n<h1 id=\"两种模式\"><a href=\"#两种模式\" class=\"headerlink\" title=\"两种模式\"></a><strong>两种模式</strong></h1><p>独占：State作为一个独占资源</p>\n<p>共享：State的32位拆分为多个资源。</p>\n<h1 id=\"公平非公平\"><a href=\"#公平非公平\" class=\"headerlink\" title=\"公平非公平\"></a><strong>公平非公平</strong></h1><p>公平锁：通过FIFO队列，新锁请求放入队尾</p>\n<p>非公平锁：锁请求先尝试获取锁，获取失败再入队列</p>\n<h1 id=\"加锁执行流程（独占非公平锁为例）\"><a href=\"#加锁执行流程（独占非公平锁为例）\" class=\"headerlink\" title=\"加锁执行流程（独占非公平锁为例）\"></a><strong>加锁执行流程</strong>（独占非公平锁为例）</h1><ul>\n<li>调用<code>lock()</code>方法</li>\n<li>CAS尝试修改State获取锁</li>\n<li>获取锁成功</li>\n<li>获取失败，加入锁队列，前驱节点设置为<code>Signal</code>状态（有后继节点需要唤醒），挂起当前线程</li>\n<li>等待前驱节点获取锁唤醒执行后，唤醒后继线程获取锁继续执行</li>\n</ul>\n<h1 id=\"解锁执行流程\"><a href=\"#解锁执行流程\" class=\"headerlink\" title=\"解锁执行流程\"></a><strong>解锁执行流程</strong></h1><ul>\n<li>调用<code>unlock()</code>方法</li>\n<li>CAS尝试修改State</li>\n<li>修改成功释放锁</li>\n<li>唤醒下一个节点</li>\n</ul>\n<h1 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"><span class=\"type\">Condition</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// await</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  lock.lock();</span><br><span class=\"line\">  condition.await();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">  e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lock</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  lock.lock();</span><br><span class=\"line\">  condition.signal();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Condition内部维护条件队列（单向链表）。当调用<code>awit()</code>时，加入条件队列中。调用<code>signal()</code>时将头节点转移到AQS队列尾部，等待唤醒执行。<code>signalAll()</code>会将所有条件队列的节点计入AQS队列。</p>\n<h1 id=\"Synchronized-VS-AQS\"><a href=\"#Synchronized-VS-AQS\" class=\"headerlink\" title=\"Synchronized VS AQS\"></a>Synchronized VS AQS</h1><ul>\n<li>Synchronized 无需手动解锁，AQS需要</li>\n<li>Synchronized膨胀为重量级锁后无法回退，AQS会自适应调整</li>\n<li>Synchronized 的wait&#x2F;notifyAll没有AQS Condition灵活</li>\n<li>AQS可中断锁</li>\n<li>AQS可以实现公平锁</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>AbstractQueueSynchroinzer。提供了一个锁框架。内部有一个Integer类型state和一个双向队列。封装了线程锁请求入FIFO双向队列入队出队以及线程挂起唤醒等过程，实现线程安全。</p>\n<h1 id=\"两种模式\"><a href=\"#两种模式\" class=\"headerlink\" title=\"两种模式\"></a><strong>两种模式</strong></h1><p>独占：State作为一个独占资源</p>\n<p>共享：State的32位拆分为多个资源。</p>\n<h1 id=\"公平非公平\"><a href=\"#公平非公平\" class=\"headerlink\" title=\"公平非公平\"></a><strong>公平非公平</strong></h1><p>公平锁：通过FIFO队列，新锁请求放入队尾</p>\n<p>非公平锁：锁请求先尝试获取锁，获取失败再入队列</p>\n<h1 id=\"加锁执行流程（独占非公平锁为例）\"><a href=\"#加锁执行流程（独占非公平锁为例）\" class=\"headerlink\" title=\"加锁执行流程（独占非公平锁为例）\"></a><strong>加锁执行流程</strong>（独占非公平锁为例）</h1><ul>\n<li>调用<code>lock()</code>方法</li>\n<li>CAS尝试修改State获取锁</li>\n<li>获取锁成功</li>\n<li>获取失败，加入锁队列，前驱节点设置为<code>Signal</code>状态（有后继节点需要唤醒），挂起当前线程</li>\n<li>等待前驱节点获取锁唤醒执行后，唤醒后继线程获取锁继续执行</li>\n</ul>\n<h1 id=\"解锁执行流程\"><a href=\"#解锁执行流程\" class=\"headerlink\" title=\"解锁执行流程\"></a><strong>解锁执行流程</strong></h1><ul>\n<li>调用<code>unlock()</code>方法</li>\n<li>CAS尝试修改State</li>\n<li>修改成功释放锁</li>\n<li>唤醒下一个节点</li>\n</ul>\n<h1 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"><span class=\"type\">Condition</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// await</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  lock.lock();</span><br><span class=\"line\">  condition.await();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">  e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lock</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  lock.lock();</span><br><span class=\"line\">  condition.signal();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Condition内部维护条件队列（单向链表）。当调用<code>awit()</code>时，加入条件队列中。调用<code>signal()</code>时将头节点转移到AQS队列尾部，等待唤醒执行。<code>signalAll()</code>会将所有条件队列的节点计入AQS队列。</p>\n<h1 id=\"Synchronized-VS-AQS\"><a href=\"#Synchronized-VS-AQS\" class=\"headerlink\" title=\"Synchronized VS AQS\"></a>Synchronized VS AQS</h1><ul>\n<li>Synchronized 无需手动解锁，AQS需要</li>\n<li>Synchronized膨胀为重量级锁后无法回退，AQS会自适应调整</li>\n<li>Synchronized 的wait&#x2F;notifyAll没有AQS Condition灵活</li>\n<li>AQS可中断锁</li>\n<li>AQS可以实现公平锁</li>\n</ul>\n"},{"title":"AtomInteger与LongAdder","date":"2022-05-31T00:59:49.000Z","_content":"\n\n\n# CAS\n\nCompare And Swap：通过原子的进行比较交换操作保证数据安全。\n\n具体流程：每次更新前先判断当前值是否相等，如果相等就进行替换。否则自旋等待锁释放。\n\n存在问题：ABA问题，就是存在另外线程将值改回之前的值，此时另一个不该获取锁的线程可以拿到锁\n\n如何避免：通过对信息加版本号，例如：使用AtomicStampedReference作为版本信息保证不会回退旧数据\n\n# AtomInteger\n\n底层通过CAS，能够原子的进行累加，保证线程安全。\n\n缺点：只有一个共享资源，高并发下大部分线程自旋等待。性能不佳\n\n改进：使用`LongAdder`\n\n\n\n# LongAdder\n\n底层同样采用CAS，但是内部类似分段锁机制通过一个Cell数据将资源划分开，降低失败次数并减小自旋性能损失。所以在高并发情况下推荐使用`LongAdder`\n","source":"_posts/AtomInteger与LongAdder.md","raw":"---\ntitle: AtomInteger与LongAdder\ndate: 2022-05-31 08:59:49\ntags:\n  - AtomInteger\n  - LongAdder\n  - 线程安全\n  - CAS\n---\n\n\n\n# CAS\n\nCompare And Swap：通过原子的进行比较交换操作保证数据安全。\n\n具体流程：每次更新前先判断当前值是否相等，如果相等就进行替换。否则自旋等待锁释放。\n\n存在问题：ABA问题，就是存在另外线程将值改回之前的值，此时另一个不该获取锁的线程可以拿到锁\n\n如何避免：通过对信息加版本号，例如：使用AtomicStampedReference作为版本信息保证不会回退旧数据\n\n# AtomInteger\n\n底层通过CAS，能够原子的进行累加，保证线程安全。\n\n缺点：只有一个共享资源，高并发下大部分线程自旋等待。性能不佳\n\n改进：使用`LongAdder`\n\n\n\n# LongAdder\n\n底层同样采用CAS，但是内部类似分段锁机制通过一个Cell数据将资源划分开，降低失败次数并减小自旋性能损失。所以在高并发情况下推荐使用`LongAdder`\n","slug":"AtomInteger与LongAdder","published":1,"updated":"2022-05-31T01:12:09.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkn00037qh8e69ggn3z","content":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p>Compare And Swap：通过原子的进行比较交换操作保证数据安全。</p>\n<p>具体流程：每次更新前先判断当前值是否相等，如果相等就进行替换。否则自旋等待锁释放。</p>\n<p>存在问题：ABA问题，就是存在另外线程将值改回之前的值，此时另一个不该获取锁的线程可以拿到锁</p>\n<p>如何避免：通过对信息加版本号，例如：使用AtomicStampedReference作为版本信息保证不会回退旧数据</p>\n<h1 id=\"AtomInteger\"><a href=\"#AtomInteger\" class=\"headerlink\" title=\"AtomInteger\"></a>AtomInteger</h1><p>底层通过CAS，能够原子的进行累加，保证线程安全。</p>\n<p>缺点：只有一个共享资源，高并发下大部分线程自旋等待。性能不佳</p>\n<p>改进：使用<code>LongAdder</code></p>\n<h1 id=\"LongAdder\"><a href=\"#LongAdder\" class=\"headerlink\" title=\"LongAdder\"></a>LongAdder</h1><p>底层同样采用CAS，但是内部类似分段锁机制通过一个Cell数据将资源划分开，降低失败次数并减小自旋性能损失。所以在高并发情况下推荐使用<code>LongAdder</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p>Compare And Swap：通过原子的进行比较交换操作保证数据安全。</p>\n<p>具体流程：每次更新前先判断当前值是否相等，如果相等就进行替换。否则自旋等待锁释放。</p>\n<p>存在问题：ABA问题，就是存在另外线程将值改回之前的值，此时另一个不该获取锁的线程可以拿到锁</p>\n<p>如何避免：通过对信息加版本号，例如：使用AtomicStampedReference作为版本信息保证不会回退旧数据</p>\n<h1 id=\"AtomInteger\"><a href=\"#AtomInteger\" class=\"headerlink\" title=\"AtomInteger\"></a>AtomInteger</h1><p>底层通过CAS，能够原子的进行累加，保证线程安全。</p>\n<p>缺点：只有一个共享资源，高并发下大部分线程自旋等待。性能不佳</p>\n<p>改进：使用<code>LongAdder</code></p>\n<h1 id=\"LongAdder\"><a href=\"#LongAdder\" class=\"headerlink\" title=\"LongAdder\"></a>LongAdder</h1><p>底层同样采用CAS，但是内部类似分段锁机制通过一个Cell数据将资源划分开，降低失败次数并减小自旋性能损失。所以在高并发情况下推荐使用<code>LongAdder</code></p>\n"},{"title":"Hexo 图片","date":"2022-05-30T15:24:16.000Z","_content":"\n参考：https://blog.csdn.net/m0_43401436/article/details/107191688\n\n\n\n![20200707101943_hCjji](20200707101943_hCjji.jpeg)\n\n","source":"_posts/Hexo-图片.md","raw":"---\ntitle: Hexo 图片\ndate: 2022-05-30 23:24:16\ntags: \n  - hexo\n  - 教程\n---\n\n参考：https://blog.csdn.net/m0_43401436/article/details/107191688\n\n\n\n![20200707101943_hCjji](20200707101943_hCjji.jpeg)\n\n","slug":"Hexo-图片","published":1,"updated":"2022-05-31T00:37:10.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkp00067qh8afcfeo62","content":"<p>参考：<a href=\"https://blog.csdn.net/m0_43401436/article/details/107191688\">https://blog.csdn.net/m0_43401436/article/details/107191688</a></p>\n<p><img src=\"/2022/05/30/Hexo-%E5%9B%BE%E7%89%87/20200707101943_hCjji.jpeg\" alt=\"20200707101943_hCjji\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：<a href=\"https://blog.csdn.net/m0_43401436/article/details/107191688\">https://blog.csdn.net/m0_43401436/article/details/107191688</a></p>\n<p><img src=\"/2022/05/30/Hexo-%E5%9B%BE%E7%89%87/20200707101943_hCjji.jpeg\" alt=\"20200707101943_hCjji\"></p>\n"},{"title":"CountDownLatch和CycilBarrier","date":"2022-05-31T06:46:31.000Z","_content":"\n# CountDownLatch\n\n内部采用AQS实现，初始化时设置State。\n\n`countDown()`方法调用时调用`tryRelease()`将state减一并通过CAS更新state；\n\n`await()`主线程调用时，会判断state是否为0，是0的话直接退出，否则加入AQS队列等待唤醒。\n\n\n\n# CyclicBarrier\n\n借助 ReentrantLock的Condition等待唤醒实现。\n\n在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）\n\n每次调用await时，会将count -1 ，操作count值是直接使用ReentrantLock来保证线程安全性；\n\n如果count不为0，则添加则condition队列中\n\n如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）\n\n\n\n# 总结\n\nCountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown()就是在利用CAS将state减-1，await()实际就是让头节点一直在等待state为0时，释放等待的线程\n\nCyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。\n\n","source":"_posts/CountDownLatch和CycilBarrier.md","raw":"---\ntitle: CountDownLatch和CycilBarrier\ndate: 2022-05-31 14:46:31\ntags:\n  - 并发\n  - 线程同步\n---\n\n# CountDownLatch\n\n内部采用AQS实现，初始化时设置State。\n\n`countDown()`方法调用时调用`tryRelease()`将state减一并通过CAS更新state；\n\n`await()`主线程调用时，会判断state是否为0，是0的话直接退出，否则加入AQS队列等待唤醒。\n\n\n\n# CyclicBarrier\n\n借助 ReentrantLock的Condition等待唤醒实现。\n\n在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）\n\n每次调用await时，会将count -1 ，操作count值是直接使用ReentrantLock来保证线程安全性；\n\n如果count不为0，则添加则condition队列中\n\n如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）\n\n\n\n# 总结\n\nCountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown()就是在利用CAS将state减-1，await()实际就是让头节点一直在等待state为0时，释放等待的线程\n\nCyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。\n\n","slug":"CountDownLatch和CycilBarrier","published":1,"updated":"2022-05-31T07:14:51.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkq00087qh8hvgz9xy1","content":"<h1 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h1><p>内部采用AQS实现，初始化时设置State。</p>\n<p><code>countDown()</code>方法调用时调用<code>tryRelease()</code>将state减一并通过CAS更新state；</p>\n<p><code>await()</code>主线程调用时，会判断state是否为0，是0的话直接退出，否则加入AQS队列等待唤醒。</p>\n<h1 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h1><p>借助 ReentrantLock的Condition等待唤醒实现。</p>\n<p>在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）</p>\n<p>每次调用await时，会将count -1 ，操作count值是直接使用ReentrantLock来保证线程安全性；</p>\n<p>如果count不为0，则添加则condition队列中</p>\n<p>如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown()就是在利用CAS将state减-1，await()实际就是让头节点一直在等待state为0时，释放等待的线程</p>\n<p>CyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h1><p>内部采用AQS实现，初始化时设置State。</p>\n<p><code>countDown()</code>方法调用时调用<code>tryRelease()</code>将state减一并通过CAS更新state；</p>\n<p><code>await()</code>主线程调用时，会判断state是否为0，是0的话直接退出，否则加入AQS队列等待唤醒。</p>\n<h1 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h1><p>借助 ReentrantLock的Condition等待唤醒实现。</p>\n<p>在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）</p>\n<p>每次调用await时，会将count -1 ，操作count值是直接使用ReentrantLock来保证线程安全性；</p>\n<p>如果count不为0，则添加则condition队列中</p>\n<p>如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown()就是在利用CAS将state减-1，await()实际就是让头节点一直在等待state为0时，释放等待的线程</p>\n<p>CyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。</p>\n"},{"title":"How to use hexo","date":"2022-05-29T01:06:33.000Z","_content":"\n# 参考  \n\nhttps://hexo.io/docs/\n\n# 准备  \n\n## Nodejs  \n\n## Git\n\n# 初始化  \n\n```bash\nnode hexo init blog  # create dir blog and init\ncd blog \nnpm init\n```\n\n# 配置  \n\n修改_config.yml文件，具体配置项参考文章顶部链接\n\n# 日常使用  \n\n```bash\nnode hexo clean  # clean\nnode hexo s  # start server to preview\n```\n\n修改主题：\n\n下载主题到theme目录下，修改_config.yml下theme配置即可\n\n# 配合github pages使用\n\n_config.yml配置github仓库以及branch\n\n一键deploy需要安装插件：hexo-github-dploy\n\nsearch功能插件：hexo-search-db\n\n具体参考文章顶部链接\n","source":"_posts/How-to-use-hexo.md","raw":"---\ntitle: How to use hexo\ndate: 2022-05-29 09:06:33\ntags:\n  - hexo\n  - blog\n  - 工具\n---\n\n# 参考  \n\nhttps://hexo.io/docs/\n\n# 准备  \n\n## Nodejs  \n\n## Git\n\n# 初始化  \n\n```bash\nnode hexo init blog  # create dir blog and init\ncd blog \nnpm init\n```\n\n# 配置  \n\n修改_config.yml文件，具体配置项参考文章顶部链接\n\n# 日常使用  \n\n```bash\nnode hexo clean  # clean\nnode hexo s  # start server to preview\n```\n\n修改主题：\n\n下载主题到theme目录下，修改_config.yml下theme配置即可\n\n# 配合github pages使用\n\n_config.yml配置github仓库以及branch\n\n一键deploy需要安装插件：hexo-github-dploy\n\nsearch功能插件：hexo-search-db\n\n具体参考文章顶部链接\n","slug":"How-to-use-hexo","published":1,"updated":"2022-05-30T10:08:15.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkr00097qh84nmp9usu","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://hexo.io/docs/\">https://hexo.io/docs/</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h2><h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node hexo init blog  <span class=\"comment\"># create dir blog and init</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog </span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>修改_config.yml文件，具体配置项参考文章顶部链接</p>\n<h1 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node hexo clean  <span class=\"comment\"># clean</span></span><br><span class=\"line\">node hexo s  <span class=\"comment\"># start server to preview</span></span><br></pre></td></tr></table></figure>\n\n<p>修改主题：</p>\n<p>下载主题到theme目录下，修改_config.yml下theme配置即可</p>\n<h1 id=\"配合github-pages使用\"><a href=\"#配合github-pages使用\" class=\"headerlink\" title=\"配合github pages使用\"></a>配合github pages使用</h1><p>_config.yml配置github仓库以及branch</p>\n<p>一键deploy需要安装插件：hexo-github-dploy</p>\n<p>search功能插件：hexo-search-db</p>\n<p>具体参考文章顶部链接</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://hexo.io/docs/\">https://hexo.io/docs/</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h2><h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node hexo init blog  <span class=\"comment\"># create dir blog and init</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog </span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>修改_config.yml文件，具体配置项参考文章顶部链接</p>\n<h1 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node hexo clean  <span class=\"comment\"># clean</span></span><br><span class=\"line\">node hexo s  <span class=\"comment\"># start server to preview</span></span><br></pre></td></tr></table></figure>\n\n<p>修改主题：</p>\n<p>下载主题到theme目录下，修改_config.yml下theme配置即可</p>\n<h1 id=\"配合github-pages使用\"><a href=\"#配合github-pages使用\" class=\"headerlink\" title=\"配合github pages使用\"></a>配合github pages使用</h1><p>_config.yml配置github仓库以及branch</p>\n<p>一键deploy需要安装插件：hexo-github-dploy</p>\n<p>search功能插件：hexo-search-db</p>\n<p>具体参考文章顶部链接</p>\n"},{"title":"Java IO","date":"2022-05-31T00:37:56.000Z","_content":"\n# BIO -> NIO\n\n>  BIO： Blocking IO 阻塞IO，按字节进行处理\n>\n> NIO：No-Blocking IO（New-IO），非阻塞。按缓冲区处理\n\n\n\n# NIO\n\n3个组件：\n\n- Selector：检查Channel状态变化\n- Channel：运输数据通道\n- Buffer：数据存储\n\n零拷贝：\n\n- mmap（内核缓冲区与用户缓冲区的共享）\n\n- sendfile（系统底层函数支持）\n\n\n\n# 操作系统支持\n\nselect，poll，epoll\n\n\n\n\n\n","source":"_posts/Java-IO.md","raw":"---\ntitle: Java IO\ndate: 2022-05-31 08:37:56\ntags: \n  - Java\n  - IO\n---\n\n# BIO -> NIO\n\n>  BIO： Blocking IO 阻塞IO，按字节进行处理\n>\n> NIO：No-Blocking IO（New-IO），非阻塞。按缓冲区处理\n\n\n\n# NIO\n\n3个组件：\n\n- Selector：检查Channel状态变化\n- Channel：运输数据通道\n- Buffer：数据存储\n\n零拷贝：\n\n- mmap（内核缓冲区与用户缓冲区的共享）\n\n- sendfile（系统底层函数支持）\n\n\n\n# 操作系统支持\n\nselect，poll，epoll\n\n\n\n\n\n","slug":"Java-IO","published":1,"updated":"2022-05-31T00:50:33.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkr000b7qh8evux63yz","content":"<h1 id=\"BIO-gt-NIO\"><a href=\"#BIO-gt-NIO\" class=\"headerlink\" title=\"BIO -&gt; NIO\"></a>BIO -&gt; NIO</h1><blockquote>\n<p> BIO： Blocking IO 阻塞IO，按字节进行处理</p>\n<p>NIO：No-Blocking IO（New-IO），非阻塞。按缓冲区处理</p>\n</blockquote>\n<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>3个组件：</p>\n<ul>\n<li>Selector：检查Channel状态变化</li>\n<li>Channel：运输数据通道</li>\n<li>Buffer：数据存储</li>\n</ul>\n<p>零拷贝：</p>\n<ul>\n<li><p>mmap（内核缓冲区与用户缓冲区的共享）</p>\n</li>\n<li><p>sendfile（系统底层函数支持）</p>\n</li>\n</ul>\n<h1 id=\"操作系统支持\"><a href=\"#操作系统支持\" class=\"headerlink\" title=\"操作系统支持\"></a>操作系统支持</h1><p>select，poll，epoll</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"BIO-gt-NIO\"><a href=\"#BIO-gt-NIO\" class=\"headerlink\" title=\"BIO -&gt; NIO\"></a>BIO -&gt; NIO</h1><blockquote>\n<p> BIO： Blocking IO 阻塞IO，按字节进行处理</p>\n<p>NIO：No-Blocking IO（New-IO），非阻塞。按缓冲区处理</p>\n</blockquote>\n<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>3个组件：</p>\n<ul>\n<li>Selector：检查Channel状态变化</li>\n<li>Channel：运输数据通道</li>\n<li>Buffer：数据存储</li>\n</ul>\n<p>零拷贝：</p>\n<ul>\n<li><p>mmap（内核缓冲区与用户缓冲区的共享）</p>\n</li>\n<li><p>sendfile（系统底层函数支持）</p>\n</li>\n</ul>\n<h1 id=\"操作系统支持\"><a href=\"#操作系统支持\" class=\"headerlink\" title=\"操作系统支持\"></a>操作系统支持</h1><p>select，poll，epoll</p>\n"},{"title":"Java 基础","date":"2022-05-30T02:29:11.000Z","_content":"\n# 语言特性\n\n- 面向对象（封装、继承、多态）\n- 跨平台\n- 多线程支持\n- 编译与解释执行（class文件编译与JIT即时编译（编译为机器码），JVM执行时解释执行）\n\n\n\n# 基础\n\n1. 基础数据类型\n\n   | 基本类型  | 位数 | 字节 | 默认值  | 取值范围                                   |\n   | --------- | ---- | ---- | ------- | ------------------------------------------ |\n   | `byte`    | 8    | 1    | 0       | -128 ~ 127                                 |\n   | `short`   | 16   | 2    | 0       | -32768 ~ 32767                             |\n   | `int`     | 32   | 4    | 0       | -2147483648 ~ 2147483647                   |\n   | `long`    | 64   | 8    | 0L      | -9223372036854775808 ~ 9223372036854775807 |\n   | `char`    | 16   | 2    | 'u0000' | 0 ~ 65535                                  |\n   | `float`   | 32   | 4    | 0f      | 1.4E-45 ~ 3.4028235E38                     |\n   | `double`  | 64   | 8    | 0d      | 4.9E-324 ~ 1.7976931348623157E308          |\n   | `boolean` | 1    |      | false   | true、false                                |\n\n   注意：boolean长度为明确。取决于JVM实现，逻辑上是占用1位。\n\n2. 自动拆装箱\n\n   装箱其实就是调用了 包装类的`valueOf()`方法，拆箱其实就是调用了 `xxxValue()`方法。\n\n   1. **装箱**：将基本类型用它们对应的引用类型包装起来；\n   2. **拆箱**：将包装类型转换为基本数据类型；\n\n3. 局部变量与成员变量\n\n   局部变量通常在栈中，随方法调用结束而回收。无默认值需设置；\n\n   成员变量通常在堆中，随对象创建而存在。有默认值。\n\n4. 集合\n\n   List，Map，Set以及线程安全相关集合\n\n   集合操作参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md\n\n5. 并发\n\n6. 异常\n\n   共同祖先：java.lang.Throwable\n\n   重要子类：Exception与Error\n\n   **`Exception`** ：程序本身可以处理的异常，可以通过 `catch` 来进行捕获。`Exception` 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\n\n   - Checked Excpetion:\n     - IOException\n     - ClassNotFoundException\n     - SQLException\n     - FileNotFoundException\n   - Unchecked Exception:\n     - ArithmeticException\n     - ClassCastException\n     - NullPointException\n     - IllegalThreadStateException\n     - IndexOutOfBoundsException\n\n   **`Error`**：`Error` 属于程序无法处理的错误 ，~~我们没办法通过 `catch` 来进行捕获~~不建议通过`catch`捕获 。例如 Java 虚拟机运行错误（`Virtual MachineError`）、虚拟机内存不够错误(`OutOfMemoryError`)、类定义错误（`NoClassDefFoundError`）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\n\n   - OutOfMemoryError\n   - StackOverFlowError\n   - AssertionError\n   - VritualMachineError\n\n   注意：不要再finally中使用return！在try中return返回值会放在一个本地变量中，后续执行到finally中的return，会覆盖并返回。\n\n   JVM官方文档明确提到：\n\n   If the `try` clause executes a *return*, the compiled code does the following:\n\n   1. Saves the return value (if any) in a local variable.\n   2. Executes a *jsr* to the code for the `finally` clause.\n   3. Upon return from the `finally` clause, returns the value saved in the local variable.\n\n   异常使用规范：异常信息有意义；日志打印异常与抛出异常不要并存。\n\n7. 泛型\n\n   一套工具适配多种类型\n\n   提供编译时检查避免错误\n\n   泛型擦出：运行时泛型会去掉\n\n8. 反射\n\n   优点：灵活\n\n   缺点：性能问题，参考：https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow\n\n   应用场景：各种框架配置与调用都有用到反射。\n\n9. IO\n\n   操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 **用户空间（User space）** 和 **内核空间（Kernel space ）** 。\n\n   **从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。**\n\n   UNIX 系统下， IO 模型一共有 5 种： **同步阻塞 I/O**、**同步非阻塞 I/O**、**I/O 多路复用**、**信号驱动 I/O** 和**异步 I/O**。\n\n   - BIO\n\n     - 同步阻塞 I/O\n\n       阻塞每次读写，等到内核态数据拷贝完成返回。\n\n     - 同步非阻塞 I/O\n\n       多次读取不阻塞，内核态数据拷贝时时阻塞。\n\n   - NIO\n\n     - select \n\n       维护很多socket连接（创建链接时维护socket集合），通过询问内核是否已准备好数据，如果准备好再发器read（读取过程依旧是阻塞的），内核轮询socket集合，找到准备完成的socket进行数据读取（可能只有部分socket活跃，每次轮训耗时长且无意义）。每次需要将socket集合传递给内核，有一定开销。进程被唤醒拿到相应还需要遍历确定哪个socket收到数据，共需要两次遍历。select有最大文件描述符数量限制。\n\n       ```c\n       int select(int nfds, fd_set *readfds, fd_set *writefds,\n                  fd_set *exceptfds, struct timeval *timeout);\n       ```\n\n       \n\n     - pool 同select，但是无最大文件描述符限制\n\n       ```c\n       int poll(struct pollfd fds[], nfds_t nfds, int timeout)；\n       ```\n\n       \n\n     - epool\n\n       基于事件\n\n       ```c\n       struct epitem {\n         struct rb_node  rbn;      \n         struct list_head  rdllink; \n         struct epitem  *next;      \n         struct epoll_filefd  ffd;  \n         int  nwait;                 \n         struct list_head  pwqlist;  \n         struct eventpoll  *ep;      \n         struct list_head  fllink;   \n         struct epoll_event  event;  \n       };\n       \n       struct eventpoll {\n         spin_lock_t       lock; \n         struct mutex      mtx;  \n         wait_queue_head_t     wq; \n         wait_queue_head_t   poll_wait; \n         struct list_head    rdllist;   //就绪链表\n         struct rb_root      rbr;      //红黑树根节点 \n         struct epitem      *ovflist;\n       };\n       \n       //用户数据载体\n       typedef union epoll_data {\n          void    *ptr;\n          int      fd;\n          uint32_t u32;\n          uint64_t u64;\n       } epoll_data_t;\n       //fd装载入内核的载体\n        struct epoll_event {\n            uint32_t     events;    /* Epoll events */\n            epoll_data_t data;      /* User data variable */\n        };\n        //三板斧api\n       int epoll_create(int size); \n       int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);  \n       int epoll_wait(int epfd, struct epoll_event *events,\n                        int maxevents, int timeout);\n       ```\n\n       \n\n   - AIO\n\n     拿回数据异步\n\n   参考链接：https://www.jianshu.com/p/722819425dbd\n\n   \n\n   10. JVM\n\n       可以先看看这个：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md\n\n       \n\n       - 内存分配\n\n       堆：eden区，2个suvivor区，old区。对象创建会在eden创建，经过一次回收会搬到suvivor区，后续每经过一次回收对象年龄加一，直到到达老年代阈值（默认15岁），对象进入老年代。老年代阈值会根据配置动态计算。\n\n       栈：本地方法栈、虚拟机栈以及程序计数器\n\n       方法区：加载的类信息以及运行时常量池以及JIT编译代码缓存。字符串常量池与静态变量均在堆中。\n\n       参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md\n\n       \n\n       - 对象创建流程\n\n         1. 类加载\n\n            检查是否已加载过，如果没有进行类加载\n\n         2. 申请内存\n\n            类加载完成即可确定需要的内存，随后便申请内存分配\n\n            分配策略：\n\n            - 指针碰撞\n\n              维护一个指针，区分已使用空间与未使用空间。\n\n            - 空闲列表\n\n              维护一个列表，记录哪些内存块可用\n\n            并发分配内存：\n\n            - CAS+失败重试：通过CAS保证操作原子性\n            - TLAB（Thread Local Allocation Buffer：本地分配缓存区，在线程初始化时申请Eden一部分空间）：分配内存时先在TLAB分配，到达一定量后通过CAS刷新到堆上。缺点：空间较小大对象无法适配。\n\n         3. 类初始化\n\n            - 初始化零值\n\n              设置初始值，对象头不调整\n\n            - 设置对象头\n\n              **虚拟机要对对象进行必要的设置**，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 **这些信息存放在对象头中。** 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。\n\n            - init方法执行\n\n       - 对象内存布局\n\n         对象头，实例数据，对齐填充\n\n         **Hotspot 虚拟机的对象头包括两部分信息**，**第一部分用于存储对象自身的运行时数据**（哈希码、GC 分代年龄、锁状态标志等等），**另一部分是类型指针**，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。\n\n         **实例数据部分是对象真正存储的有效信息**，也是在程序中所定义的各种类型的字段内容。\n\n         **对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。** 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。\n\n         \n\n       - 对象访问方式\n\n         句柄和直接指针\n\n         - 句柄指向句柄池数据（堆），再由句柄池指向实例数据（堆）和对象类型数据（栈）\n\n         - 直接指针直接执行对象实例数据（堆），其对象头存在指向对象类型数据（栈）的指针\n\n         优缺点：句柄在对象变化过程后用户的引用无需变化，而直接指针需要变化。但是直接指针少一次指针定位开销，速度更快。\n\n       - 类加载模型\n\n         双亲委托\n\n         如果自定义类加载器：继承`ClassLoader`，重写`findClass()`方法，如果需要打破双亲委托，则需要重写`loadClass()`方法\n\n       - JVM参数与优化\n\n         参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md\n\n# 面试问题整理\n\n1. 字符型常量与字符串常量的区别？\n\n   字符常量相当于一个整形ASCII值，可以参与运算；字符串是内存地址。字符串常量2个字节；字符串若干个字节\n\n2. 重写遵循规范\n\n   1. 方法名，形参需要相同\n   2. 返回值类型以及声明异常均小于或等于父类方法\n   3. 访问权限需大于或等于父类方法\n\n3. 可变长参数\n\n   可以传入不等长参数：\n\n   ```java\n   public static void method(String... args) {\n      //......\n   }\n   ```\n\n   需要注意的：如果方法重载，固定参数方法优先级会高于变长参数方法\n\n   \n\n   \n\n4. 基本数据类型与包装类的区别？\n\n   1. 包装类型默认值null\n   2. 包装类型可用于泛型\n   3. 基本数据类型局部变量存储与Java虚拟机栈局部变量表中，基本数据类型的成员变量存在堆中，包装类型都在堆中\n\n5. 构造方否可以override？\n\n   不能override，可以overload\n\n6. java 9为何将String底层由 char[] 改成了 byte[] ?\n\n   新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，`byte` 占一个字节(8 位)，`char` 占用 2 个字节（16），`byte` 相较 `char` 节省一半的内存空间。\n\n7. String采用运算符“+”拼接为何耗费内存？\n\n   内部采用StringBuillder.append() 方法实现，拼接完后调用toString() 得到Stirng对象。这样就会存在大量的StringBuilder对象。\n\n8. 字符串常量池什么作用？\n\n   创建字符串后会在堆中创建具体对象，然后在常量池中创建对应的引用。访问字符串是直接返回常量池中的引用即可。字节码命令“ldc” 可以判断字符串常量池是否保存对应的字符串对象引用。\n\n9. intern方法作用\n\n   native方法：如果字符串常量池不包含字符串饮用添加。然后返回字符串引用。\n\n10. 常量折叠\n\n    对于源代码中存在的可以确定的static final修饰的基础变量数据类型以及String，会对其进行计算并作为常量嵌入最终生成代码中。这事javac编译器做的优化\n\n11. finally代码一定执行吗？\n\n    不一定！虚拟机异常终止便不会执行了。比如调用：System.exit(1); 还有所在线程死亡，CPU停止执行。\n\n12. Java只有值传递吗？\n\n    是的，无论是基础类型还是引用类型。如果要修改对象值，通过引用修改即可。\n\n13. 通过类加载器与Class.forName()差异\n\n    Class.forName() 可以指定是否初始化Class，类加载器不会初始化。如果不出实话静态代码不会得到执行。\n\n14. 精度丢失与BigDecimal\n\n    由于float，double等表示小数时由于二进制存储原理，对于一些小数没有精确的2进制表示形式所以存在精度丢失。BigDecimal实现利用了BigInteger，并加入小数位的概念实现避免了精读丢失。\n\n    \n\n    \n\n\n\n\n\n","source":"_posts/Java-基础.md","raw":"---\ntitle: Java 基础\ndate: 2022-05-30 10:29:11\ntags: \n  - 面试 \n  - Java \n  - 基础\n---\n\n# 语言特性\n\n- 面向对象（封装、继承、多态）\n- 跨平台\n- 多线程支持\n- 编译与解释执行（class文件编译与JIT即时编译（编译为机器码），JVM执行时解释执行）\n\n\n\n# 基础\n\n1. 基础数据类型\n\n   | 基本类型  | 位数 | 字节 | 默认值  | 取值范围                                   |\n   | --------- | ---- | ---- | ------- | ------------------------------------------ |\n   | `byte`    | 8    | 1    | 0       | -128 ~ 127                                 |\n   | `short`   | 16   | 2    | 0       | -32768 ~ 32767                             |\n   | `int`     | 32   | 4    | 0       | -2147483648 ~ 2147483647                   |\n   | `long`    | 64   | 8    | 0L      | -9223372036854775808 ~ 9223372036854775807 |\n   | `char`    | 16   | 2    | 'u0000' | 0 ~ 65535                                  |\n   | `float`   | 32   | 4    | 0f      | 1.4E-45 ~ 3.4028235E38                     |\n   | `double`  | 64   | 8    | 0d      | 4.9E-324 ~ 1.7976931348623157E308          |\n   | `boolean` | 1    |      | false   | true、false                                |\n\n   注意：boolean长度为明确。取决于JVM实现，逻辑上是占用1位。\n\n2. 自动拆装箱\n\n   装箱其实就是调用了 包装类的`valueOf()`方法，拆箱其实就是调用了 `xxxValue()`方法。\n\n   1. **装箱**：将基本类型用它们对应的引用类型包装起来；\n   2. **拆箱**：将包装类型转换为基本数据类型；\n\n3. 局部变量与成员变量\n\n   局部变量通常在栈中，随方法调用结束而回收。无默认值需设置；\n\n   成员变量通常在堆中，随对象创建而存在。有默认值。\n\n4. 集合\n\n   List，Map，Set以及线程安全相关集合\n\n   集合操作参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md\n\n5. 并发\n\n6. 异常\n\n   共同祖先：java.lang.Throwable\n\n   重要子类：Exception与Error\n\n   **`Exception`** ：程序本身可以处理的异常，可以通过 `catch` 来进行捕获。`Exception` 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\n\n   - Checked Excpetion:\n     - IOException\n     - ClassNotFoundException\n     - SQLException\n     - FileNotFoundException\n   - Unchecked Exception:\n     - ArithmeticException\n     - ClassCastException\n     - NullPointException\n     - IllegalThreadStateException\n     - IndexOutOfBoundsException\n\n   **`Error`**：`Error` 属于程序无法处理的错误 ，~~我们没办法通过 `catch` 来进行捕获~~不建议通过`catch`捕获 。例如 Java 虚拟机运行错误（`Virtual MachineError`）、虚拟机内存不够错误(`OutOfMemoryError`)、类定义错误（`NoClassDefFoundError`）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\n\n   - OutOfMemoryError\n   - StackOverFlowError\n   - AssertionError\n   - VritualMachineError\n\n   注意：不要再finally中使用return！在try中return返回值会放在一个本地变量中，后续执行到finally中的return，会覆盖并返回。\n\n   JVM官方文档明确提到：\n\n   If the `try` clause executes a *return*, the compiled code does the following:\n\n   1. Saves the return value (if any) in a local variable.\n   2. Executes a *jsr* to the code for the `finally` clause.\n   3. Upon return from the `finally` clause, returns the value saved in the local variable.\n\n   异常使用规范：异常信息有意义；日志打印异常与抛出异常不要并存。\n\n7. 泛型\n\n   一套工具适配多种类型\n\n   提供编译时检查避免错误\n\n   泛型擦出：运行时泛型会去掉\n\n8. 反射\n\n   优点：灵活\n\n   缺点：性能问题，参考：https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow\n\n   应用场景：各种框架配置与调用都有用到反射。\n\n9. IO\n\n   操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 **用户空间（User space）** 和 **内核空间（Kernel space ）** 。\n\n   **从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。**\n\n   UNIX 系统下， IO 模型一共有 5 种： **同步阻塞 I/O**、**同步非阻塞 I/O**、**I/O 多路复用**、**信号驱动 I/O** 和**异步 I/O**。\n\n   - BIO\n\n     - 同步阻塞 I/O\n\n       阻塞每次读写，等到内核态数据拷贝完成返回。\n\n     - 同步非阻塞 I/O\n\n       多次读取不阻塞，内核态数据拷贝时时阻塞。\n\n   - NIO\n\n     - select \n\n       维护很多socket连接（创建链接时维护socket集合），通过询问内核是否已准备好数据，如果准备好再发器read（读取过程依旧是阻塞的），内核轮询socket集合，找到准备完成的socket进行数据读取（可能只有部分socket活跃，每次轮训耗时长且无意义）。每次需要将socket集合传递给内核，有一定开销。进程被唤醒拿到相应还需要遍历确定哪个socket收到数据，共需要两次遍历。select有最大文件描述符数量限制。\n\n       ```c\n       int select(int nfds, fd_set *readfds, fd_set *writefds,\n                  fd_set *exceptfds, struct timeval *timeout);\n       ```\n\n       \n\n     - pool 同select，但是无最大文件描述符限制\n\n       ```c\n       int poll(struct pollfd fds[], nfds_t nfds, int timeout)；\n       ```\n\n       \n\n     - epool\n\n       基于事件\n\n       ```c\n       struct epitem {\n         struct rb_node  rbn;      \n         struct list_head  rdllink; \n         struct epitem  *next;      \n         struct epoll_filefd  ffd;  \n         int  nwait;                 \n         struct list_head  pwqlist;  \n         struct eventpoll  *ep;      \n         struct list_head  fllink;   \n         struct epoll_event  event;  \n       };\n       \n       struct eventpoll {\n         spin_lock_t       lock; \n         struct mutex      mtx;  \n         wait_queue_head_t     wq; \n         wait_queue_head_t   poll_wait; \n         struct list_head    rdllist;   //就绪链表\n         struct rb_root      rbr;      //红黑树根节点 \n         struct epitem      *ovflist;\n       };\n       \n       //用户数据载体\n       typedef union epoll_data {\n          void    *ptr;\n          int      fd;\n          uint32_t u32;\n          uint64_t u64;\n       } epoll_data_t;\n       //fd装载入内核的载体\n        struct epoll_event {\n            uint32_t     events;    /* Epoll events */\n            epoll_data_t data;      /* User data variable */\n        };\n        //三板斧api\n       int epoll_create(int size); \n       int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);  \n       int epoll_wait(int epfd, struct epoll_event *events,\n                        int maxevents, int timeout);\n       ```\n\n       \n\n   - AIO\n\n     拿回数据异步\n\n   参考链接：https://www.jianshu.com/p/722819425dbd\n\n   \n\n   10. JVM\n\n       可以先看看这个：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md\n\n       \n\n       - 内存分配\n\n       堆：eden区，2个suvivor区，old区。对象创建会在eden创建，经过一次回收会搬到suvivor区，后续每经过一次回收对象年龄加一，直到到达老年代阈值（默认15岁），对象进入老年代。老年代阈值会根据配置动态计算。\n\n       栈：本地方法栈、虚拟机栈以及程序计数器\n\n       方法区：加载的类信息以及运行时常量池以及JIT编译代码缓存。字符串常量池与静态变量均在堆中。\n\n       参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md\n\n       \n\n       - 对象创建流程\n\n         1. 类加载\n\n            检查是否已加载过，如果没有进行类加载\n\n         2. 申请内存\n\n            类加载完成即可确定需要的内存，随后便申请内存分配\n\n            分配策略：\n\n            - 指针碰撞\n\n              维护一个指针，区分已使用空间与未使用空间。\n\n            - 空闲列表\n\n              维护一个列表，记录哪些内存块可用\n\n            并发分配内存：\n\n            - CAS+失败重试：通过CAS保证操作原子性\n            - TLAB（Thread Local Allocation Buffer：本地分配缓存区，在线程初始化时申请Eden一部分空间）：分配内存时先在TLAB分配，到达一定量后通过CAS刷新到堆上。缺点：空间较小大对象无法适配。\n\n         3. 类初始化\n\n            - 初始化零值\n\n              设置初始值，对象头不调整\n\n            - 设置对象头\n\n              **虚拟机要对对象进行必要的设置**，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 **这些信息存放在对象头中。** 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。\n\n            - init方法执行\n\n       - 对象内存布局\n\n         对象头，实例数据，对齐填充\n\n         **Hotspot 虚拟机的对象头包括两部分信息**，**第一部分用于存储对象自身的运行时数据**（哈希码、GC 分代年龄、锁状态标志等等），**另一部分是类型指针**，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。\n\n         **实例数据部分是对象真正存储的有效信息**，也是在程序中所定义的各种类型的字段内容。\n\n         **对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。** 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。\n\n         \n\n       - 对象访问方式\n\n         句柄和直接指针\n\n         - 句柄指向句柄池数据（堆），再由句柄池指向实例数据（堆）和对象类型数据（栈）\n\n         - 直接指针直接执行对象实例数据（堆），其对象头存在指向对象类型数据（栈）的指针\n\n         优缺点：句柄在对象变化过程后用户的引用无需变化，而直接指针需要变化。但是直接指针少一次指针定位开销，速度更快。\n\n       - 类加载模型\n\n         双亲委托\n\n         如果自定义类加载器：继承`ClassLoader`，重写`findClass()`方法，如果需要打破双亲委托，则需要重写`loadClass()`方法\n\n       - JVM参数与优化\n\n         参考：https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md\n\n# 面试问题整理\n\n1. 字符型常量与字符串常量的区别？\n\n   字符常量相当于一个整形ASCII值，可以参与运算；字符串是内存地址。字符串常量2个字节；字符串若干个字节\n\n2. 重写遵循规范\n\n   1. 方法名，形参需要相同\n   2. 返回值类型以及声明异常均小于或等于父类方法\n   3. 访问权限需大于或等于父类方法\n\n3. 可变长参数\n\n   可以传入不等长参数：\n\n   ```java\n   public static void method(String... args) {\n      //......\n   }\n   ```\n\n   需要注意的：如果方法重载，固定参数方法优先级会高于变长参数方法\n\n   \n\n   \n\n4. 基本数据类型与包装类的区别？\n\n   1. 包装类型默认值null\n   2. 包装类型可用于泛型\n   3. 基本数据类型局部变量存储与Java虚拟机栈局部变量表中，基本数据类型的成员变量存在堆中，包装类型都在堆中\n\n5. 构造方否可以override？\n\n   不能override，可以overload\n\n6. java 9为何将String底层由 char[] 改成了 byte[] ?\n\n   新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，`byte` 占一个字节(8 位)，`char` 占用 2 个字节（16），`byte` 相较 `char` 节省一半的内存空间。\n\n7. String采用运算符“+”拼接为何耗费内存？\n\n   内部采用StringBuillder.append() 方法实现，拼接完后调用toString() 得到Stirng对象。这样就会存在大量的StringBuilder对象。\n\n8. 字符串常量池什么作用？\n\n   创建字符串后会在堆中创建具体对象，然后在常量池中创建对应的引用。访问字符串是直接返回常量池中的引用即可。字节码命令“ldc” 可以判断字符串常量池是否保存对应的字符串对象引用。\n\n9. intern方法作用\n\n   native方法：如果字符串常量池不包含字符串饮用添加。然后返回字符串引用。\n\n10. 常量折叠\n\n    对于源代码中存在的可以确定的static final修饰的基础变量数据类型以及String，会对其进行计算并作为常量嵌入最终生成代码中。这事javac编译器做的优化\n\n11. finally代码一定执行吗？\n\n    不一定！虚拟机异常终止便不会执行了。比如调用：System.exit(1); 还有所在线程死亡，CPU停止执行。\n\n12. Java只有值传递吗？\n\n    是的，无论是基础类型还是引用类型。如果要修改对象值，通过引用修改即可。\n\n13. 通过类加载器与Class.forName()差异\n\n    Class.forName() 可以指定是否初始化Class，类加载器不会初始化。如果不出实话静态代码不会得到执行。\n\n14. 精度丢失与BigDecimal\n\n    由于float，double等表示小数时由于二进制存储原理，对于一些小数没有精确的2进制表示形式所以存在精度丢失。BigDecimal实现利用了BigInteger，并加入小数位的概念实现避免了精读丢失。\n\n    \n\n    \n\n\n\n\n\n","slug":"Java-基础","published":1,"updated":"2022-05-30T09:00:28.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmks000c7qh8gc3b33w2","content":"<h1 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h1><ul>\n<li>面向对象（封装、继承、多态）</li>\n<li>跨平台</li>\n<li>多线程支持</li>\n<li>编译与解释执行（class文件编译与JIT即时编译（编译为机器码），JVM执行时解释执行）</li>\n</ul>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><p>基础数据类型</p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>位数</th>\n<th>字节</th>\n<th>默认值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td>0</td>\n<td>-128 ~ 127</td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td>0</td>\n<td>-32768 ~ 32767</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td>0</td>\n<td>-2147483648 ~ 2147483647</td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td>0L</td>\n<td>-9223372036854775808 ~ 9223372036854775807</td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td>‘u0000’</td>\n<td>0 ~ 65535</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td>0f</td>\n<td>1.4E-45 ~ 3.4028235E38</td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td>0d</td>\n<td>4.9E-324 ~ 1.7976931348623157E308</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>1</td>\n<td></td>\n<td>false</td>\n<td>true、false</td>\n</tr>\n</tbody></table>\n<p>注意：boolean长度为明确。取决于JVM实现，逻辑上是占用1位。</p>\n</li>\n<li><p>自动拆装箱</p>\n<p>装箱其实就是调用了 包装类的<code>valueOf()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p>\n<ol>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ol>\n</li>\n<li><p>局部变量与成员变量</p>\n<p>局部变量通常在栈中，随方法调用结束而回收。无默认值需设置；</p>\n<p>成员变量通常在堆中，随对象创建而存在。有默认值。</p>\n</li>\n<li><p>集合</p>\n<p>List，Map，Set以及线程安全相关集合</p>\n<p>集合操作参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md</a></p>\n</li>\n<li><p>并发</p>\n</li>\n<li><p>异常</p>\n<p>共同祖先：java.lang.Throwable</p>\n<p>重要子类：Exception与Error</p>\n<p><strong><code>Exception</code></strong> ：程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</p>\n<ul>\n<li>Checked Excpetion:<ul>\n<li>IOException</li>\n<li>ClassNotFoundException</li>\n<li>SQLException</li>\n<li>FileNotFoundException</li>\n</ul>\n</li>\n<li>Unchecked Exception:<ul>\n<li>ArithmeticException</li>\n<li>ClassCastException</li>\n<li>NullPointException</li>\n<li>IllegalThreadStateException</li>\n<li>IndexOutOfBoundsException</li>\n</ul>\n</li>\n</ul>\n<p>**<code>Error</code>**：<code>Error</code> 属于程序无法处理的错误 ，<del>我们没办法通过 <code>catch</code> 来进行捕获</del>不建议通过<code>catch</code>捕获 。例如 Java 虚拟机运行错误（<code>Virtual MachineError</code>）、虚拟机内存不够错误(<code>OutOfMemoryError</code>)、类定义错误（<code>NoClassDefFoundError</code>）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p>\n<ul>\n<li>OutOfMemoryError</li>\n<li>StackOverFlowError</li>\n<li>AssertionError</li>\n<li>VritualMachineError</li>\n</ul>\n<p>注意：不要再finally中使用return！在try中return返回值会放在一个本地变量中，后续执行到finally中的return，会覆盖并返回。</p>\n<p>JVM官方文档明确提到：</p>\n<p>If the <code>try</code> clause executes a <em>return</em>, the compiled code does the following:</p>\n<ol>\n<li>Saves the return value (if any) in a local variable.</li>\n<li>Executes a <em>jsr</em> to the code for the <code>finally</code> clause.</li>\n<li>Upon return from the <code>finally</code> clause, returns the value saved in the local variable.</li>\n</ol>\n<p>异常使用规范：异常信息有意义；日志打印异常与抛出异常不要并存。</p>\n</li>\n<li><p>泛型</p>\n<p>一套工具适配多种类型</p>\n<p>提供编译时检查避免错误</p>\n<p>泛型擦出：运行时泛型会去掉</p>\n</li>\n<li><p>反射</p>\n<p>优点：灵活</p>\n<p>缺点：性能问题，参考：<a href=\"https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow\">https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow</a></p>\n<p>应用场景：各种框架配置与调用都有用到反射。</p>\n</li>\n<li><p>IO</p>\n<p>操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 <strong>用户空间（User space）</strong> 和 <strong>内核空间（Kernel space ）</strong> 。</p>\n<p><strong>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。</strong></p>\n<p>UNIX 系统下， IO 模型一共有 5 种： <strong>同步阻塞 I&#x2F;O</strong>、<strong>同步非阻塞 I&#x2F;O</strong>、<strong>I&#x2F;O 多路复用</strong>、<strong>信号驱动 I&#x2F;O</strong> 和<strong>异步 I&#x2F;O</strong>。</p>\n<ul>\n<li><p>BIO</p>\n<ul>\n<li><p>同步阻塞 I&#x2F;O</p>\n<p>阻塞每次读写，等到内核态数据拷贝完成返回。</p>\n</li>\n<li><p>同步非阻塞 I&#x2F;O</p>\n<p>多次读取不阻塞，内核态数据拷贝时时阻塞。</p>\n</li>\n</ul>\n</li>\n<li><p>NIO</p>\n<ul>\n<li><p>select </p>\n<p>维护很多socket连接（创建链接时维护socket集合），通过询问内核是否已准备好数据，如果准备好再发器read（读取过程依旧是阻塞的），内核轮询socket集合，找到准备完成的socket进行数据读取（可能只有部分socket活跃，每次轮训耗时长且无意义）。每次需要将socket集合传递给内核，有一定开销。进程被唤醒拿到相应还需要遍历确定哪个socket收到数据，共需要两次遍历。select有最大文件描述符数量限制。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class=\"line\"><span class=\"params\">           fd_set *exceptfds, <span class=\"keyword\">struct</span> timeval *timeout)</span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>pool 同select，但是无最大文件描述符限制</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">poll</span><span class=\"params\">(<span class=\"keyword\">struct</span> pollfd fds[], <span class=\"type\">nfds_t</span> nfds, <span class=\"type\">int</span> timeout)</span>；</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>epool</p>\n<p>基于事件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_node</span>  <span class=\"title\">rbn</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">rdllink</span>;</span> </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span>  *<span class=\"title\">next</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_filefd</span>  <span class=\"title\">ffd</span>;</span>  </span><br><span class=\"line\">  <span class=\"type\">int</span>  nwait;                 </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">pwqlist</span>;</span>  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span>  *<span class=\"title\">ep</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">fllink</span>;</span>   </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span>  <span class=\"title\">event</span>;</span>  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">spin_lock_t</span>       lock; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mutex</span>      <span class=\"title\">mtx</span>;</span>  </span><br><span class=\"line\">  <span class=\"type\">wait_queue_head_t</span>     wq; </span><br><span class=\"line\">  <span class=\"type\">wait_queue_head_t</span>   poll_wait; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>    <span class=\"title\">rdllist</span>;</span>   <span class=\"comment\">//就绪链表</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_root</span>      <span class=\"title\">rbr</span>;</span>      <span class=\"comment\">//红黑树根节点 </span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span>      *<span class=\"title\">ovflist</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用户数据载体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">epoll_data</span> &#123;</span></span><br><span class=\"line\">   <span class=\"type\">void</span>    *ptr;</span><br><span class=\"line\">   <span class=\"type\">int</span>      fd;</span><br><span class=\"line\">   <span class=\"type\">uint32_t</span> u32;</span><br><span class=\"line\">   <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\">&#125; <span class=\"type\">epoll_data_t</span>;</span><br><span class=\"line\"><span class=\"comment\">//fd装载入内核的载体</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span> &#123;</span></span><br><span class=\"line\">     <span class=\"type\">uint32_t</span>     events;    <span class=\"comment\">/* Epoll events */</span></span><br><span class=\"line\">     <span class=\"type\">epoll_data_t</span> data;      <span class=\"comment\">/* User data variable */</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">//三板斧api</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_create</span><span class=\"params\">(<span class=\"type\">int</span> size)</span>; </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_ctl</span><span class=\"params\">(<span class=\"type\">int</span> epfd, <span class=\"type\">int</span> op, <span class=\"type\">int</span> fd, <span class=\"keyword\">struct</span> epoll_event *event)</span>;  </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_wait</span><span class=\"params\">(<span class=\"type\">int</span> epfd, <span class=\"keyword\">struct</span> epoll_event *events,</span></span><br><span class=\"line\"><span class=\"params\">                 <span class=\"type\">int</span> maxevents, <span class=\"type\">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>AIO</p>\n<p>拿回数据异步</p>\n</li>\n</ul>\n<p>参考链接：<a href=\"https://www.jianshu.com/p/722819425dbd\">https://www.jianshu.com/p/722819425dbd</a></p>\n<ol start=\"10\">\n<li><p>JVM</p>\n<p>可以先看看这个：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md</a></p>\n<ul>\n<li>内存分配</li>\n</ul>\n<p>堆：eden区，2个suvivor区，old区。对象创建会在eden创建，经过一次回收会搬到suvivor区，后续每经过一次回收对象年龄加一，直到到达老年代阈值（默认15岁），对象进入老年代。老年代阈值会根据配置动态计算。</p>\n<p>栈：本地方法栈、虚拟机栈以及程序计数器</p>\n<p>方法区：加载的类信息以及运行时常量池以及JIT编译代码缓存。字符串常量池与静态变量均在堆中。</p>\n<p>参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md</a></p>\n<ul>\n<li><p>对象创建流程</p>\n<ol>\n<li><p>类加载</p>\n<p>检查是否已加载过，如果没有进行类加载</p>\n</li>\n<li><p>申请内存</p>\n<p>类加载完成即可确定需要的内存，随后便申请内存分配</p>\n<p>分配策略：</p>\n<ul>\n<li><p>指针碰撞</p>\n<p>维护一个指针，区分已使用空间与未使用空间。</p>\n</li>\n<li><p>空闲列表</p>\n<p>维护一个列表，记录哪些内存块可用</p>\n</li>\n</ul>\n<p>并发分配内存：</p>\n<ul>\n<li>CAS+失败重试：通过CAS保证操作原子性</li>\n<li>TLAB（Thread Local Allocation Buffer：本地分配缓存区，在线程初始化时申请Eden一部分空间）：分配内存时先在TLAB分配，到达一定量后通过CAS刷新到堆上。缺点：空间较小大对象无法适配。</li>\n</ul>\n</li>\n<li><p>类初始化</p>\n<ul>\n<li><p>初始化零值</p>\n<p>设置初始值，对象头不调整</p>\n</li>\n<li><p>设置对象头</p>\n<p><strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>\n</li>\n<li><p>init方法执行</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>对象内存布局</p>\n<p>对象头，实例数据，对齐填充</p>\n<p><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>\n<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>\n<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>\n</li>\n<li><p>对象访问方式</p>\n<p>句柄和直接指针</p>\n<ul>\n<li><p>句柄指向句柄池数据（堆），再由句柄池指向实例数据（堆）和对象类型数据（栈）</p>\n</li>\n<li><p>直接指针直接执行对象实例数据（堆），其对象头存在指向对象类型数据（栈）的指针</p>\n</li>\n</ul>\n<p>优缺点：句柄在对象变化过程后用户的引用无需变化，而直接指针需要变化。但是直接指针少一次指针定位开销，速度更快。</p>\n</li>\n<li><p>类加载模型</p>\n<p>双亲委托</p>\n<p>如果自定义类加载器：继承<code>ClassLoader</code>，重写<code>findClass()</code>方法，如果需要打破双亲委托，则需要重写<code>loadClass()</code>方法</p>\n</li>\n<li><p>JVM参数与优化</p>\n<p>参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"面试问题整理\"><a href=\"#面试问题整理\" class=\"headerlink\" title=\"面试问题整理\"></a>面试问题整理</h1><ol>\n<li><p>字符型常量与字符串常量的区别？</p>\n<p>字符常量相当于一个整形ASCII值，可以参与运算；字符串是内存地址。字符串常量2个字节；字符串若干个字节</p>\n</li>\n<li><p>重写遵循规范</p>\n<ol>\n<li>方法名，形参需要相同</li>\n<li>返回值类型以及声明异常均小于或等于父类方法</li>\n<li>访问权限需大于或等于父类方法</li>\n</ol>\n</li>\n<li><p>可变长参数</p>\n<p>可以传入不等长参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的：如果方法重载，固定参数方法优先级会高于变长参数方法</p>\n</li>\n<li><p>基本数据类型与包装类的区别？</p>\n<ol>\n<li>包装类型默认值null</li>\n<li>包装类型可用于泛型</li>\n<li>基本数据类型局部变量存储与Java虚拟机栈局部变量表中，基本数据类型的成员变量存在堆中，包装类型都在堆中</li>\n</ol>\n</li>\n<li><p>构造方否可以override？</p>\n<p>不能override，可以overload</p>\n</li>\n<li><p>java 9为何将String底层由 char[] 改成了 byte[] ?</p>\n<p>新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，<code>byte</code> 占一个字节(8 位)，<code>char</code> 占用 2 个字节（16），<code>byte</code> 相较 <code>char</code> 节省一半的内存空间。</p>\n</li>\n<li><p>String采用运算符“+”拼接为何耗费内存？</p>\n<p>内部采用StringBuillder.append() 方法实现，拼接完后调用toString() 得到Stirng对象。这样就会存在大量的StringBuilder对象。</p>\n</li>\n<li><p>字符串常量池什么作用？</p>\n<p>创建字符串后会在堆中创建具体对象，然后在常量池中创建对应的引用。访问字符串是直接返回常量池中的引用即可。字节码命令“ldc” 可以判断字符串常量池是否保存对应的字符串对象引用。</p>\n</li>\n<li><p>intern方法作用</p>\n<p>native方法：如果字符串常量池不包含字符串饮用添加。然后返回字符串引用。</p>\n</li>\n<li><p>常量折叠</p>\n<p>对于源代码中存在的可以确定的static final修饰的基础变量数据类型以及String，会对其进行计算并作为常量嵌入最终生成代码中。这事javac编译器做的优化</p>\n</li>\n<li><p>finally代码一定执行吗？</p>\n<p>不一定！虚拟机异常终止便不会执行了。比如调用：System.exit(1); 还有所在线程死亡，CPU停止执行。</p>\n</li>\n<li><p>Java只有值传递吗？</p>\n<p>是的，无论是基础类型还是引用类型。如果要修改对象值，通过引用修改即可。</p>\n</li>\n<li><p>通过类加载器与Class.forName()差异</p>\n<p>Class.forName() 可以指定是否初始化Class，类加载器不会初始化。如果不出实话静态代码不会得到执行。</p>\n</li>\n<li><p>精度丢失与BigDecimal</p>\n<p>由于float，double等表示小数时由于二进制存储原理，对于一些小数没有精确的2进制表示形式所以存在精度丢失。BigDecimal实现利用了BigInteger，并加入小数位的概念实现避免了精读丢失。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h1><ul>\n<li>面向对象（封装、继承、多态）</li>\n<li>跨平台</li>\n<li>多线程支持</li>\n<li>编译与解释执行（class文件编译与JIT即时编译（编译为机器码），JVM执行时解释执行）</li>\n</ul>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><p>基础数据类型</p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>位数</th>\n<th>字节</th>\n<th>默认值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td>0</td>\n<td>-128 ~ 127</td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td>0</td>\n<td>-32768 ~ 32767</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td>0</td>\n<td>-2147483648 ~ 2147483647</td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td>0L</td>\n<td>-9223372036854775808 ~ 9223372036854775807</td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td>‘u0000’</td>\n<td>0 ~ 65535</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td>0f</td>\n<td>1.4E-45 ~ 3.4028235E38</td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td>0d</td>\n<td>4.9E-324 ~ 1.7976931348623157E308</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>1</td>\n<td></td>\n<td>false</td>\n<td>true、false</td>\n</tr>\n</tbody></table>\n<p>注意：boolean长度为明确。取决于JVM实现，逻辑上是占用1位。</p>\n</li>\n<li><p>自动拆装箱</p>\n<p>装箱其实就是调用了 包装类的<code>valueOf()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p>\n<ol>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ol>\n</li>\n<li><p>局部变量与成员变量</p>\n<p>局部变量通常在栈中，随方法调用结束而回收。无默认值需设置；</p>\n<p>成员变量通常在堆中，随对象创建而存在。有默认值。</p>\n</li>\n<li><p>集合</p>\n<p>List，Map，Set以及线程安全相关集合</p>\n<p>集合操作参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/collection/java-collection-precautions-for-use.md</a></p>\n</li>\n<li><p>并发</p>\n</li>\n<li><p>异常</p>\n<p>共同祖先：java.lang.Throwable</p>\n<p>重要子类：Exception与Error</p>\n<p><strong><code>Exception</code></strong> ：程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</p>\n<ul>\n<li>Checked Excpetion:<ul>\n<li>IOException</li>\n<li>ClassNotFoundException</li>\n<li>SQLException</li>\n<li>FileNotFoundException</li>\n</ul>\n</li>\n<li>Unchecked Exception:<ul>\n<li>ArithmeticException</li>\n<li>ClassCastException</li>\n<li>NullPointException</li>\n<li>IllegalThreadStateException</li>\n<li>IndexOutOfBoundsException</li>\n</ul>\n</li>\n</ul>\n<p>**<code>Error</code>**：<code>Error</code> 属于程序无法处理的错误 ，<del>我们没办法通过 <code>catch</code> 来进行捕获</del>不建议通过<code>catch</code>捕获 。例如 Java 虚拟机运行错误（<code>Virtual MachineError</code>）、虚拟机内存不够错误(<code>OutOfMemoryError</code>)、类定义错误（<code>NoClassDefFoundError</code>）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p>\n<ul>\n<li>OutOfMemoryError</li>\n<li>StackOverFlowError</li>\n<li>AssertionError</li>\n<li>VritualMachineError</li>\n</ul>\n<p>注意：不要再finally中使用return！在try中return返回值会放在一个本地变量中，后续执行到finally中的return，会覆盖并返回。</p>\n<p>JVM官方文档明确提到：</p>\n<p>If the <code>try</code> clause executes a <em>return</em>, the compiled code does the following:</p>\n<ol>\n<li>Saves the return value (if any) in a local variable.</li>\n<li>Executes a <em>jsr</em> to the code for the <code>finally</code> clause.</li>\n<li>Upon return from the <code>finally</code> clause, returns the value saved in the local variable.</li>\n</ol>\n<p>异常使用规范：异常信息有意义；日志打印异常与抛出异常不要并存。</p>\n</li>\n<li><p>泛型</p>\n<p>一套工具适配多种类型</p>\n<p>提供编译时检查避免错误</p>\n<p>泛型擦出：运行时泛型会去掉</p>\n</li>\n<li><p>反射</p>\n<p>优点：灵活</p>\n<p>缺点：性能问题，参考：<a href=\"https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow\">https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow</a></p>\n<p>应用场景：各种框架配置与调用都有用到反射。</p>\n</li>\n<li><p>IO</p>\n<p>操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 <strong>用户空间（User space）</strong> 和 <strong>内核空间（Kernel space ）</strong> 。</p>\n<p><strong>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。</strong></p>\n<p>UNIX 系统下， IO 模型一共有 5 种： <strong>同步阻塞 I&#x2F;O</strong>、<strong>同步非阻塞 I&#x2F;O</strong>、<strong>I&#x2F;O 多路复用</strong>、<strong>信号驱动 I&#x2F;O</strong> 和<strong>异步 I&#x2F;O</strong>。</p>\n<ul>\n<li><p>BIO</p>\n<ul>\n<li><p>同步阻塞 I&#x2F;O</p>\n<p>阻塞每次读写，等到内核态数据拷贝完成返回。</p>\n</li>\n<li><p>同步非阻塞 I&#x2F;O</p>\n<p>多次读取不阻塞，内核态数据拷贝时时阻塞。</p>\n</li>\n</ul>\n</li>\n<li><p>NIO</p>\n<ul>\n<li><p>select </p>\n<p>维护很多socket连接（创建链接时维护socket集合），通过询问内核是否已准备好数据，如果准备好再发器read（读取过程依旧是阻塞的），内核轮询socket集合，找到准备完成的socket进行数据读取（可能只有部分socket活跃，每次轮训耗时长且无意义）。每次需要将socket集合传递给内核，有一定开销。进程被唤醒拿到相应还需要遍历确定哪个socket收到数据，共需要两次遍历。select有最大文件描述符数量限制。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class=\"line\"><span class=\"params\">           fd_set *exceptfds, <span class=\"keyword\">struct</span> timeval *timeout)</span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>pool 同select，但是无最大文件描述符限制</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">poll</span><span class=\"params\">(<span class=\"keyword\">struct</span> pollfd fds[], <span class=\"type\">nfds_t</span> nfds, <span class=\"type\">int</span> timeout)</span>；</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>epool</p>\n<p>基于事件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_node</span>  <span class=\"title\">rbn</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">rdllink</span>;</span> </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span>  *<span class=\"title\">next</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_filefd</span>  <span class=\"title\">ffd</span>;</span>  </span><br><span class=\"line\">  <span class=\"type\">int</span>  nwait;                 </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">pwqlist</span>;</span>  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span>  *<span class=\"title\">ep</span>;</span>      </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>  <span class=\"title\">fllink</span>;</span>   </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span>  <span class=\"title\">event</span>;</span>  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">spin_lock_t</span>       lock; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mutex</span>      <span class=\"title\">mtx</span>;</span>  </span><br><span class=\"line\">  <span class=\"type\">wait_queue_head_t</span>     wq; </span><br><span class=\"line\">  <span class=\"type\">wait_queue_head_t</span>   poll_wait; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span>    <span class=\"title\">rdllist</span>;</span>   <span class=\"comment\">//就绪链表</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_root</span>      <span class=\"title\">rbr</span>;</span>      <span class=\"comment\">//红黑树根节点 </span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span>      *<span class=\"title\">ovflist</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用户数据载体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">epoll_data</span> &#123;</span></span><br><span class=\"line\">   <span class=\"type\">void</span>    *ptr;</span><br><span class=\"line\">   <span class=\"type\">int</span>      fd;</span><br><span class=\"line\">   <span class=\"type\">uint32_t</span> u32;</span><br><span class=\"line\">   <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\">&#125; <span class=\"type\">epoll_data_t</span>;</span><br><span class=\"line\"><span class=\"comment\">//fd装载入内核的载体</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span> &#123;</span></span><br><span class=\"line\">     <span class=\"type\">uint32_t</span>     events;    <span class=\"comment\">/* Epoll events */</span></span><br><span class=\"line\">     <span class=\"type\">epoll_data_t</span> data;      <span class=\"comment\">/* User data variable */</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">//三板斧api</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_create</span><span class=\"params\">(<span class=\"type\">int</span> size)</span>; </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_ctl</span><span class=\"params\">(<span class=\"type\">int</span> epfd, <span class=\"type\">int</span> op, <span class=\"type\">int</span> fd, <span class=\"keyword\">struct</span> epoll_event *event)</span>;  </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">epoll_wait</span><span class=\"params\">(<span class=\"type\">int</span> epfd, <span class=\"keyword\">struct</span> epoll_event *events,</span></span><br><span class=\"line\"><span class=\"params\">                 <span class=\"type\">int</span> maxevents, <span class=\"type\">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>AIO</p>\n<p>拿回数据异步</p>\n</li>\n</ul>\n<p>参考链接：<a href=\"https://www.jianshu.com/p/722819425dbd\">https://www.jianshu.com/p/722819425dbd</a></p>\n<ol start=\"10\">\n<li><p>JVM</p>\n<p>可以先看看这个：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-intro.md</a></p>\n<ul>\n<li>内存分配</li>\n</ul>\n<p>堆：eden区，2个suvivor区，old区。对象创建会在eden创建，经过一次回收会搬到suvivor区，后续每经过一次回收对象年龄加一，直到到达老年代阈值（默认15岁），对象进入老年代。老年代阈值会根据配置动态计算。</p>\n<p>栈：本地方法栈、虚拟机栈以及程序计数器</p>\n<p>方法区：加载的类信息以及运行时常量池以及JIT编译代码缓存。字符串常量池与静态变量均在堆中。</p>\n<p>参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/memory-area.md</a></p>\n<ul>\n<li><p>对象创建流程</p>\n<ol>\n<li><p>类加载</p>\n<p>检查是否已加载过，如果没有进行类加载</p>\n</li>\n<li><p>申请内存</p>\n<p>类加载完成即可确定需要的内存，随后便申请内存分配</p>\n<p>分配策略：</p>\n<ul>\n<li><p>指针碰撞</p>\n<p>维护一个指针，区分已使用空间与未使用空间。</p>\n</li>\n<li><p>空闲列表</p>\n<p>维护一个列表，记录哪些内存块可用</p>\n</li>\n</ul>\n<p>并发分配内存：</p>\n<ul>\n<li>CAS+失败重试：通过CAS保证操作原子性</li>\n<li>TLAB（Thread Local Allocation Buffer：本地分配缓存区，在线程初始化时申请Eden一部分空间）：分配内存时先在TLAB分配，到达一定量后通过CAS刷新到堆上。缺点：空间较小大对象无法适配。</li>\n</ul>\n</li>\n<li><p>类初始化</p>\n<ul>\n<li><p>初始化零值</p>\n<p>设置初始值，对象头不调整</p>\n</li>\n<li><p>设置对象头</p>\n<p><strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>\n</li>\n<li><p>init方法执行</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>对象内存布局</p>\n<p>对象头，实例数据，对齐填充</p>\n<p><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>\n<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>\n<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>\n</li>\n<li><p>对象访问方式</p>\n<p>句柄和直接指针</p>\n<ul>\n<li><p>句柄指向句柄池数据（堆），再由句柄池指向实例数据（堆）和对象类型数据（栈）</p>\n</li>\n<li><p>直接指针直接执行对象实例数据（堆），其对象头存在指向对象类型数据（栈）的指针</p>\n</li>\n</ul>\n<p>优缺点：句柄在对象变化过程后用户的引用无需变化，而直接指针需要变化。但是直接指针少一次指针定位开销，速度更快。</p>\n</li>\n<li><p>类加载模型</p>\n<p>双亲委托</p>\n<p>如果自定义类加载器：继承<code>ClassLoader</code>，重写<code>findClass()</code>方法，如果需要打破双亲委托，则需要重写<code>loadClass()</code>方法</p>\n</li>\n<li><p>JVM参数与优化</p>\n<p>参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md\">https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/jvm/jvm-parameters-intro.md</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"面试问题整理\"><a href=\"#面试问题整理\" class=\"headerlink\" title=\"面试问题整理\"></a>面试问题整理</h1><ol>\n<li><p>字符型常量与字符串常量的区别？</p>\n<p>字符常量相当于一个整形ASCII值，可以参与运算；字符串是内存地址。字符串常量2个字节；字符串若干个字节</p>\n</li>\n<li><p>重写遵循规范</p>\n<ol>\n<li>方法名，形参需要相同</li>\n<li>返回值类型以及声明异常均小于或等于父类方法</li>\n<li>访问权限需大于或等于父类方法</li>\n</ol>\n</li>\n<li><p>可变长参数</p>\n<p>可以传入不等长参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的：如果方法重载，固定参数方法优先级会高于变长参数方法</p>\n</li>\n<li><p>基本数据类型与包装类的区别？</p>\n<ol>\n<li>包装类型默认值null</li>\n<li>包装类型可用于泛型</li>\n<li>基本数据类型局部变量存储与Java虚拟机栈局部变量表中，基本数据类型的成员变量存在堆中，包装类型都在堆中</li>\n</ol>\n</li>\n<li><p>构造方否可以override？</p>\n<p>不能override，可以overload</p>\n</li>\n<li><p>java 9为何将String底层由 char[] 改成了 byte[] ?</p>\n<p>新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，<code>byte</code> 占一个字节(8 位)，<code>char</code> 占用 2 个字节（16），<code>byte</code> 相较 <code>char</code> 节省一半的内存空间。</p>\n</li>\n<li><p>String采用运算符“+”拼接为何耗费内存？</p>\n<p>内部采用StringBuillder.append() 方法实现，拼接完后调用toString() 得到Stirng对象。这样就会存在大量的StringBuilder对象。</p>\n</li>\n<li><p>字符串常量池什么作用？</p>\n<p>创建字符串后会在堆中创建具体对象，然后在常量池中创建对应的引用。访问字符串是直接返回常量池中的引用即可。字节码命令“ldc” 可以判断字符串常量池是否保存对应的字符串对象引用。</p>\n</li>\n<li><p>intern方法作用</p>\n<p>native方法：如果字符串常量池不包含字符串饮用添加。然后返回字符串引用。</p>\n</li>\n<li><p>常量折叠</p>\n<p>对于源代码中存在的可以确定的static final修饰的基础变量数据类型以及String，会对其进行计算并作为常量嵌入最终生成代码中。这事javac编译器做的优化</p>\n</li>\n<li><p>finally代码一定执行吗？</p>\n<p>不一定！虚拟机异常终止便不会执行了。比如调用：System.exit(1); 还有所在线程死亡，CPU停止执行。</p>\n</li>\n<li><p>Java只有值传递吗？</p>\n<p>是的，无论是基础类型还是引用类型。如果要修改对象值，通过引用修改即可。</p>\n</li>\n<li><p>通过类加载器与Class.forName()差异</p>\n<p>Class.forName() 可以指定是否初始化Class，类加载器不会初始化。如果不出实话静态代码不会得到执行。</p>\n</li>\n<li><p>精度丢失与BigDecimal</p>\n<p>由于float，double等表示小数时由于二进制存储原理，对于一些小数没有精确的2进制表示形式所以存在精度丢失。BigDecimal实现利用了BigInteger，并加入小数位的概念实现避免了精读丢失。</p>\n</li>\n</ol>\n"},{"title":"Kubernetes基础概念","date":"2022-06-02T02:51:41.000Z","_content":"\n# 什么是Kubernetes\n\n开源的容器管理平台。通过配置即可自动调度管理容器。拥有以下功能：\n\n- **服务发现与负载均衡** k8s可以通过DNS或者IP暴露容器服务并自动发现，如果对于容器服务请求过高，k8s可以进行负载均衡流量，使服务平稳运行\n- **存储编排** 可以自由挂在存储资源，例如本地存储，云存储等\n- **自动状态更新** 通过配置新的容器状态，随后k8s将创建新的容器并进行资源转移\n- **机器资源配置** 可以为每个容器配置需要的CPU以及内存资源\n- **自愈** 发现服务异常自动重启\n- **敏感信息配置** 对于密码，token，keys等敏感信息由k8s私密管理\n\n\n\n# Kubernates集群组件\n\nk8s集群包换了一些`worker`机器，被称为`nodes`。worker上会运行容器程序，每个集群至少有一个`worker`。`control plan`管理这些worker nodes 以及 Pods，通常在生产环境会运行于多个节点上。提供high availability服务。\n\n组件：\n\n![components-of-kubernetes](components-of-kubernetes.svg)\n\n## Control Plane Components\n\nControl Plane Components 主要用来做一些决策，例如启动新的副本如果副本数不足。一些请求事件响应，如创建了dployment就同步创建启动pod。通常情况下部署在相同节点下，并且不在该节点下运行用户容器。参考：[Kubbernetes Components](https://kubernetes.io/docs/concepts/overview/components/)\n\n\n\n- kube-apiserver\n\n  用于暴露k8s api\n\n- etcd\n\n  高可用键值数据库\n\n- kube-scheduler\n\n  根据resource定义分配满足执行条件节点并运行\n\n- kube-controller-manager\n\n  运行控制器进程的控制组件。从逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都编译成单个二进制文件并在单个进程中运行。\n\n  这些控制器的某些类型是：\n\n  - 节点控制器：负责节点发生故障时的注意和响应。\n\n  - 作业控制器：监视表示一次性任务的作业对象，然后创建Pod来运行这些任务完成。\n\n  - 端点控制器：填充端点对象（即加入服务和Pod）。\n\n  - 服务帐户和令牌控制器：为新命名空间创建默认帐户和API访问令牌。\n\n- cloud-controller-manager\n\n  可以将当前集群加入云集群，具体参考[Kubbernetes Components](https://kubernetes.io/docs/concepts/overview/components/)\n\n## Node Components\n\n- kubelet\n- kube-proxy\n- Container runtime\n\n\n\n## Addons\n\n- DNS\n- Web UI（Dashboard）\n- Container Resource Monitoring\n- Cluster-level Logging\n\n# Kubernetes常用对象\n\nKubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。具体来说，他们可以描述：\n\n- 正在运行哪些容器化应用程序（以及哪些节点）\n\n- 这些应用程序可用的资源\n\n- 围绕这些应用程序行为的策略，例如重新启动策略、升级和容错性\n\nKubernetes对象是“意图记录”，一旦您创建对象，Kubernetes系统将不断工作以确保该对象的存在。通过创建对象，您可以有效地告诉Kubernetes系统您希望集群的工作负载是什么样子；这是集群所需的状态。\n\n要使用Kubernetes对象，无论是创建、修改还是删除它们——您需要使用Kubernetes API。例如，当您使用kubectl命令行界面时，CLI会为您进行必要的Kubernetes API调用。您还可以使用客户端库之一直接在自己的程序中使用Kubernetes API。\n\n## Object Spec and Status\n\n对象规格和状态\n\n几乎每个Kubernetes对象都包含两个控制对象配置的嵌套对象字段：对象规范和对象状态。对于具有规范的对象，您必须在创建对象时设置此设置，并描述您希望资源具有的特征：其所需的状态。\n\n该状态描述了对象的当前状态，由Kubernetes系统及其组件提供和更新。Kubernetes控制平面持续并主动地管理每个对象的实际状态，以匹配您提供的期望状态。\n\n例如：在Kubernetes中，部署是一个可以表示在集群上运行的应用程序的对象。当您创建部署时，您可以将部署规范设置为指定您希望运行应用程序的三个副本。Kubernetes系统读取部署规范，并启动所需应用程序的三个实例——更新状态以匹配您的规范。如果其中任何实例出现故障（状态更改），Kubernetes系统会通过更正来响应规范和状态之间的差异——在这种情况下，启动替换实例。\n\n有关对象规范、状态和元数据的更多信息，请参阅[Kubernetes API Conventions](https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md).\n\n## Describing a Kubernetes object\n\n当您在Kubernetes中创建对象时，您必须提供描述其所需状态的对象规范，以及有关对象的一些基本信息（例如名称）。当您使用Kubernetes API创建对象（直接或通过kubectl）时，该API请求必须在请求主体中包含该信息作为JSON。通常，您在.yaml文件中向kubectl提供信息。kubectl在提出API请求时将信息转换为JSON。\n\n这里有一个.yaml文件示例，显示Kubernetes部署的必填字段和对象规范：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2 # tells deployment to run 2 pods matching the template\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n```\n\n可以使用`kubectl apply`命令创建Deployment\n\n```bash\nkubectl apply -f https://k8s.io/examples/application/deployment.yaml\n# output:\n# deployment.apps/nginx-deployment created\n```\n\n## 必须字段\n\n在您要创建的Kubernetes对象的.yaml文件中，您需要为以下字段设置值：\n\n- apiVersion - 您正在使用哪个版本的Kubernetes API来创建此对象\n- kind - 您想创建哪种对象\n\n- metadata - 有助于唯一识别对象的数据，包括名称字符串、UID和可选命名空间\n\n- spec - 您希望对象处于什么状态\n\n- 对象规范的精确格式对每个Kubernetes对象都不同，并包含特定于该对象的嵌套字段。Kubernetes API参考可以帮助您找到可以使用Kubernetes创建的所有对象的规范格式。\n\n例如，请参阅Pod API参考的规范字段。对于每个Pod，.spec字段指定pod及其所需状态（例如该pod中每个容器的容器映像名称）。对象规范的另一个例子是StatefulSet API的规范字段。对于StatefulSet，.spec字段指定StatefulSet及其所需状态。在StatefulSet的.spec中是Pod对象的模板。该模板描述了StatefulSet控制器为满足StatefulSet规范而创建的Pod。不同类型的对象也可以具有不同的.status；同样，API参考页面详细说明了该.status字段的结构，以及每种不同类型对象的内容。\n\n# 其他\n\n- namespace\n- node\n- pod\n- deployment\n- service\n- volumn\n\n# 待补充。。。。。。\n\n","source":"_posts/Kubernetes基础概念.md","raw":"---\ntitle: Kubernetes基础概念\ndate: 2022-06-02 10:51:41\ntags:\n  - k8s\n---\n\n# 什么是Kubernetes\n\n开源的容器管理平台。通过配置即可自动调度管理容器。拥有以下功能：\n\n- **服务发现与负载均衡** k8s可以通过DNS或者IP暴露容器服务并自动发现，如果对于容器服务请求过高，k8s可以进行负载均衡流量，使服务平稳运行\n- **存储编排** 可以自由挂在存储资源，例如本地存储，云存储等\n- **自动状态更新** 通过配置新的容器状态，随后k8s将创建新的容器并进行资源转移\n- **机器资源配置** 可以为每个容器配置需要的CPU以及内存资源\n- **自愈** 发现服务异常自动重启\n- **敏感信息配置** 对于密码，token，keys等敏感信息由k8s私密管理\n\n\n\n# Kubernates集群组件\n\nk8s集群包换了一些`worker`机器，被称为`nodes`。worker上会运行容器程序，每个集群至少有一个`worker`。`control plan`管理这些worker nodes 以及 Pods，通常在生产环境会运行于多个节点上。提供high availability服务。\n\n组件：\n\n![components-of-kubernetes](components-of-kubernetes.svg)\n\n## Control Plane Components\n\nControl Plane Components 主要用来做一些决策，例如启动新的副本如果副本数不足。一些请求事件响应，如创建了dployment就同步创建启动pod。通常情况下部署在相同节点下，并且不在该节点下运行用户容器。参考：[Kubbernetes Components](https://kubernetes.io/docs/concepts/overview/components/)\n\n\n\n- kube-apiserver\n\n  用于暴露k8s api\n\n- etcd\n\n  高可用键值数据库\n\n- kube-scheduler\n\n  根据resource定义分配满足执行条件节点并运行\n\n- kube-controller-manager\n\n  运行控制器进程的控制组件。从逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都编译成单个二进制文件并在单个进程中运行。\n\n  这些控制器的某些类型是：\n\n  - 节点控制器：负责节点发生故障时的注意和响应。\n\n  - 作业控制器：监视表示一次性任务的作业对象，然后创建Pod来运行这些任务完成。\n\n  - 端点控制器：填充端点对象（即加入服务和Pod）。\n\n  - 服务帐户和令牌控制器：为新命名空间创建默认帐户和API访问令牌。\n\n- cloud-controller-manager\n\n  可以将当前集群加入云集群，具体参考[Kubbernetes Components](https://kubernetes.io/docs/concepts/overview/components/)\n\n## Node Components\n\n- kubelet\n- kube-proxy\n- Container runtime\n\n\n\n## Addons\n\n- DNS\n- Web UI（Dashboard）\n- Container Resource Monitoring\n- Cluster-level Logging\n\n# Kubernetes常用对象\n\nKubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。具体来说，他们可以描述：\n\n- 正在运行哪些容器化应用程序（以及哪些节点）\n\n- 这些应用程序可用的资源\n\n- 围绕这些应用程序行为的策略，例如重新启动策略、升级和容错性\n\nKubernetes对象是“意图记录”，一旦您创建对象，Kubernetes系统将不断工作以确保该对象的存在。通过创建对象，您可以有效地告诉Kubernetes系统您希望集群的工作负载是什么样子；这是集群所需的状态。\n\n要使用Kubernetes对象，无论是创建、修改还是删除它们——您需要使用Kubernetes API。例如，当您使用kubectl命令行界面时，CLI会为您进行必要的Kubernetes API调用。您还可以使用客户端库之一直接在自己的程序中使用Kubernetes API。\n\n## Object Spec and Status\n\n对象规格和状态\n\n几乎每个Kubernetes对象都包含两个控制对象配置的嵌套对象字段：对象规范和对象状态。对于具有规范的对象，您必须在创建对象时设置此设置，并描述您希望资源具有的特征：其所需的状态。\n\n该状态描述了对象的当前状态，由Kubernetes系统及其组件提供和更新。Kubernetes控制平面持续并主动地管理每个对象的实际状态，以匹配您提供的期望状态。\n\n例如：在Kubernetes中，部署是一个可以表示在集群上运行的应用程序的对象。当您创建部署时，您可以将部署规范设置为指定您希望运行应用程序的三个副本。Kubernetes系统读取部署规范，并启动所需应用程序的三个实例——更新状态以匹配您的规范。如果其中任何实例出现故障（状态更改），Kubernetes系统会通过更正来响应规范和状态之间的差异——在这种情况下，启动替换实例。\n\n有关对象规范、状态和元数据的更多信息，请参阅[Kubernetes API Conventions](https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md).\n\n## Describing a Kubernetes object\n\n当您在Kubernetes中创建对象时，您必须提供描述其所需状态的对象规范，以及有关对象的一些基本信息（例如名称）。当您使用Kubernetes API创建对象（直接或通过kubectl）时，该API请求必须在请求主体中包含该信息作为JSON。通常，您在.yaml文件中向kubectl提供信息。kubectl在提出API请求时将信息转换为JSON。\n\n这里有一个.yaml文件示例，显示Kubernetes部署的必填字段和对象规范：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2 # tells deployment to run 2 pods matching the template\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n```\n\n可以使用`kubectl apply`命令创建Deployment\n\n```bash\nkubectl apply -f https://k8s.io/examples/application/deployment.yaml\n# output:\n# deployment.apps/nginx-deployment created\n```\n\n## 必须字段\n\n在您要创建的Kubernetes对象的.yaml文件中，您需要为以下字段设置值：\n\n- apiVersion - 您正在使用哪个版本的Kubernetes API来创建此对象\n- kind - 您想创建哪种对象\n\n- metadata - 有助于唯一识别对象的数据，包括名称字符串、UID和可选命名空间\n\n- spec - 您希望对象处于什么状态\n\n- 对象规范的精确格式对每个Kubernetes对象都不同，并包含特定于该对象的嵌套字段。Kubernetes API参考可以帮助您找到可以使用Kubernetes创建的所有对象的规范格式。\n\n例如，请参阅Pod API参考的规范字段。对于每个Pod，.spec字段指定pod及其所需状态（例如该pod中每个容器的容器映像名称）。对象规范的另一个例子是StatefulSet API的规范字段。对于StatefulSet，.spec字段指定StatefulSet及其所需状态。在StatefulSet的.spec中是Pod对象的模板。该模板描述了StatefulSet控制器为满足StatefulSet规范而创建的Pod。不同类型的对象也可以具有不同的.status；同样，API参考页面详细说明了该.status字段的结构，以及每种不同类型对象的内容。\n\n# 其他\n\n- namespace\n- node\n- pod\n- deployment\n- service\n- volumn\n\n# 待补充。。。。。。\n\n","slug":"Kubernetes基础概念","published":1,"updated":"2022-06-02T05:07:03.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkt000e7qh8c0gf4rh8","content":"<h1 id=\"什么是Kubernetes\"><a href=\"#什么是Kubernetes\" class=\"headerlink\" title=\"什么是Kubernetes\"></a>什么是Kubernetes</h1><p>开源的容器管理平台。通过配置即可自动调度管理容器。拥有以下功能：</p>\n<ul>\n<li><strong>服务发现与负载均衡</strong> k8s可以通过DNS或者IP暴露容器服务并自动发现，如果对于容器服务请求过高，k8s可以进行负载均衡流量，使服务平稳运行</li>\n<li><strong>存储编排</strong> 可以自由挂在存储资源，例如本地存储，云存储等</li>\n<li><strong>自动状态更新</strong> 通过配置新的容器状态，随后k8s将创建新的容器并进行资源转移</li>\n<li><strong>机器资源配置</strong> 可以为每个容器配置需要的CPU以及内存资源</li>\n<li><strong>自愈</strong> 发现服务异常自动重启</li>\n<li><strong>敏感信息配置</strong> 对于密码，token，keys等敏感信息由k8s私密管理</li>\n</ul>\n<h1 id=\"Kubernates集群组件\"><a href=\"#Kubernates集群组件\" class=\"headerlink\" title=\"Kubernates集群组件\"></a>Kubernates集群组件</h1><p>k8s集群包换了一些<code>worker</code>机器，被称为<code>nodes</code>。worker上会运行容器程序，每个集群至少有一个<code>worker</code>。<code>control plan</code>管理这些worker nodes 以及 Pods，通常在生产环境会运行于多个节点上。提供high availability服务。</p>\n<p>组件：</p>\n<p><img src=\"/2022/06/02/Kubernetes%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/components-of-kubernetes.svg\" alt=\"components-of-kubernetes\"></p>\n<h2 id=\"Control-Plane-Components\"><a href=\"#Control-Plane-Components\" class=\"headerlink\" title=\"Control Plane Components\"></a>Control Plane Components</h2><p>Control Plane Components 主要用来做一些决策，例如启动新的副本如果副本数不足。一些请求事件响应，如创建了dployment就同步创建启动pod。通常情况下部署在相同节点下，并且不在该节点下运行用户容器。参考：<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">Kubbernetes Components</a></p>\n<ul>\n<li><p>kube-apiserver</p>\n<p>用于暴露k8s api</p>\n</li>\n<li><p>etcd</p>\n<p>高可用键值数据库</p>\n</li>\n<li><p>kube-scheduler</p>\n<p>根据resource定义分配满足执行条件节点并运行</p>\n</li>\n<li><p>kube-controller-manager</p>\n<p>运行控制器进程的控制组件。从逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都编译成单个二进制文件并在单个进程中运行。</p>\n<p>这些控制器的某些类型是：</p>\n<ul>\n<li><p>节点控制器：负责节点发生故障时的注意和响应。</p>\n</li>\n<li><p>作业控制器：监视表示一次性任务的作业对象，然后创建Pod来运行这些任务完成。</p>\n</li>\n<li><p>端点控制器：填充端点对象（即加入服务和Pod）。</p>\n</li>\n<li><p>服务帐户和令牌控制器：为新命名空间创建默认帐户和API访问令牌。</p>\n</li>\n</ul>\n</li>\n<li><p>cloud-controller-manager</p>\n<p>可以将当前集群加入云集群，具体参考<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">Kubbernetes Components</a></p>\n</li>\n</ul>\n<h2 id=\"Node-Components\"><a href=\"#Node-Components\" class=\"headerlink\" title=\"Node Components\"></a>Node Components</h2><ul>\n<li>kubelet</li>\n<li>kube-proxy</li>\n<li>Container runtime</li>\n</ul>\n<h2 id=\"Addons\"><a href=\"#Addons\" class=\"headerlink\" title=\"Addons\"></a>Addons</h2><ul>\n<li>DNS</li>\n<li>Web UI（Dashboard）</li>\n<li>Container Resource Monitoring</li>\n<li>Cluster-level Logging</li>\n</ul>\n<h1 id=\"Kubernetes常用对象\"><a href=\"#Kubernetes常用对象\" class=\"headerlink\" title=\"Kubernetes常用对象\"></a>Kubernetes常用对象</h1><p>Kubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。具体来说，他们可以描述：</p>\n<ul>\n<li><p>正在运行哪些容器化应用程序（以及哪些节点）</p>\n</li>\n<li><p>这些应用程序可用的资源</p>\n</li>\n<li><p>围绕这些应用程序行为的策略，例如重新启动策略、升级和容错性</p>\n</li>\n</ul>\n<p>Kubernetes对象是“意图记录”，一旦您创建对象，Kubernetes系统将不断工作以确保该对象的存在。通过创建对象，您可以有效地告诉Kubernetes系统您希望集群的工作负载是什么样子；这是集群所需的状态。</p>\n<p>要使用Kubernetes对象，无论是创建、修改还是删除它们——您需要使用Kubernetes API。例如，当您使用kubectl命令行界面时，CLI会为您进行必要的Kubernetes API调用。您还可以使用客户端库之一直接在自己的程序中使用Kubernetes API。</p>\n<h2 id=\"Object-Spec-and-Status\"><a href=\"#Object-Spec-and-Status\" class=\"headerlink\" title=\"Object Spec and Status\"></a>Object Spec and Status</h2><p>对象规格和状态</p>\n<p>几乎每个Kubernetes对象都包含两个控制对象配置的嵌套对象字段：对象规范和对象状态。对于具有规范的对象，您必须在创建对象时设置此设置，并描述您希望资源具有的特征：其所需的状态。</p>\n<p>该状态描述了对象的当前状态，由Kubernetes系统及其组件提供和更新。Kubernetes控制平面持续并主动地管理每个对象的实际状态，以匹配您提供的期望状态。</p>\n<p>例如：在Kubernetes中，部署是一个可以表示在集群上运行的应用程序的对象。当您创建部署时，您可以将部署规范设置为指定您希望运行应用程序的三个副本。Kubernetes系统读取部署规范，并启动所需应用程序的三个实例——更新状态以匹配您的规范。如果其中任何实例出现故障（状态更改），Kubernetes系统会通过更正来响应规范和状态之间的差异——在这种情况下，启动替换实例。</p>\n<p>有关对象规范、状态和元数据的更多信息，请参阅<a href=\"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md\">Kubernetes API Conventions</a>.</p>\n<h2 id=\"Describing-a-Kubernetes-object\"><a href=\"#Describing-a-Kubernetes-object\" class=\"headerlink\" title=\"Describing a Kubernetes object\"></a>Describing a Kubernetes object</h2><p>当您在Kubernetes中创建对象时，您必须提供描述其所需状态的对象规范，以及有关对象的一些基本信息（例如名称）。当您使用Kubernetes API创建对象（直接或通过kubectl）时，该API请求必须在请求主体中包含该信息作为JSON。通常，您在.yaml文件中向kubectl提供信息。kubectl在提出API请求时将信息转换为JSON。</p>\n<p>这里有一个.yaml文件示例，显示Kubernetes部署的必填字段和对象规范：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span> <span class=\"comment\"># tells deployment to run 2 pods matching the template</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.14.2</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>可以使用<code>kubectl apply</code>命令创建Deployment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://k8s.io/examples/application/deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># deployment.apps/nginx-deployment created</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"必须字段\"><a href=\"#必须字段\" class=\"headerlink\" title=\"必须字段\"></a>必须字段</h2><p>在您要创建的Kubernetes对象的.yaml文件中，您需要为以下字段设置值：</p>\n<ul>\n<li><p>apiVersion - 您正在使用哪个版本的Kubernetes API来创建此对象</p>\n</li>\n<li><p>kind - 您想创建哪种对象</p>\n</li>\n<li><p>metadata - 有助于唯一识别对象的数据，包括名称字符串、UID和可选命名空间</p>\n</li>\n<li><p>spec - 您希望对象处于什么状态</p>\n</li>\n<li><p>对象规范的精确格式对每个Kubernetes对象都不同，并包含特定于该对象的嵌套字段。Kubernetes API参考可以帮助您找到可以使用Kubernetes创建的所有对象的规范格式。</p>\n</li>\n</ul>\n<p>例如，请参阅Pod API参考的规范字段。对于每个Pod，.spec字段指定pod及其所需状态（例如该pod中每个容器的容器映像名称）。对象规范的另一个例子是StatefulSet API的规范字段。对于StatefulSet，.spec字段指定StatefulSet及其所需状态。在StatefulSet的.spec中是Pod对象的模板。该模板描述了StatefulSet控制器为满足StatefulSet规范而创建的Pod。不同类型的对象也可以具有不同的.status；同样，API参考页面详细说明了该.status字段的结构，以及每种不同类型对象的内容。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>namespace</li>\n<li>node</li>\n<li>pod</li>\n<li>deployment</li>\n<li>service</li>\n<li>volumn</li>\n</ul>\n<h1 id=\"待补充。。。。。。\"><a href=\"#待补充。。。。。。\" class=\"headerlink\" title=\"待补充。。。。。。\"></a>待补充。。。。。。</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是Kubernetes\"><a href=\"#什么是Kubernetes\" class=\"headerlink\" title=\"什么是Kubernetes\"></a>什么是Kubernetes</h1><p>开源的容器管理平台。通过配置即可自动调度管理容器。拥有以下功能：</p>\n<ul>\n<li><strong>服务发现与负载均衡</strong> k8s可以通过DNS或者IP暴露容器服务并自动发现，如果对于容器服务请求过高，k8s可以进行负载均衡流量，使服务平稳运行</li>\n<li><strong>存储编排</strong> 可以自由挂在存储资源，例如本地存储，云存储等</li>\n<li><strong>自动状态更新</strong> 通过配置新的容器状态，随后k8s将创建新的容器并进行资源转移</li>\n<li><strong>机器资源配置</strong> 可以为每个容器配置需要的CPU以及内存资源</li>\n<li><strong>自愈</strong> 发现服务异常自动重启</li>\n<li><strong>敏感信息配置</strong> 对于密码，token，keys等敏感信息由k8s私密管理</li>\n</ul>\n<h1 id=\"Kubernates集群组件\"><a href=\"#Kubernates集群组件\" class=\"headerlink\" title=\"Kubernates集群组件\"></a>Kubernates集群组件</h1><p>k8s集群包换了一些<code>worker</code>机器，被称为<code>nodes</code>。worker上会运行容器程序，每个集群至少有一个<code>worker</code>。<code>control plan</code>管理这些worker nodes 以及 Pods，通常在生产环境会运行于多个节点上。提供high availability服务。</p>\n<p>组件：</p>\n<p><img src=\"/2022/06/02/Kubernetes%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/components-of-kubernetes.svg\" alt=\"components-of-kubernetes\"></p>\n<h2 id=\"Control-Plane-Components\"><a href=\"#Control-Plane-Components\" class=\"headerlink\" title=\"Control Plane Components\"></a>Control Plane Components</h2><p>Control Plane Components 主要用来做一些决策，例如启动新的副本如果副本数不足。一些请求事件响应，如创建了dployment就同步创建启动pod。通常情况下部署在相同节点下，并且不在该节点下运行用户容器。参考：<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">Kubbernetes Components</a></p>\n<ul>\n<li><p>kube-apiserver</p>\n<p>用于暴露k8s api</p>\n</li>\n<li><p>etcd</p>\n<p>高可用键值数据库</p>\n</li>\n<li><p>kube-scheduler</p>\n<p>根据resource定义分配满足执行条件节点并运行</p>\n</li>\n<li><p>kube-controller-manager</p>\n<p>运行控制器进程的控制组件。从逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都编译成单个二进制文件并在单个进程中运行。</p>\n<p>这些控制器的某些类型是：</p>\n<ul>\n<li><p>节点控制器：负责节点发生故障时的注意和响应。</p>\n</li>\n<li><p>作业控制器：监视表示一次性任务的作业对象，然后创建Pod来运行这些任务完成。</p>\n</li>\n<li><p>端点控制器：填充端点对象（即加入服务和Pod）。</p>\n</li>\n<li><p>服务帐户和令牌控制器：为新命名空间创建默认帐户和API访问令牌。</p>\n</li>\n</ul>\n</li>\n<li><p>cloud-controller-manager</p>\n<p>可以将当前集群加入云集群，具体参考<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">Kubbernetes Components</a></p>\n</li>\n</ul>\n<h2 id=\"Node-Components\"><a href=\"#Node-Components\" class=\"headerlink\" title=\"Node Components\"></a>Node Components</h2><ul>\n<li>kubelet</li>\n<li>kube-proxy</li>\n<li>Container runtime</li>\n</ul>\n<h2 id=\"Addons\"><a href=\"#Addons\" class=\"headerlink\" title=\"Addons\"></a>Addons</h2><ul>\n<li>DNS</li>\n<li>Web UI（Dashboard）</li>\n<li>Container Resource Monitoring</li>\n<li>Cluster-level Logging</li>\n</ul>\n<h1 id=\"Kubernetes常用对象\"><a href=\"#Kubernetes常用对象\" class=\"headerlink\" title=\"Kubernetes常用对象\"></a>Kubernetes常用对象</h1><p>Kubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。具体来说，他们可以描述：</p>\n<ul>\n<li><p>正在运行哪些容器化应用程序（以及哪些节点）</p>\n</li>\n<li><p>这些应用程序可用的资源</p>\n</li>\n<li><p>围绕这些应用程序行为的策略，例如重新启动策略、升级和容错性</p>\n</li>\n</ul>\n<p>Kubernetes对象是“意图记录”，一旦您创建对象，Kubernetes系统将不断工作以确保该对象的存在。通过创建对象，您可以有效地告诉Kubernetes系统您希望集群的工作负载是什么样子；这是集群所需的状态。</p>\n<p>要使用Kubernetes对象，无论是创建、修改还是删除它们——您需要使用Kubernetes API。例如，当您使用kubectl命令行界面时，CLI会为您进行必要的Kubernetes API调用。您还可以使用客户端库之一直接在自己的程序中使用Kubernetes API。</p>\n<h2 id=\"Object-Spec-and-Status\"><a href=\"#Object-Spec-and-Status\" class=\"headerlink\" title=\"Object Spec and Status\"></a>Object Spec and Status</h2><p>对象规格和状态</p>\n<p>几乎每个Kubernetes对象都包含两个控制对象配置的嵌套对象字段：对象规范和对象状态。对于具有规范的对象，您必须在创建对象时设置此设置，并描述您希望资源具有的特征：其所需的状态。</p>\n<p>该状态描述了对象的当前状态，由Kubernetes系统及其组件提供和更新。Kubernetes控制平面持续并主动地管理每个对象的实际状态，以匹配您提供的期望状态。</p>\n<p>例如：在Kubernetes中，部署是一个可以表示在集群上运行的应用程序的对象。当您创建部署时，您可以将部署规范设置为指定您希望运行应用程序的三个副本。Kubernetes系统读取部署规范，并启动所需应用程序的三个实例——更新状态以匹配您的规范。如果其中任何实例出现故障（状态更改），Kubernetes系统会通过更正来响应规范和状态之间的差异——在这种情况下，启动替换实例。</p>\n<p>有关对象规范、状态和元数据的更多信息，请参阅<a href=\"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md\">Kubernetes API Conventions</a>.</p>\n<h2 id=\"Describing-a-Kubernetes-object\"><a href=\"#Describing-a-Kubernetes-object\" class=\"headerlink\" title=\"Describing a Kubernetes object\"></a>Describing a Kubernetes object</h2><p>当您在Kubernetes中创建对象时，您必须提供描述其所需状态的对象规范，以及有关对象的一些基本信息（例如名称）。当您使用Kubernetes API创建对象（直接或通过kubectl）时，该API请求必须在请求主体中包含该信息作为JSON。通常，您在.yaml文件中向kubectl提供信息。kubectl在提出API请求时将信息转换为JSON。</p>\n<p>这里有一个.yaml文件示例，显示Kubernetes部署的必填字段和对象规范：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span> <span class=\"comment\"># tells deployment to run 2 pods matching the template</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.14.2</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>可以使用<code>kubectl apply</code>命令创建Deployment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://k8s.io/examples/application/deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># deployment.apps/nginx-deployment created</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"必须字段\"><a href=\"#必须字段\" class=\"headerlink\" title=\"必须字段\"></a>必须字段</h2><p>在您要创建的Kubernetes对象的.yaml文件中，您需要为以下字段设置值：</p>\n<ul>\n<li><p>apiVersion - 您正在使用哪个版本的Kubernetes API来创建此对象</p>\n</li>\n<li><p>kind - 您想创建哪种对象</p>\n</li>\n<li><p>metadata - 有助于唯一识别对象的数据，包括名称字符串、UID和可选命名空间</p>\n</li>\n<li><p>spec - 您希望对象处于什么状态</p>\n</li>\n<li><p>对象规范的精确格式对每个Kubernetes对象都不同，并包含特定于该对象的嵌套字段。Kubernetes API参考可以帮助您找到可以使用Kubernetes创建的所有对象的规范格式。</p>\n</li>\n</ul>\n<p>例如，请参阅Pod API参考的规范字段。对于每个Pod，.spec字段指定pod及其所需状态（例如该pod中每个容器的容器映像名称）。对象规范的另一个例子是StatefulSet API的规范字段。对于StatefulSet，.spec字段指定StatefulSet及其所需状态。在StatefulSet的.spec中是Pod对象的模板。该模板描述了StatefulSet控制器为满足StatefulSet规范而创建的Pod。不同类型的对象也可以具有不同的.status；同样，API参考页面详细说明了该.status字段的结构，以及每种不同类型对象的内容。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>namespace</li>\n<li>node</li>\n<li>pod</li>\n<li>deployment</li>\n<li>service</li>\n<li>volumn</li>\n</ul>\n<h1 id=\"待补充。。。。。。\"><a href=\"#待补充。。。。。。\" class=\"headerlink\" title=\"待补充。。。。。。\"></a>待补充。。。。。。</h1>"},{"title":"RAFT算法","date":"2022-06-01T01:43:50.000Z","_content":"","source":"_posts/RAFT算法.md","raw":"---\ntitle: RAFT算法\ndate: 2022-06-01 09:43:50\ntags:\n---\n","slug":"RAFT算法","published":1,"updated":"2022-06-01T01:43:50.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkt000g7qh8h92pe79b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RESTful","date":"2022-06-01T01:11:01.000Z","_content":"\n# REST\n\n## `Resource Representational State Transfer`：\n\n- **资源（Resource）** ：URL即资源，指向具体操作的对象\n- **表现形式（Representational）**：请求数据类型（`json`, `xml`,`file`等）\n- **状态转移（State Transfer）** ：通过具体的`method`行为（`GET`,`POST`,`PUT`,`PATCH`,`DELETE`）操作资源并改变资源状态\n\n## 动作\n\n- `GET` 获取资源\n- `POST` 保存资源\n- `PUT` 更新资源（全量更新）\n- `PATCH` 更新资源（部分更新）\n- `DELETE` 删除资源\n\n## URL设计规则\n\n- 不可包含动词，仅描述资源\n- 使用小写字母\n- 设置版本号规则，实现版本化\n\n## \n\n# HATEOAS\n\n`Hypermedia as the Engine of Application State`\n\n可以被简单的理解为为 REST API 中的 Resource 提供必要的链接，对，就像是 HTML 页面上的链接。我们在访问一个 web 站点的时候从来没有说要看一个说明文档并在其中找到我们所需要的资源的 URI，而是通过一个入口页面（当然，搜索引擎也提供了入口）所包含的链接，一步一步找到我们想要的内容。HATEOAS 是 REST 架构风格重要的组成部分，然而对于现在的诸多 REST 接口中却并没有它的身影。它被 [Richardson Maturity Model](https://martinfowler.com/articles/richardsonMaturityModel.html) 定义为 REST 的最终形态。[参考链接](https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/)\n\n\n\n# SpringBoot\n\n参考1：[SpringBoot Restful](https://spring.io/guides/tutorials/rest/)\n\n参考2：[SpringBoot & HATEOAS](https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/)\n\n参考3：[Spring HATEOAS](https://docs.spring.io/spring-hateoas/docs/1.5.0/reference/html/)\n\n","source":"_posts/RESTful.md","raw":"---\ntitle: RESTful\ndate: 2022-06-01 09:11:01\ntags:\n  - RESTful\n  - HATEOAS\n---\n\n# REST\n\n## `Resource Representational State Transfer`：\n\n- **资源（Resource）** ：URL即资源，指向具体操作的对象\n- **表现形式（Representational）**：请求数据类型（`json`, `xml`,`file`等）\n- **状态转移（State Transfer）** ：通过具体的`method`行为（`GET`,`POST`,`PUT`,`PATCH`,`DELETE`）操作资源并改变资源状态\n\n## 动作\n\n- `GET` 获取资源\n- `POST` 保存资源\n- `PUT` 更新资源（全量更新）\n- `PATCH` 更新资源（部分更新）\n- `DELETE` 删除资源\n\n## URL设计规则\n\n- 不可包含动词，仅描述资源\n- 使用小写字母\n- 设置版本号规则，实现版本化\n\n## \n\n# HATEOAS\n\n`Hypermedia as the Engine of Application State`\n\n可以被简单的理解为为 REST API 中的 Resource 提供必要的链接，对，就像是 HTML 页面上的链接。我们在访问一个 web 站点的时候从来没有说要看一个说明文档并在其中找到我们所需要的资源的 URI，而是通过一个入口页面（当然，搜索引擎也提供了入口）所包含的链接，一步一步找到我们想要的内容。HATEOAS 是 REST 架构风格重要的组成部分，然而对于现在的诸多 REST 接口中却并没有它的身影。它被 [Richardson Maturity Model](https://martinfowler.com/articles/richardsonMaturityModel.html) 定义为 REST 的最终形态。[参考链接](https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/)\n\n\n\n# SpringBoot\n\n参考1：[SpringBoot Restful](https://spring.io/guides/tutorials/rest/)\n\n参考2：[SpringBoot & HATEOAS](https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/)\n\n参考3：[Spring HATEOAS](https://docs.spring.io/spring-hateoas/docs/1.5.0/reference/html/)\n\n","slug":"RESTful","published":1,"updated":"2022-06-01T01:36:03.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmku000j7qh8b1r30wzz","content":"<h1 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h1><h2 id=\"Resource-Representational-State-Transfer：\"><a href=\"#Resource-Representational-State-Transfer：\" class=\"headerlink\" title=\"Resource Representational State Transfer：\"></a><code>Resource Representational State Transfer</code>：</h2><ul>\n<li><strong>资源（Resource）</strong> ：URL即资源，指向具体操作的对象</li>\n<li><strong>表现形式（Representational）</strong>：请求数据类型（<code>json</code>, <code>xml</code>,<code>file</code>等）</li>\n<li><strong>状态转移（State Transfer）</strong> ：通过具体的<code>method</code>行为（<code>GET</code>,<code>POST</code>,<code>PUT</code>,<code>PATCH</code>,<code>DELETE</code>）操作资源并改变资源状态</li>\n</ul>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><ul>\n<li><code>GET</code> 获取资源</li>\n<li><code>POST</code> 保存资源</li>\n<li><code>PUT</code> 更新资源（全量更新）</li>\n<li><code>PATCH</code> 更新资源（部分更新）</li>\n<li><code>DELETE</code> 删除资源</li>\n</ul>\n<h2 id=\"URL设计规则\"><a href=\"#URL设计规则\" class=\"headerlink\" title=\"URL设计规则\"></a>URL设计规则</h2><ul>\n<li>不可包含动词，仅描述资源</li>\n<li>使用小写字母</li>\n<li>设置版本号规则，实现版本化</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"HATEOAS\"><a href=\"#HATEOAS\" class=\"headerlink\" title=\"HATEOAS\"></a>HATEOAS</h1><p><code>Hypermedia as the Engine of Application State</code></p>\n<p>可以被简单的理解为为 REST API 中的 Resource 提供必要的链接，对，就像是 HTML 页面上的链接。我们在访问一个 web 站点的时候从来没有说要看一个说明文档并在其中找到我们所需要的资源的 URI，而是通过一个入口页面（当然，搜索引擎也提供了入口）所包含的链接，一步一步找到我们想要的内容。HATEOAS 是 REST 架构风格重要的组成部分，然而对于现在的诸多 REST 接口中却并没有它的身影。它被 <a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">Richardson Maturity Model</a> 定义为 REST 的最终形态。<a href=\"https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/\">参考链接</a></p>\n<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><p>参考1：<a href=\"https://spring.io/guides/tutorials/rest/\">SpringBoot Restful</a></p>\n<p>参考2：<a href=\"https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/\">SpringBoot &amp; HATEOAS</a></p>\n<p>参考3：<a href=\"https://docs.spring.io/spring-hateoas/docs/1.5.0/reference/html/\">Spring HATEOAS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h1><h2 id=\"Resource-Representational-State-Transfer：\"><a href=\"#Resource-Representational-State-Transfer：\" class=\"headerlink\" title=\"Resource Representational State Transfer：\"></a><code>Resource Representational State Transfer</code>：</h2><ul>\n<li><strong>资源（Resource）</strong> ：URL即资源，指向具体操作的对象</li>\n<li><strong>表现形式（Representational）</strong>：请求数据类型（<code>json</code>, <code>xml</code>,<code>file</code>等）</li>\n<li><strong>状态转移（State Transfer）</strong> ：通过具体的<code>method</code>行为（<code>GET</code>,<code>POST</code>,<code>PUT</code>,<code>PATCH</code>,<code>DELETE</code>）操作资源并改变资源状态</li>\n</ul>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><ul>\n<li><code>GET</code> 获取资源</li>\n<li><code>POST</code> 保存资源</li>\n<li><code>PUT</code> 更新资源（全量更新）</li>\n<li><code>PATCH</code> 更新资源（部分更新）</li>\n<li><code>DELETE</code> 删除资源</li>\n</ul>\n<h2 id=\"URL设计规则\"><a href=\"#URL设计规则\" class=\"headerlink\" title=\"URL设计规则\"></a>URL设计规则</h2><ul>\n<li>不可包含动词，仅描述资源</li>\n<li>使用小写字母</li>\n<li>设置版本号规则，实现版本化</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"HATEOAS\"><a href=\"#HATEOAS\" class=\"headerlink\" title=\"HATEOAS\"></a>HATEOAS</h1><p><code>Hypermedia as the Engine of Application State</code></p>\n<p>可以被简单的理解为为 REST API 中的 Resource 提供必要的链接，对，就像是 HTML 页面上的链接。我们在访问一个 web 站点的时候从来没有说要看一个说明文档并在其中找到我们所需要的资源的 URI，而是通过一个入口页面（当然，搜索引擎也提供了入口）所包含的链接，一步一步找到我们想要的内容。HATEOAS 是 REST 架构风格重要的组成部分，然而对于现在的诸多 REST 接口中却并没有它的身影。它被 <a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">Richardson Maturity Model</a> 定义为 REST 的最终形态。<a href=\"https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/\">参考链接</a></p>\n<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><p>参考1：<a href=\"https://spring.io/guides/tutorials/rest/\">SpringBoot Restful</a></p>\n<p>参考2：<a href=\"https://blog.aisensiy.me/2017/06/04/spring-boot-and-hateoas/\">SpringBoot &amp; HATEOAS</a></p>\n<p>参考3：<a href=\"https://docs.spring.io/spring-hateoas/docs/1.5.0/reference/html/\">Spring HATEOAS</a></p>\n"},{"title":"Synchronized","date":"2022-05-31T01:12:49.000Z","_content":"\n# 简介\n\nSynchronized是Java的一个关键字，通过它可以实现线程安全。\n\n# 使用方式\n\n1. 修饰实例方法\n\n   将实例作为锁对象\n\n2. 修饰静态方法与静态代码块\n\n   将Class对象作为锁对象\n\n3. 自定义锁对象\n\n# 原理\n\n编译过程中会生成`monitorenter`与`monitorexit`字节码指令。锁信息会记录在锁对象的对象头中的Mark Word中\n\n# 锁升级过程\n\n参考：[锁升级过程](https://blog.csdn.net/qq_41860497/article/details/125010798#:~:text=偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能%E3%80%82%20当一个线程访问同步代码块并获取锁时，会在%20Mark%20Word,里存储锁偏向的%20线程%20ID%20%E3%80%82)\n\n最初Synchronized是采用重量级锁，重量级锁存在内核态与用户态的切换，存在性能损耗。于是后续进行了相关优化：锁升级\n\n无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁\n\n偏向锁：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。线程尝试竞争时，偏向锁等待全局安全点判断是否有竞争恢复到轻量级锁或无锁状态。**偏向锁适用于同一个线程多次获取锁的情况**。 **缺点：竞争激烈情况下，存在锁撤销的开销，此时可以关闭偏向锁**\n\n轻量级锁：**适用于多个线程交替获取锁，很少发生竞争**， **缺点：消耗CPU**\n\n重量级锁：**系统中存在大量的线程同时尝试获取锁，高并发场景**，**缺点：线程阻塞唤醒，频繁切换上下文性能损耗**\n\n详细过程：\n\n1. 尝试获取锁的线程，检查锁对象头中Mark Word记录的线程ID。如果与当前线程ID相同，表示已获取锁直接执行\n2. 如果发现与当前线程不一致，偏向锁撤销升级为轻量级锁。拷贝Mark Word到栈帧，尝试CAS自旋修改Mark Word指向栈帧，修改成功则获得锁，否则在多次（15次）自旋失败后膨胀为重量级锁\n3. 此时存在大量竞争，未保证线程安全并且降低自旋导致的cpu busy。重量级锁接管，对于未获取锁的线程进行阻塞。等待锁释放操作系统调度。\n\n","source":"_posts/Synchronized.md","raw":"---\ntitle: Synchronized\ndate: 2022-05-31 09:12:49\ntags:\n  - 锁\n  - 并发\n  - 线程安全\n  - java\n  - 关键字\n---\n\n# 简介\n\nSynchronized是Java的一个关键字，通过它可以实现线程安全。\n\n# 使用方式\n\n1. 修饰实例方法\n\n   将实例作为锁对象\n\n2. 修饰静态方法与静态代码块\n\n   将Class对象作为锁对象\n\n3. 自定义锁对象\n\n# 原理\n\n编译过程中会生成`monitorenter`与`monitorexit`字节码指令。锁信息会记录在锁对象的对象头中的Mark Word中\n\n# 锁升级过程\n\n参考：[锁升级过程](https://blog.csdn.net/qq_41860497/article/details/125010798#:~:text=偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能%E3%80%82%20当一个线程访问同步代码块并获取锁时，会在%20Mark%20Word,里存储锁偏向的%20线程%20ID%20%E3%80%82)\n\n最初Synchronized是采用重量级锁，重量级锁存在内核态与用户态的切换，存在性能损耗。于是后续进行了相关优化：锁升级\n\n无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁\n\n偏向锁：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。线程尝试竞争时，偏向锁等待全局安全点判断是否有竞争恢复到轻量级锁或无锁状态。**偏向锁适用于同一个线程多次获取锁的情况**。 **缺点：竞争激烈情况下，存在锁撤销的开销，此时可以关闭偏向锁**\n\n轻量级锁：**适用于多个线程交替获取锁，很少发生竞争**， **缺点：消耗CPU**\n\n重量级锁：**系统中存在大量的线程同时尝试获取锁，高并发场景**，**缺点：线程阻塞唤醒，频繁切换上下文性能损耗**\n\n详细过程：\n\n1. 尝试获取锁的线程，检查锁对象头中Mark Word记录的线程ID。如果与当前线程ID相同，表示已获取锁直接执行\n2. 如果发现与当前线程不一致，偏向锁撤销升级为轻量级锁。拷贝Mark Word到栈帧，尝试CAS自旋修改Mark Word指向栈帧，修改成功则获得锁，否则在多次（15次）自旋失败后膨胀为重量级锁\n3. 此时存在大量竞争，未保证线程安全并且降低自旋导致的cpu busy。重量级锁接管，对于未获取锁的线程进行阻塞。等待锁释放操作系统调度。\n\n","slug":"Synchronized","published":1,"updated":"2022-05-31T01:58:59.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkv000k7qh8ewrzaz5h","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Synchronized是Java的一个关键字，通过它可以实现线程安全。</p>\n<h1 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h1><ol>\n<li><p>修饰实例方法</p>\n<p>将实例作为锁对象</p>\n</li>\n<li><p>修饰静态方法与静态代码块</p>\n<p>将Class对象作为锁对象</p>\n</li>\n<li><p>自定义锁对象</p>\n</li>\n</ol>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>编译过程中会生成<code>monitorenter</code>与<code>monitorexit</code>字节码指令。锁信息会记录在锁对象的对象头中的Mark Word中</p>\n<h1 id=\"锁升级过程\"><a href=\"#锁升级过程\" class=\"headerlink\" title=\"锁升级过程\"></a>锁升级过程</h1><p>参考：<a href=\"https://blog.csdn.net/qq_41860497/article/details/125010798#:~:text=%E5%81%8F%E5%90%91%E9%94%81%E6%98%AF%E6%8C%87%E5%BD%93%E4%B8%80%E6%AE%B5%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E4%B8%80%E7%9B%B4%E8%A2%AB%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%89%80%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E5%8D%B3%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%AB%9E%E4%BA%89%E6%97%B6%EF%BC%8C%E9%82%A3%E4%B9%88%E8%AF%A5%E7%BA%BF%E7%A8%8B%E5%9C%A8%E5%90%8E%E7%BB%AD%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BE%BF%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%BE%97%E9%94%81%EF%BC%8C%E4%BB%8E%E8%80%8C%E9%99%8D%E4%BD%8E%E8%8E%B7%E5%8F%96%E9%94%81%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%B6%88%E8%80%97%EF%BC%8C%E5%8D%B3%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E3%80%82%20%E5%BD%93%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%B9%B6%E8%8E%B7%E5%8F%96%E9%94%81%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%9C%A8%20Mark%20Word,%E9%87%8C%E5%AD%98%E5%82%A8%E9%94%81%E5%81%8F%E5%90%91%E7%9A%84%20%E7%BA%BF%E7%A8%8B%20ID%20%E3%80%82\">锁升级过程</a></p>\n<p>最初Synchronized是采用重量级锁，重量级锁存在内核态与用户态的切换，存在性能损耗。于是后续进行了相关优化：锁升级</p>\n<p>无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p>\n<p>偏向锁：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。线程尝试竞争时，偏向锁等待全局安全点判断是否有竞争恢复到轻量级锁或无锁状态。<strong>偏向锁适用于同一个线程多次获取锁的情况</strong>。 <strong>缺点：竞争激烈情况下，存在锁撤销的开销，此时可以关闭偏向锁</strong></p>\n<p>轻量级锁：<strong>适用于多个线程交替获取锁，很少发生竞争</strong>， <strong>缺点：消耗CPU</strong></p>\n<p>重量级锁：<strong>系统中存在大量的线程同时尝试获取锁，高并发场景</strong>，<strong>缺点：线程阻塞唤醒，频繁切换上下文性能损耗</strong></p>\n<p>详细过程：</p>\n<ol>\n<li>尝试获取锁的线程，检查锁对象头中Mark Word记录的线程ID。如果与当前线程ID相同，表示已获取锁直接执行</li>\n<li>如果发现与当前线程不一致，偏向锁撤销升级为轻量级锁。拷贝Mark Word到栈帧，尝试CAS自旋修改Mark Word指向栈帧，修改成功则获得锁，否则在多次（15次）自旋失败后膨胀为重量级锁</li>\n<li>此时存在大量竞争，未保证线程安全并且降低自旋导致的cpu busy。重量级锁接管，对于未获取锁的线程进行阻塞。等待锁释放操作系统调度。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Synchronized是Java的一个关键字，通过它可以实现线程安全。</p>\n<h1 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h1><ol>\n<li><p>修饰实例方法</p>\n<p>将实例作为锁对象</p>\n</li>\n<li><p>修饰静态方法与静态代码块</p>\n<p>将Class对象作为锁对象</p>\n</li>\n<li><p>自定义锁对象</p>\n</li>\n</ol>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>编译过程中会生成<code>monitorenter</code>与<code>monitorexit</code>字节码指令。锁信息会记录在锁对象的对象头中的Mark Word中</p>\n<h1 id=\"锁升级过程\"><a href=\"#锁升级过程\" class=\"headerlink\" title=\"锁升级过程\"></a>锁升级过程</h1><p>参考：<a href=\"https://blog.csdn.net/qq_41860497/article/details/125010798#:~:text=%E5%81%8F%E5%90%91%E9%94%81%E6%98%AF%E6%8C%87%E5%BD%93%E4%B8%80%E6%AE%B5%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E4%B8%80%E7%9B%B4%E8%A2%AB%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%89%80%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E5%8D%B3%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%AB%9E%E4%BA%89%E6%97%B6%EF%BC%8C%E9%82%A3%E4%B9%88%E8%AF%A5%E7%BA%BF%E7%A8%8B%E5%9C%A8%E5%90%8E%E7%BB%AD%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BE%BF%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%BE%97%E9%94%81%EF%BC%8C%E4%BB%8E%E8%80%8C%E9%99%8D%E4%BD%8E%E8%8E%B7%E5%8F%96%E9%94%81%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%B6%88%E8%80%97%EF%BC%8C%E5%8D%B3%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E3%80%82%20%E5%BD%93%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%B9%B6%E8%8E%B7%E5%8F%96%E9%94%81%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%9C%A8%20Mark%20Word,%E9%87%8C%E5%AD%98%E5%82%A8%E9%94%81%E5%81%8F%E5%90%91%E7%9A%84%20%E7%BA%BF%E7%A8%8B%20ID%20%E3%80%82\">锁升级过程</a></p>\n<p>最初Synchronized是采用重量级锁，重量级锁存在内核态与用户态的切换，存在性能损耗。于是后续进行了相关优化：锁升级</p>\n<p>无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p>\n<p>偏向锁：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。线程尝试竞争时，偏向锁等待全局安全点判断是否有竞争恢复到轻量级锁或无锁状态。<strong>偏向锁适用于同一个线程多次获取锁的情况</strong>。 <strong>缺点：竞争激烈情况下，存在锁撤销的开销，此时可以关闭偏向锁</strong></p>\n<p>轻量级锁：<strong>适用于多个线程交替获取锁，很少发生竞争</strong>， <strong>缺点：消耗CPU</strong></p>\n<p>重量级锁：<strong>系统中存在大量的线程同时尝试获取锁，高并发场景</strong>，<strong>缺点：线程阻塞唤醒，频繁切换上下文性能损耗</strong></p>\n<p>详细过程：</p>\n<ol>\n<li>尝试获取锁的线程，检查锁对象头中Mark Word记录的线程ID。如果与当前线程ID相同，表示已获取锁直接执行</li>\n<li>如果发现与当前线程不一致，偏向锁撤销升级为轻量级锁。拷贝Mark Word到栈帧，尝试CAS自旋修改Mark Word指向栈帧，修改成功则获得锁，否则在多次（15次）自旋失败后膨胀为重量级锁</li>\n<li>此时存在大量竞争，未保证线程安全并且降低自旋导致的cpu busy。重量级锁接管，对于未获取锁的线程进行阻塞。等待锁释放操作系统调度。</li>\n</ol>\n"},{"title":"ThreadLoacl","date":"2022-05-31T03:33:47.000Z","_content":"\n# 使用\n\n```java\nprivate static final ThreadLocal<T> res1 = new NamedThreadLocal<>(\"resource1\");\nprivate static final ThreadLocal<T> res2 = new NamedThreadLocal<>(\"resource2\");\n```\n\n\n\n# 原理\n\nThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类。\n\nThreadLocalMap的引用是在Thread上定义的\n\nThreadLocal本身并不存储值，它只是作为key（弱引用）来让线程从ThreadLocalMap获取value\n\n![image-20220531114220950](image-20220531114220950.png)\n\n\n\n# 问题\n\n1. 为什么不用Thread作为key存取数据？这样更直观\n\n   thread作为key则所有线程数据在一个大Map中\n\n   - 不方便维护，一个大map。\n   - 一个线程多个值需要存取，只能在value上做文章。\n   - Map不能无限膨胀\n\n2. 内存泄漏问题是什么？什么时候会发生？如何避免？\n\n   ThreadLocalMap的Key是一个弱引用指向ThreadLocal实例。此时正常情况有两个引用指向ThreadLocal实例，一个强引用和一个弱引用。如果强引用被回收掉，ThreadLocal对象只有一个弱引用，也会被回收掉。此时ThreadLocalMap中key为null。到那时value并未被回收，如果在线程池下使用ThreadLocal并且对于key无新操作（因为ThreadLocal在每次操作时会自动清理key为null的value）就会存在大量value未回收的情况。\n\n   ![640](640.jpeg)\n\n","source":"_posts/ThreadLoacl.md","raw":"---\ntitle: ThreadLoacl\ndate: 2022-05-31 11:33:47\ntags:\n  - java\n  - ThreadLocal\n---\n\n# 使用\n\n```java\nprivate static final ThreadLocal<T> res1 = new NamedThreadLocal<>(\"resource1\");\nprivate static final ThreadLocal<T> res2 = new NamedThreadLocal<>(\"resource2\");\n```\n\n\n\n# 原理\n\nThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类。\n\nThreadLocalMap的引用是在Thread上定义的\n\nThreadLocal本身并不存储值，它只是作为key（弱引用）来让线程从ThreadLocalMap获取value\n\n![image-20220531114220950](image-20220531114220950.png)\n\n\n\n# 问题\n\n1. 为什么不用Thread作为key存取数据？这样更直观\n\n   thread作为key则所有线程数据在一个大Map中\n\n   - 不方便维护，一个大map。\n   - 一个线程多个值需要存取，只能在value上做文章。\n   - Map不能无限膨胀\n\n2. 内存泄漏问题是什么？什么时候会发生？如何避免？\n\n   ThreadLocalMap的Key是一个弱引用指向ThreadLocal实例。此时正常情况有两个引用指向ThreadLocal实例，一个强引用和一个弱引用。如果强引用被回收掉，ThreadLocal对象只有一个弱引用，也会被回收掉。此时ThreadLocalMap中key为null。到那时value并未被回收，如果在线程池下使用ThreadLocal并且对于key无新操作（因为ThreadLocal在每次操作时会自动清理key为null的value）就会存在大量value未回收的情况。\n\n   ![640](640.jpeg)\n\n","slug":"ThreadLoacl","published":1,"updated":"2022-05-31T04:34:41.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkv000m7qh8efcz279m","content":"<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;T&gt; res1 = <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadLocal</span>&lt;&gt;(<span class=\"string\">&quot;resource1&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;T&gt; res2 = <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadLocal</span>&lt;&gt;(<span class=\"string\">&quot;resource2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>ThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类。</p>\n<p>ThreadLocalMap的引用是在Thread上定义的</p>\n<p>ThreadLocal本身并不存储值，它只是作为key（弱引用）来让线程从ThreadLocalMap获取value</p>\n<p><img src=\"/2022/05/31/ThreadLoacl/image-20220531114220950.png\" alt=\"image-20220531114220950\"></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li><p>为什么不用Thread作为key存取数据？这样更直观</p>\n<p>thread作为key则所有线程数据在一个大Map中</p>\n<ul>\n<li>不方便维护，一个大map。</li>\n<li>一个线程多个值需要存取，只能在value上做文章。</li>\n<li>Map不能无限膨胀</li>\n</ul>\n</li>\n<li><p>内存泄漏问题是什么？什么时候会发生？如何避免？</p>\n<p>ThreadLocalMap的Key是一个弱引用指向ThreadLocal实例。此时正常情况有两个引用指向ThreadLocal实例，一个强引用和一个弱引用。如果强引用被回收掉，ThreadLocal对象只有一个弱引用，也会被回收掉。此时ThreadLocalMap中key为null。到那时value并未被回收，如果在线程池下使用ThreadLocal并且对于key无新操作（因为ThreadLocal在每次操作时会自动清理key为null的value）就会存在大量value未回收的情况。</p>\n<p><img src=\"/2022/05/31/ThreadLoacl/640.jpeg\" alt=\"640\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;T&gt; res1 = <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadLocal</span>&lt;&gt;(<span class=\"string\">&quot;resource1&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;T&gt; res2 = <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadLocal</span>&lt;&gt;(<span class=\"string\">&quot;resource2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>ThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类。</p>\n<p>ThreadLocalMap的引用是在Thread上定义的</p>\n<p>ThreadLocal本身并不存储值，它只是作为key（弱引用）来让线程从ThreadLocalMap获取value</p>\n<p><img src=\"/2022/05/31/ThreadLoacl/image-20220531114220950.png\" alt=\"image-20220531114220950\"></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li><p>为什么不用Thread作为key存取数据？这样更直观</p>\n<p>thread作为key则所有线程数据在一个大Map中</p>\n<ul>\n<li>不方便维护，一个大map。</li>\n<li>一个线程多个值需要存取，只能在value上做文章。</li>\n<li>Map不能无限膨胀</li>\n</ul>\n</li>\n<li><p>内存泄漏问题是什么？什么时候会发生？如何避免？</p>\n<p>ThreadLocalMap的Key是一个弱引用指向ThreadLocal实例。此时正常情况有两个引用指向ThreadLocal实例，一个强引用和一个弱引用。如果强引用被回收掉，ThreadLocal对象只有一个弱引用，也会被回收掉。此时ThreadLocalMap中key为null。到那时value并未被回收，如果在线程池下使用ThreadLocal并且对于key无新操作（因为ThreadLocal在每次操作时会自动清理key为null的value）就会存在大量value未回收的情况。</p>\n<p><img src=\"/2022/05/31/ThreadLoacl/640.jpeg\" alt=\"640\"></p>\n</li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-05-29T01:02:12.477Z","updated":"2022-05-29T01:02:12.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkx000n7qh812ceb6se","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"不同路径","date":"2022-06-03T12:15:11.000Z","_content":"\n[不同路径](https://leetcode.cn/problems/unique-paths/)\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\n\n问总共有多少条不同的路径？\n\n![robot_maze](robot_maze.png)\n\n```\n输入：m = 3, n = 7\n输出：28\n```\n\n\n\n思路1: 递归,  当前节点到终点的路径数等于往右走和往左右的路径和.\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    public int uniquePaths(int m, int n) {\n        find(m, n, 0, 0);\n        return max;\n    }\n\n    public void find(int m, int n, int x, int y) {\n        if(x >= m || y >= n) {\n            return;\n        }\n        if(x == m - 1 && y == n - 1) {\n            max++;\n        }\n        find(m, n, x + 1, y);\n        find(m, n, x, y + 1);\n    }\n}\n```\n\n\n\n思路2: 思路1在leetcode中超时, 所以采用dp数组维护每个位置的路径数,终点位置只有一种.其余位置`dp[i][j] = dp[i+1][j] + dp[i][j+1]`\n\n代码:\n\n```java\nclass Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n        for(int row = m - 1; row >= 0; row--) {\n            for(int column = n - 1; column >= 0; column--) {\n                if(row == m - 1 && column == n - 1) {\n                    dp[row][column] = 1;\n                }else {\n                    int down = 0;\n                    if(row + 1 < m) {\n                        down = dp[row+1][column];\n                    }\n                    int right = 0;\n                    if(column + 1 < n) {\n                        right = dp[row][column+1];\n                    }\n                    dp[row][column] = down + right;\n                }\n\n\n            }\n        }\n        return dp[0][0];\n    }\n\n}\n```\n\n","source":"_posts/不同路径.md","raw":"---\ntitle: 不同路径\ndate: 2022-06-03 20:15:11\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[不同路径](https://leetcode.cn/problems/unique-paths/)\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\n\n问总共有多少条不同的路径？\n\n![robot_maze](robot_maze.png)\n\n```\n输入：m = 3, n = 7\n输出：28\n```\n\n\n\n思路1: 递归,  当前节点到终点的路径数等于往右走和往左右的路径和.\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    public int uniquePaths(int m, int n) {\n        find(m, n, 0, 0);\n        return max;\n    }\n\n    public void find(int m, int n, int x, int y) {\n        if(x >= m || y >= n) {\n            return;\n        }\n        if(x == m - 1 && y == n - 1) {\n            max++;\n        }\n        find(m, n, x + 1, y);\n        find(m, n, x, y + 1);\n    }\n}\n```\n\n\n\n思路2: 思路1在leetcode中超时, 所以采用dp数组维护每个位置的路径数,终点位置只有一种.其余位置`dp[i][j] = dp[i+1][j] + dp[i][j+1]`\n\n代码:\n\n```java\nclass Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n        for(int row = m - 1; row >= 0; row--) {\n            for(int column = n - 1; column >= 0; column--) {\n                if(row == m - 1 && column == n - 1) {\n                    dp[row][column] = 1;\n                }else {\n                    int down = 0;\n                    if(row + 1 < m) {\n                        down = dp[row+1][column];\n                    }\n                    int right = 0;\n                    if(column + 1 < n) {\n                        right = dp[row][column+1];\n                    }\n                    dp[row][column] = down + right;\n                }\n\n\n            }\n        }\n        return dp[0][0];\n    }\n\n}\n```\n\n","slug":"不同路径","published":1,"updated":"2022-06-03T12:24:20.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkx000p7qh8hyk87hkc","content":"<p><a href=\"https://leetcode.cn/problems/unique-paths/\">不同路径</a></p>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><img src=\"/2022/06/03/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/robot_maze.png\" alt=\"robot_maze\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：m = 3, n = 7</span><br><span class=\"line\">输出：28</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路1: 递归,  当前节点到终点的路径数等于往右走和往左右的路径和.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        find(m, n, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &gt;= m || y &gt;= n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == m - <span class=\"number\">1</span> &amp;&amp; y == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            max++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        find(m, n, x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        find(m, n, x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路2: 思路1在leetcode中超时, 所以采用dp数组维护每个位置的路径数,终点位置只有一种.其余位置<code>dp[i][j] = dp[i+1][j] + dp[i][j+1]</code></p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> m - <span class=\"number\">1</span>; row &gt;= <span class=\"number\">0</span>; row--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> n - <span class=\"number\">1</span>; column &gt;= <span class=\"number\">0</span>; column--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(row == m - <span class=\"number\">1</span> &amp;&amp; column == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dp[row][column] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row + <span class=\"number\">1</span> &lt; m) &#123;</span><br><span class=\"line\">                        down = dp[row+<span class=\"number\">1</span>][column];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(column + <span class=\"number\">1</span> &lt; n) &#123;</span><br><span class=\"line\">                        right = dp[row][column+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[row][column] = down + right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/unique-paths/\">不同路径</a></p>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><img src=\"/2022/06/03/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/robot_maze.png\" alt=\"robot_maze\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：m = 3, n = 7</span><br><span class=\"line\">输出：28</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路1: 递归,  当前节点到终点的路径数等于往右走和往左右的路径和.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        find(m, n, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &gt;= m || y &gt;= n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == m - <span class=\"number\">1</span> &amp;&amp; y == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            max++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        find(m, n, x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        find(m, n, x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路2: 思路1在leetcode中超时, 所以采用dp数组维护每个位置的路径数,终点位置只有一种.其余位置<code>dp[i][j] = dp[i+1][j] + dp[i][j+1]</code></p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> m - <span class=\"number\">1</span>; row &gt;= <span class=\"number\">0</span>; row--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> n - <span class=\"number\">1</span>; column &gt;= <span class=\"number\">0</span>; column--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(row == m - <span class=\"number\">1</span> &amp;&amp; column == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dp[row][column] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row + <span class=\"number\">1</span> &lt; m) &#123;</span><br><span class=\"line\">                        down = dp[row+<span class=\"number\">1</span>][column];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(column + <span class=\"number\">1</span> &lt; n) &#123;</span><br><span class=\"line\">                        right = dp[row][column+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[row][column] = down + right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"乘积最大子数组","date":"2022-06-04T03:15:54.000Z","_content":"\n[乘积最大子数组](https://leetcode.cn/problems/maximum-product-subarray/)\n\n给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n\n测试用例的答案是一个 32-位 整数。\n\n子数组 是数组的连续子序列。\n\n```\n输入: nums = [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n```\n\n思路:\n\n维护每一个位置最大最小值( 通过这个可以为后续的提供数据支持)\n\n\n\n```java\nclass Solution {\n    public int maxProduct(int[] nums) {\n        if(nums.length == 1) {\n            return nums[0];\n        }\n        int max = 0;\n        int[] dp = new int[2];\n        for(int i = 0; i < nums.length; i++) {\n            int val = nums[i];\n            if(val == 0) {\n                dp[0] = 1;\n                dp[1] = 1;\n                continue;\n            }\n            if(i == 0) {\n                dp[0] = val;\n                dp[1] = val;\n            }else{\n                int v1 = dp[0] * val;\n                int v2 = dp[1] * val;\n                if(v1 > v2) {\n                    dp[0] = Math.min(v2, val);\n                    dp[1] = Math.max(v1, val);\n                }else{\n                    dp[0] = Math.min(v1, val);\n                    dp[1] = Math.max(v2, val);\n                }\n            }\n            max = Math.max(max, dp[1]);\n        }\n        return max;\n    }\n}\n```\n\n","source":"_posts/乘积最大子数组.md","raw":"---\ntitle: 乘积最大子数组\ndate: 2022-06-04 11:15:54\ntags:\n  - leetcode\n  - dp\n---\n\n[乘积最大子数组](https://leetcode.cn/problems/maximum-product-subarray/)\n\n给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n\n测试用例的答案是一个 32-位 整数。\n\n子数组 是数组的连续子序列。\n\n```\n输入: nums = [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n```\n\n思路:\n\n维护每一个位置最大最小值( 通过这个可以为后续的提供数据支持)\n\n\n\n```java\nclass Solution {\n    public int maxProduct(int[] nums) {\n        if(nums.length == 1) {\n            return nums[0];\n        }\n        int max = 0;\n        int[] dp = new int[2];\n        for(int i = 0; i < nums.length; i++) {\n            int val = nums[i];\n            if(val == 0) {\n                dp[0] = 1;\n                dp[1] = 1;\n                continue;\n            }\n            if(i == 0) {\n                dp[0] = val;\n                dp[1] = val;\n            }else{\n                int v1 = dp[0] * val;\n                int v2 = dp[1] * val;\n                if(v1 > v2) {\n                    dp[0] = Math.min(v2, val);\n                    dp[1] = Math.max(v1, val);\n                }else{\n                    dp[0] = Math.min(v1, val);\n                    dp[1] = Math.max(v2, val);\n                }\n            }\n            max = Math.max(max, dp[1]);\n        }\n        return max;\n    }\n}\n```\n\n","slug":"乘积最大子数组","published":1,"updated":"2022-06-04T03:31:27.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmky000q7qh84g997iup","content":"<p><a href=\"https://leetcode.cn/problems/maximum-product-subarray/\">乘积最大子数组</a></p>\n<p>给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n<p>测试用例的答案是一个 32-位 整数。</p>\n<p>子数组 是数组的连续子序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [2,3,-2,4]</span><br><span class=\"line\">输出: 6</span><br><span class=\"line\">解释: 子数组 [2,3] 有最大乘积 6。</span><br></pre></td></tr></table></figure>\n\n<p>思路:</p>\n<p>维护每一个位置最大最小值( 通过这个可以为后续的提供数据支持)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>] = val;</span><br><span class=\"line\">                dp[<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> dp[<span class=\"number\">0</span>] * val;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span> dp[<span class=\"number\">1</span>] * val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v1 &gt; v2) &#123;</span><br><span class=\"line\">                    dp[<span class=\"number\">0</span>] = Math.min(v2, val);</span><br><span class=\"line\">                    dp[<span class=\"number\">1</span>] = Math.max(v1, val);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[<span class=\"number\">0</span>] = Math.min(v1, val);</span><br><span class=\"line\">                    dp[<span class=\"number\">1</span>] = Math.max(v2, val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, dp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/maximum-product-subarray/\">乘积最大子数组</a></p>\n<p>给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n<p>测试用例的答案是一个 32-位 整数。</p>\n<p>子数组 是数组的连续子序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [2,3,-2,4]</span><br><span class=\"line\">输出: 6</span><br><span class=\"line\">解释: 子数组 [2,3] 有最大乘积 6。</span><br></pre></td></tr></table></figure>\n\n<p>思路:</p>\n<p>维护每一个位置最大最小值( 通过这个可以为后续的提供数据支持)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>] = val;</span><br><span class=\"line\">                dp[<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> dp[<span class=\"number\">0</span>] * val;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span> dp[<span class=\"number\">1</span>] * val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v1 &gt; v2) &#123;</span><br><span class=\"line\">                    dp[<span class=\"number\">0</span>] = Math.min(v2, val);</span><br><span class=\"line\">                    dp[<span class=\"number\">1</span>] = Math.max(v1, val);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[<span class=\"number\">0</span>] = Math.min(v1, val);</span><br><span class=\"line\">                    dp[<span class=\"number\">1</span>] = Math.max(v2, val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, dp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"二叉树的直径","date":"2022-06-02T07:47:44.000Z","_content":"\n[二叉树的直径](https://leetcode.cn/problems/diameter-of-binary-tree/)\n\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n\n```\n给定二叉树\n\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n```\n\n\n\n思路1：计算最长路径，可以转化为求每个节点的作为根节点并该节点长度。并与全局变量max比较并更新。每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1。 采用后续遍历，遍历过程中维护子树的左右子树最长路径，根据左右子树最长路径更新当前节点的左右最长路径。\n\n\n\n官方思路：Max(max, 左子树深度+右子树深度+1) \n\n思路1中的：\"每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1\" 其实就是树的深度的意思，因为最终会遍历每一个节点作为根节点所以没必要维护左右子树的较大路径，直接用深度维护即可。\n\n\n\n思路1代码（存在冗余代码）：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max = 0;\n    public int diameterOfBinaryTree(TreeNode root) {\n        if(root == null) {\n            return max;\n        }\n        find(root);\n        return max;\n    }\n\n    public int[] find(TreeNode node) {\n        int[] ret = new int[2];\n        int min = 0;\n        \n        TreeNode left = node.left;\n        TreeNode right = node.right;\n        if(left == null && right == null) {\n            return new int[]{1,1};\n        }\n\n        if(left != null) {\n            int[] lv = find(left);\n            ret[0] = Math.max(lv[0], lv[1]) + 1;\n            min++;\n        }\n       \n        if(right != null) {\n            int[] lr = find(right);\n            ret[1] = Math.max(lr[0], lr[1]) + 1;\n            min++;\n        }\n        int l1 = ret[0] + ret[1] - min;\n        max = Math.max(max, l1);\n        return ret;\n    }\n}\n```\n\n官方解答：\n\n```java\nclass Solution {\n    int ans;\n    public int diameterOfBinaryTree(TreeNode root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n    public int depth(TreeNode node) {\n        if (node == null) {\n            return 0; // 访问到空节点了，返回0\n        }\n        int L = depth(node.left); // 左儿子为根的子树的深度\n        int R = depth(node.right); // 右儿子为根的子树的深度\n        ans = Math.max(ans, L+R+1); // 计算d_node即L+R+1 并更新ans\n        return Math.max(L, R) + 1; // 返回该节点为根的子树的深度\n    }\n}\n```\n\n\n\n总结：最长路径就是以每个节点作为根节点，计算经过根节点的最长路径即可\n","source":"_posts/二叉树的直径.md","raw":"---\ntitle: 二叉树的直径\ndate: 2022-06-02 15:47:44\ntags:\n  - leetcode\n  - 算法\n  - 树\n---\n\n[二叉树的直径](https://leetcode.cn/problems/diameter-of-binary-tree/)\n\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n\n```\n给定二叉树\n\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n```\n\n\n\n思路1：计算最长路径，可以转化为求每个节点的作为根节点并该节点长度。并与全局变量max比较并更新。每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1。 采用后续遍历，遍历过程中维护子树的左右子树最长路径，根据左右子树最长路径更新当前节点的左右最长路径。\n\n\n\n官方思路：Max(max, 左子树深度+右子树深度+1) \n\n思路1中的：\"每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1\" 其实就是树的深度的意思，因为最终会遍历每一个节点作为根节点所以没必要维护左右子树的较大路径，直接用深度维护即可。\n\n\n\n思路1代码（存在冗余代码）：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max = 0;\n    public int diameterOfBinaryTree(TreeNode root) {\n        if(root == null) {\n            return max;\n        }\n        find(root);\n        return max;\n    }\n\n    public int[] find(TreeNode node) {\n        int[] ret = new int[2];\n        int min = 0;\n        \n        TreeNode left = node.left;\n        TreeNode right = node.right;\n        if(left == null && right == null) {\n            return new int[]{1,1};\n        }\n\n        if(left != null) {\n            int[] lv = find(left);\n            ret[0] = Math.max(lv[0], lv[1]) + 1;\n            min++;\n        }\n       \n        if(right != null) {\n            int[] lr = find(right);\n            ret[1] = Math.max(lr[0], lr[1]) + 1;\n            min++;\n        }\n        int l1 = ret[0] + ret[1] - min;\n        max = Math.max(max, l1);\n        return ret;\n    }\n}\n```\n\n官方解答：\n\n```java\nclass Solution {\n    int ans;\n    public int diameterOfBinaryTree(TreeNode root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n    public int depth(TreeNode node) {\n        if (node == null) {\n            return 0; // 访问到空节点了，返回0\n        }\n        int L = depth(node.left); // 左儿子为根的子树的深度\n        int R = depth(node.right); // 右儿子为根的子树的深度\n        ans = Math.max(ans, L+R+1); // 计算d_node即L+R+1 并更新ans\n        return Math.max(L, R) + 1; // 返回该节点为根的子树的深度\n    }\n}\n```\n\n\n\n总结：最长路径就是以每个节点作为根节点，计算经过根节点的最长路径即可\n","slug":"二叉树的直径","published":1,"updated":"2022-06-02T08:08:32.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmky000r7qh832x1183z","content":"<p><a href=\"https://leetcode.cn/problems/diameter-of-binary-tree/\">二叉树的直径</a></p>\n<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定二叉树</span><br><span class=\"line\"></span><br><span class=\"line\">          1</span><br><span class=\"line\">         / \\</span><br><span class=\"line\">        2   3</span><br><span class=\"line\">       / \\     </span><br><span class=\"line\">      4   5    </span><br><span class=\"line\">返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路1：计算最长路径，可以转化为求每个节点的作为根节点并该节点长度。并与全局变量max比较并更新。每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1。 采用后续遍历，遍历过程中维护子树的左右子树最长路径，根据左右子树最长路径更新当前节点的左右最长路径。</p>\n<p>官方思路：Max(max, 左子树深度+右子树深度+1) </p>\n<p>思路1中的：”每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1” 其实就是树的深度的意思，因为最终会遍历每一个节点作为根节点所以没必要维护左右子树的较大路径，直接用深度维护即可。</p>\n<p>思路1代码（存在冗余代码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        find(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] find(TreeNode node) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> node.left;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> node.right;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span> &amp;&amp; right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] lv = find(left);</span><br><span class=\"line\">            ret[<span class=\"number\">0</span>] = Math.max(lv[<span class=\"number\">0</span>], lv[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            min++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] lr = find(right);</span><br><span class=\"line\">            ret[<span class=\"number\">1</span>] = Math.max(lr[<span class=\"number\">0</span>], lr[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            min++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l1</span> <span class=\"operator\">=</span> ret[<span class=\"number\">0</span>] + ret[<span class=\"number\">1</span>] - min;</span><br><span class=\"line\">        max = Math.max(max, l1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>官方解答：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        depth(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">depth</span><span class=\"params\">(TreeNode node)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 访问到空节点了，返回0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">L</span> <span class=\"operator\">=</span> depth(node.left); <span class=\"comment\">// 左儿子为根的子树的深度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">R</span> <span class=\"operator\">=</span> depth(node.right); <span class=\"comment\">// 右儿子为根的子树的深度</span></span><br><span class=\"line\">        ans = Math.max(ans, L+R+<span class=\"number\">1</span>); <span class=\"comment\">// 计算d_node即L+R+1 并更新ans</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(L, R) + <span class=\"number\">1</span>; <span class=\"comment\">// 返回该节点为根的子树的深度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：最长路径就是以每个节点作为根节点，计算经过根节点的最长路径即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/diameter-of-binary-tree/\">二叉树的直径</a></p>\n<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定二叉树</span><br><span class=\"line\"></span><br><span class=\"line\">          1</span><br><span class=\"line\">         / \\</span><br><span class=\"line\">        2   3</span><br><span class=\"line\">       / \\     </span><br><span class=\"line\">      4   5    </span><br><span class=\"line\">返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路1：计算最长路径，可以转化为求每个节点的作为根节点并该节点长度。并与全局变量max比较并更新。每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1。 采用后续遍历，遍历过程中维护子树的左右子树最长路径，根据左右子树最长路径更新当前节点的左右最长路径。</p>\n<p>官方思路：Max(max, 左子树深度+右子树深度+1) </p>\n<p>思路1中的：”每个节点的最大长度等于其左子树最长的一条路径（左子树左右路径中较长的一条）+ 其右子树最长的一条路径（右子树左右路径中较长的一条）+ 1” 其实就是树的深度的意思，因为最终会遍历每一个节点作为根节点所以没必要维护左右子树的较大路径，直接用深度维护即可。</p>\n<p>思路1代码（存在冗余代码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        find(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] find(TreeNode node) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> node.left;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> node.right;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span> &amp;&amp; right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] lv = find(left);</span><br><span class=\"line\">            ret[<span class=\"number\">0</span>] = Math.max(lv[<span class=\"number\">0</span>], lv[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            min++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] lr = find(right);</span><br><span class=\"line\">            ret[<span class=\"number\">1</span>] = Math.max(lr[<span class=\"number\">0</span>], lr[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            min++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l1</span> <span class=\"operator\">=</span> ret[<span class=\"number\">0</span>] + ret[<span class=\"number\">1</span>] - min;</span><br><span class=\"line\">        max = Math.max(max, l1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>官方解答：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        depth(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">depth</span><span class=\"params\">(TreeNode node)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 访问到空节点了，返回0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">L</span> <span class=\"operator\">=</span> depth(node.left); <span class=\"comment\">// 左儿子为根的子树的深度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">R</span> <span class=\"operator\">=</span> depth(node.right); <span class=\"comment\">// 右儿子为根的子树的深度</span></span><br><span class=\"line\">        ans = Math.max(ans, L+R+<span class=\"number\">1</span>); <span class=\"comment\">// 计算d_node即L+R+1 并更新ans</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(L, R) + <span class=\"number\">1</span>; <span class=\"comment\">// 返回该节点为根的子树的深度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：最长路径就是以每个节点作为根节点，计算经过根节点的最长路径即可</p>\n"},{"title":"从前序与中序遍历序列构造二叉树","date":"2022-05-31T09:31:50.000Z","_content":"\n[从前序与中序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n\n给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。\n\n输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n输出: [3,9,20,null,null,15,7]\n\n思路：\n\n可以按照先序遍历顺序构建节点，第一个节点是整棵树的根节点。后续每个节点在中序遍历数组中确认其左右子树范围递归构建左右子树（可以将中序遍历数组做成Map方便查找确定范围）。需要注意的：递归过程中先序遍历索引更新\n\n解答：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int ps = 0;\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        Map<Integer,Integer> inordreMap = buildMap(inorder);\n        return build(preorder, inordreMap,0, inorder.length-1);\n    }\n\n    public TreeNode build(int[] preorder, Map<Integer,Integer>  inorder, int is, int ie){\n        if(ps >= preorder.length) {\n            return null;\n        }\n        int val = preorder[ps];\n        TreeNode node = new TreeNode(val);\n        int index = inorder.get(val);\n        if(index > is){\n            ps++;\n            node.left = build(preorder, inorder,is, index-1);\n        }\n        if(index < ie){\n            ps++;\n            node.right = build(preorder, inorder,index+1, ie);\n        }\n        return node;\n\n    }\n\n    public Map<Integer,Integer> buildMap(int[] arr){\n        Map<Integer,Integer> ret = new HashMap();\n        for(int i = 0; i < arr.length; i++) {\n            ret.put(arr[i],i);\n\n        }\n        return ret;\n    }\n}\n```\n\n","source":"_posts/从前序与中序遍历序列构造二叉树.md","raw":"---\ntitle: 从前序与中序遍历序列构造二叉树\ndate: 2022-05-31 17:31:50\ntags:\n  - 算法\n  - 二叉树\n  - leetcode\n---\n\n[从前序与中序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n\n给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。\n\n输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n输出: [3,9,20,null,null,15,7]\n\n思路：\n\n可以按照先序遍历顺序构建节点，第一个节点是整棵树的根节点。后续每个节点在中序遍历数组中确认其左右子树范围递归构建左右子树（可以将中序遍历数组做成Map方便查找确定范围）。需要注意的：递归过程中先序遍历索引更新\n\n解答：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int ps = 0;\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        Map<Integer,Integer> inordreMap = buildMap(inorder);\n        return build(preorder, inordreMap,0, inorder.length-1);\n    }\n\n    public TreeNode build(int[] preorder, Map<Integer,Integer>  inorder, int is, int ie){\n        if(ps >= preorder.length) {\n            return null;\n        }\n        int val = preorder[ps];\n        TreeNode node = new TreeNode(val);\n        int index = inorder.get(val);\n        if(index > is){\n            ps++;\n            node.left = build(preorder, inorder,is, index-1);\n        }\n        if(index < ie){\n            ps++;\n            node.right = build(preorder, inorder,index+1, ie);\n        }\n        return node;\n\n    }\n\n    public Map<Integer,Integer> buildMap(int[] arr){\n        Map<Integer,Integer> ret = new HashMap();\n        for(int i = 0; i < arr.length; i++) {\n            ret.put(arr[i],i);\n\n        }\n        return ret;\n    }\n}\n```\n\n","slug":"从前序与中序遍历序列构造二叉树","published":1,"updated":"2022-05-31T10:45:37.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkz000u7qh86qs092fm","content":"<p><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">从前序与中序遍历序列构造二叉树</a></p>\n<p>给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p>\n<p>输入: preorder &#x3D; [3,9,20,15,7], inorder &#x3D; [9,3,15,20,7]<br>输出: [3,9,20,null,null,15,7]</p>\n<p>思路：</p>\n<p>可以按照先序遍历顺序构建节点，第一个节点是整棵树的根节点。后续每个节点在中序遍历数组中确认其左右子树范围递归构建左右子树（可以将中序遍历数组做成Map方便查找确定范围）。需要注意的：递归过程中先序遍历索引更新</p>\n<p>解答：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>[] preorder, <span class=\"type\">int</span>[] inorder)</span> &#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; inordreMap = buildMap(inorder);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build(preorder, inordreMap,<span class=\"number\">0</span>, inorder.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"type\">int</span>[] preorder, Map&lt;Integer,Integer&gt;  inorder, <span class=\"type\">int</span> is, <span class=\"type\">int</span> ie)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ps &gt;= preorder.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> preorder[ps];</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> inorder.get(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt; is)&#123;</span><br><span class=\"line\">            ps++;</span><br><span class=\"line\">            node.left = build(preorder, inorder,is, index-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; ie)&#123;</span><br><span class=\"line\">            ps++;</span><br><span class=\"line\">            node.right = build(preorder, inorder,index+<span class=\"number\">1</span>, ie);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Integer,Integer&gt; <span class=\"title function_\">buildMap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; ret = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            ret.put(arr[i],i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">从前序与中序遍历序列构造二叉树</a></p>\n<p>给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p>\n<p>输入: preorder &#x3D; [3,9,20,15,7], inorder &#x3D; [9,3,15,20,7]<br>输出: [3,9,20,null,null,15,7]</p>\n<p>思路：</p>\n<p>可以按照先序遍历顺序构建节点，第一个节点是整棵树的根节点。后续每个节点在中序遍历数组中确认其左右子树范围递归构建左右子树（可以将中序遍历数组做成Map方便查找确定范围）。需要注意的：递归过程中先序遍历索引更新</p>\n<p>解答：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>[] preorder, <span class=\"type\">int</span>[] inorder)</span> &#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; inordreMap = buildMap(inorder);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build(preorder, inordreMap,<span class=\"number\">0</span>, inorder.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"type\">int</span>[] preorder, Map&lt;Integer,Integer&gt;  inorder, <span class=\"type\">int</span> is, <span class=\"type\">int</span> ie)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ps &gt;= preorder.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> preorder[ps];</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> inorder.get(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt; is)&#123;</span><br><span class=\"line\">            ps++;</span><br><span class=\"line\">            node.left = build(preorder, inorder,is, index-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; ie)&#123;</span><br><span class=\"line\">            ps++;</span><br><span class=\"line\">            node.right = build(preorder, inorder,index+<span class=\"number\">1</span>, ie);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Integer,Integer&gt; <span class=\"title function_\">buildMap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; ret = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            ret.put(arr[i],i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"删除排序链表中的重复元素","date":"2022-06-03T06:48:54.000Z","_content":"\n[删除排序链表中的重复元素](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/)\n\n给定一个已排序的链表的头 `head` ， *删除所有重复的元素，使每个元素只出现一次* 。返回 *已排序的链表* 。\n\n![list1](list1.jpg)\n\n```\n输入：head = [1,1,2]\n输出：[1,2]\n```\n\n\n\n思路: 采用递归处理, 当前链表去重, 等于以当前节点作为根节点的子链表去重,再与当前节点去重选择最终返回的根节点\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head == null) {\n            return null;\n        }\n        ListNode next = head.next;\n        if(next == null) {\n            return head;\n        }\n        // 如果存在重复\n        if(head.val == next.val) {\n            // 去重子链表\n            next.next = deleteDuplicates(next.next);\n            // 如果去重后的子链表头与当前节点存在重复\n            if(next.next != null && next.next.val == next.val) {\n                return next.next;\n            }\n            return next;\n        }else {\n            head.next = deleteDuplicates(next);\n            return head;\n        }\n    }\n}\n```\n\n\n\n","source":"_posts/删除排序链表中的重复元素.md","raw":"---\ntitle: 删除排序链表中的重复元素\ndate: 2022-06-03 14:48:54\ntags:\n  - leetcode\n  - 算法\n  - 链表\n  - 递归\n---\n\n[删除排序链表中的重复元素](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/)\n\n给定一个已排序的链表的头 `head` ， *删除所有重复的元素，使每个元素只出现一次* 。返回 *已排序的链表* 。\n\n![list1](list1.jpg)\n\n```\n输入：head = [1,1,2]\n输出：[1,2]\n```\n\n\n\n思路: 采用递归处理, 当前链表去重, 等于以当前节点作为根节点的子链表去重,再与当前节点去重选择最终返回的根节点\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head == null) {\n            return null;\n        }\n        ListNode next = head.next;\n        if(next == null) {\n            return head;\n        }\n        // 如果存在重复\n        if(head.val == next.val) {\n            // 去重子链表\n            next.next = deleteDuplicates(next.next);\n            // 如果去重后的子链表头与当前节点存在重复\n            if(next.next != null && next.next.val == next.val) {\n                return next.next;\n            }\n            return next;\n        }else {\n            head.next = deleteDuplicates(next);\n            return head;\n        }\n    }\n}\n```\n\n\n\n","slug":"删除排序链表中的重复元素","published":1,"updated":"2022-06-03T06:52:29.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjmkz000w7qh810gh6n3u","content":"<p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/\">删除排序链表中的重复元素</a></p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><img src=\"/2022/06/03/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/list1.jpg\" alt=\"list1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,1,2]</span><br><span class=\"line\">输出：[1,2]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 采用递归处理, 当前链表去重, 等于以当前节点作为根节点的子链表去重,再与当前节点去重选择最终返回的根节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在重复</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.val == next.val) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 去重子链表</span></span><br><span class=\"line\">            next.next = deleteDuplicates(next.next);</span><br><span class=\"line\">            <span class=\"comment\">// 如果去重后的子链表头与当前节点存在重复</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(next.next != <span class=\"literal\">null</span> &amp;&amp; next.next.val == next.val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head.next = deleteDuplicates(next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/\">删除排序链表中的重复元素</a></p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><img src=\"/2022/06/03/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/list1.jpg\" alt=\"list1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,1,2]</span><br><span class=\"line\">输出：[1,2]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 采用递归处理, 当前链表去重, 等于以当前节点作为根节点的子链表去重,再与当前节点去重选择最终返回的根节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在重复</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.val == next.val) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 去重子链表</span></span><br><span class=\"line\">            next.next = deleteDuplicates(next.next);</span><br><span class=\"line\">            <span class=\"comment\">// 如果去重后的子链表头与当前节点存在重复</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(next.next != <span class=\"literal\">null</span> &amp;&amp; next.next.val == next.val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head.next = deleteDuplicates(next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"在排序数组中查找元素的第一个和最后一个位置","date":"2022-06-03T04:21:57.000Z","_content":"\n[在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/)\n\n给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。\n\n如果数组中不存在目标值 target，返回 [-1, -1]。\n\n进阶：\n\n你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？\n\n```\n输入：nums = [5,7,7,8,8,10], target = 8\n输出：[3,4]\n```\n\n\n\n思路: 要求O(log n)时间复杂度. 采用二分查找即可. 先通过二分查找寻找target, 如果没有找到则返回`[-1, -1]`,否则根据找到的索引左右扩展知道不等于target为止. 返回左右拓展的最后位置即可\n\n\n\n代码:\n\n```java\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        // 寻找target索引\n        int pos = midSearch(nums, target, 0, nums.length-1);\n        // 找不到\n        if(pos == -1) {\n            return new int[]{-1, -1};\n        }\n        int left = pos;\n        int right = pos;\n        boolean leftBound = false;\n        boolean rightBound = false;\n        // 左右扩展\n        while(!leftBound || !rightBound) {\n            if(left >= 0 && nums[left] == target) {\n                left--;\n            } else {\n                leftBound = true;\n            }\n            if(right < nums.length && nums[right] == target) {\n                right++;\n            } else {\n                rightBound = true;\n            }\n        }\n        return new int[]{left+1, right-1};\n    }\n\n    // 二分查找\n    int midSearch(int[] nums, int target, int start, int end) {\n        if(start > end) {\n            return -1;\n        }\n        int mid = (end - start) / 2 + start;\n        if(nums[mid] == target) {\n            return mid;\n        } else if(nums[mid] < target) {\n            return midSearch(nums, target, mid+1, end);\n        } else{\n            return midSearch(nums, target, start, mid-1);\n        }\n        \n    }\n}\n```\n\n","source":"_posts/在排序数组中查找元素的第一个和最后一个位置.md","raw":"---\ntitle: 在排序数组中查找元素的第一个和最后一个位置\ndate: 2022-06-03 12:21:57\ntags:\n  - leetcode\n  - 算法\n  - 二分查找\n---\n\n[在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/)\n\n给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。\n\n如果数组中不存在目标值 target，返回 [-1, -1]。\n\n进阶：\n\n你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？\n\n```\n输入：nums = [5,7,7,8,8,10], target = 8\n输出：[3,4]\n```\n\n\n\n思路: 要求O(log n)时间复杂度. 采用二分查找即可. 先通过二分查找寻找target, 如果没有找到则返回`[-1, -1]`,否则根据找到的索引左右扩展知道不等于target为止. 返回左右拓展的最后位置即可\n\n\n\n代码:\n\n```java\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        // 寻找target索引\n        int pos = midSearch(nums, target, 0, nums.length-1);\n        // 找不到\n        if(pos == -1) {\n            return new int[]{-1, -1};\n        }\n        int left = pos;\n        int right = pos;\n        boolean leftBound = false;\n        boolean rightBound = false;\n        // 左右扩展\n        while(!leftBound || !rightBound) {\n            if(left >= 0 && nums[left] == target) {\n                left--;\n            } else {\n                leftBound = true;\n            }\n            if(right < nums.length && nums[right] == target) {\n                right++;\n            } else {\n                rightBound = true;\n            }\n        }\n        return new int[]{left+1, right-1};\n    }\n\n    // 二分查找\n    int midSearch(int[] nums, int target, int start, int end) {\n        if(start > end) {\n            return -1;\n        }\n        int mid = (end - start) / 2 + start;\n        if(nums[mid] == target) {\n            return mid;\n        } else if(nums[mid] < target) {\n            return midSearch(nums, target, mid+1, end);\n        } else{\n            return midSearch(nums, target, start, mid-1);\n        }\n        \n    }\n}\n```\n\n","slug":"在排序数组中查找元素的第一个和最后一个位置","published":1,"updated":"2022-06-03T04:26:14.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml0000z7qh84tjy0ipm","content":"<p><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\">在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>\n<p>进阶：</p>\n<p>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出：[3,4]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 要求O(log n)时间复杂度. 采用二分查找即可. 先通过二分查找寻找target, 如果没有找到则返回<code>[-1, -1]</code>,否则根据找到的索引左右扩展知道不等于target为止. 返回左右拓展的最后位置即可</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] searchRange(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 寻找target索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> midSearch(nums, target, <span class=\"number\">0</span>, nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 找不到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> pos;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> pos;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">leftBound</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rightBound</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 左右扩展</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!leftBound || !rightBound) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left &gt;= <span class=\"number\">0</span> &amp;&amp; nums[left] == target) &#123;</span><br><span class=\"line\">                left--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                leftBound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right &lt; nums.length &amp;&amp; nums[right] == target) &#123;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                rightBound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;left+<span class=\"number\">1</span>, right-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 二分查找</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">midSearch</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start &gt; end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (end - start) / <span class=\"number\">2</span> + start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> midSearch(nums, target, mid+<span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> midSearch(nums, target, start, mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\">在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>\n<p>进阶：</p>\n<p>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出：[3,4]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 要求O(log n)时间复杂度. 采用二分查找即可. 先通过二分查找寻找target, 如果没有找到则返回<code>[-1, -1]</code>,否则根据找到的索引左右扩展知道不等于target为止. 返回左右拓展的最后位置即可</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] searchRange(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 寻找target索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> midSearch(nums, target, <span class=\"number\">0</span>, nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 找不到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> pos;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> pos;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">leftBound</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rightBound</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 左右扩展</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!leftBound || !rightBound) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left &gt;= <span class=\"number\">0</span> &amp;&amp; nums[left] == target) &#123;</span><br><span class=\"line\">                left--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                leftBound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right &lt; nums.length &amp;&amp; nums[right] == target) &#123;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                rightBound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;left+<span class=\"number\">1</span>, right-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 二分查找</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">midSearch</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start &gt; end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (end - start) / <span class=\"number\">2</span> + start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> midSearch(nums, target, mid+<span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> midSearch(nums, target, start, mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"字符串解码","date":"2022-06-04T02:05:59.000Z","_content":"\n[字符串解码](https://leetcode.cn/problems/decode-string/)\n\n给定一个经过编码的字符串，返回它解码后的字符串。\n\n编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。\n\n你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。\n\n此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。\n\n```\n输入：s = \"3[a]2[bc]\"\n输出：\"aaabcbc\"\n```\n\n思路:如果遇到数字,直接累计`count`,遇到字母.结果集直接append, 扫描字符串如果遇到`'['`则寻找其对应的结束符号`']'`,递归计算范围内的字符串,然后根据count和得到的字符串多次append.\n\n代码:\n\n```java\nclass Solution {\n    public String decodeString(String s) {\n        if(s == null || s.isEmpty()){\n            return \"\";\n        }\n        int length = s.length();\n        return calc(s, 0 , length - 1);\n    }\n\t\t// 寻找匹配的结束符号索引\n    public int findEnd(String s, int start) {\n        Stack stack = new Stack();\n        for(int i = start; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == '[') {\n                stack.push(c);\n            }else if(c == ']'){\n                stack.pop();\n                if(stack.isEmpty()) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n    \n    public String calc(String str, int start, int end) {\n        StringBuilder ret = new StringBuilder();\n        StringBuilder count = new StringBuilder();\n        int i = start;\n        while(i <= end){\n            char c = str.charAt(i);\n            if(c >= '0' && c <= '9') {\n                count.append(c);\n            } else if(c == '[') {\n                int tmp = findEnd(str, i);\n                // 递归计算子串\n                String ss = calc(str,i + 1,tmp - 1);\n                if(!count.isEmpty()){\n                    int num = Integer.parseInt(count.toString());\n                    for(int k = 0; k < num; k++){\n                        ret.append(ss);\n                    }\n                }\n                count = new StringBuilder();\n                i = tmp + 1;\n                continue;\n            } else {\n                ret.append(c);\n            }\n            i++;\n        }\n        return ret.toString();\n    }\n}\n```\n\n","source":"_posts/字符串解码.md","raw":"---\ntitle: 字符串解码\ndate: 2022-06-04 10:05:59\ntags:\n  - leetcode\n  - 算法\n---\n\n[字符串解码](https://leetcode.cn/problems/decode-string/)\n\n给定一个经过编码的字符串，返回它解码后的字符串。\n\n编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。\n\n你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。\n\n此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。\n\n```\n输入：s = \"3[a]2[bc]\"\n输出：\"aaabcbc\"\n```\n\n思路:如果遇到数字,直接累计`count`,遇到字母.结果集直接append, 扫描字符串如果遇到`'['`则寻找其对应的结束符号`']'`,递归计算范围内的字符串,然后根据count和得到的字符串多次append.\n\n代码:\n\n```java\nclass Solution {\n    public String decodeString(String s) {\n        if(s == null || s.isEmpty()){\n            return \"\";\n        }\n        int length = s.length();\n        return calc(s, 0 , length - 1);\n    }\n\t\t// 寻找匹配的结束符号索引\n    public int findEnd(String s, int start) {\n        Stack stack = new Stack();\n        for(int i = start; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == '[') {\n                stack.push(c);\n            }else if(c == ']'){\n                stack.pop();\n                if(stack.isEmpty()) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n    \n    public String calc(String str, int start, int end) {\n        StringBuilder ret = new StringBuilder();\n        StringBuilder count = new StringBuilder();\n        int i = start;\n        while(i <= end){\n            char c = str.charAt(i);\n            if(c >= '0' && c <= '9') {\n                count.append(c);\n            } else if(c == '[') {\n                int tmp = findEnd(str, i);\n                // 递归计算子串\n                String ss = calc(str,i + 1,tmp - 1);\n                if(!count.isEmpty()){\n                    int num = Integer.parseInt(count.toString());\n                    for(int k = 0; k < num; k++){\n                        ret.append(ss);\n                    }\n                }\n                count = new StringBuilder();\n                i = tmp + 1;\n                continue;\n            } else {\n                ret.append(c);\n            }\n            i++;\n        }\n        return ret.toString();\n    }\n}\n```\n\n","slug":"字符串解码","published":1,"updated":"2022-06-04T03:10:51.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml100117qh8ad2ca8px","content":"<p><a href=\"https://leetcode.cn/problems/decode-string/\">字符串解码</a></p>\n<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n<p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;3[a]2[bc]&quot;</span><br><span class=\"line\">输出：&quot;aaabcbc&quot;</span><br></pre></td></tr></table></figure>\n\n<p>思路:如果遇到数字,直接累计<code>count</code>,遇到字母.结果集直接append, 扫描字符串如果遇到<code>&#39;[&#39;</code>则寻找其对应的结束符号<code>&#39;]&#39;</code>,递归计算范围内的字符串,然后根据count和得到的字符串多次append.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">decodeString</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"literal\">null</span> || s.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> calc(s, <span class=\"number\">0</span> , length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 寻找匹配的结束符号索引</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findEnd</span><span class=\"params\">(String s, <span class=\"type\">int</span> start)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Stack</span> <span class=\"variable\">stack</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">                stack.push(c);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;]&#x27;</span>)&#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stack.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">calc</span><span class=\"params\">(String str, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= end)&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> str.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                count.append(c);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> findEnd(str, i);</span><br><span class=\"line\">                <span class=\"comment\">// 递归计算子串</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> calc(str,i + <span class=\"number\">1</span>,tmp - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!count.isEmpty())&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(count.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; num; k++)&#123;</span><br><span class=\"line\">                        ret.append(ss);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                count = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                i = tmp + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret.append(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/decode-string/\">字符串解码</a></p>\n<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n<p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;3[a]2[bc]&quot;</span><br><span class=\"line\">输出：&quot;aaabcbc&quot;</span><br></pre></td></tr></table></figure>\n\n<p>思路:如果遇到数字,直接累计<code>count</code>,遇到字母.结果集直接append, 扫描字符串如果遇到<code>&#39;[&#39;</code>则寻找其对应的结束符号<code>&#39;]&#39;</code>,递归计算范围内的字符串,然后根据count和得到的字符串多次append.</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">decodeString</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"literal\">null</span> || s.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> calc(s, <span class=\"number\">0</span> , length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 寻找匹配的结束符号索引</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findEnd</span><span class=\"params\">(String s, <span class=\"type\">int</span> start)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Stack</span> <span class=\"variable\">stack</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">                stack.push(c);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;]&#x27;</span>)&#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stack.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">calc</span><span class=\"params\">(String str, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= end)&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> str.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                count.append(c);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> findEnd(str, i);</span><br><span class=\"line\">                <span class=\"comment\">// 递归计算子串</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> calc(str,i + <span class=\"number\">1</span>,tmp - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!count.isEmpty())&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(count.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; num; k++)&#123;</span><br><span class=\"line\">                        ret.append(ss);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                count = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                i = tmp + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret.append(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"岛屿的最大面积","date":"2022-06-03T13:00:05.000Z","_content":"\n[岛屿的最大面积](https://leetcode.cn/problems/max-area-of-island/)\n\n给你一个大小为 m x n 的二进制矩阵 grid 。\n\n岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。\n\n岛屿的面积是岛上值为 1 的单元格的数目。\n\n计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。\n\n![maxarea1-grid](maxarea1-grid.jpg)\n\n```\n输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n输出：6\n解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。\n```\n\n思路: 遍历二维数组,找到节点为1(即陆地)的位置,然后上下左右递归寻找. 对于寻找到的陆地,标记原数组位置值为2(用2来表示已访问过的位置,防止死循环)\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    int height = 0;\n    int width = 0;\n    public int maxAreaOfIsland(int[][] grid) {\n        height = grid.length;\n        width = grid[0].length;\n\n        for(int i = 0; i < height; i++) {\n            for(int j = 0; j < width; j++) {\n                // 遍历每一个节点更新最值\n                max = Math.max(max, visit(grid, i, j, 0));\n            }\n        }\n        return max;\n    }\n\n    public int visit(int[][] grid, int i, int j, int size) {\n        if(i < 0 || i >= height || j<0 || j >= width){\n            return size;\n        }\n        int curr = size;\n        if(grid[i][j] == 1) {\n            // 访问过的节点标记为已访问\n            grid[i][j] = 2;\n            curr++;\n            // 上下左右遍历\n            curr =visit(grid, i+1, j, curr);\n            curr = visit(grid, i, j+1, curr);\n            curr = visit(grid, i-1, j, curr);\n            curr = visit(grid, i, j-1, curr);\n            return curr;\n        }else{\n            return curr;\n        }\n\n    }\n}\n```\n\n","source":"_posts/岛屿的最大面积.md","raw":"---\ntitle: 岛屿的最大面积\ndate: 2022-06-03 21:00:05\ntags:\n  - leetcode\n  - 算法\n---\n\n[岛屿的最大面积](https://leetcode.cn/problems/max-area-of-island/)\n\n给你一个大小为 m x n 的二进制矩阵 grid 。\n\n岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。\n\n岛屿的面积是岛上值为 1 的单元格的数目。\n\n计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。\n\n![maxarea1-grid](maxarea1-grid.jpg)\n\n```\n输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n输出：6\n解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。\n```\n\n思路: 遍历二维数组,找到节点为1(即陆地)的位置,然后上下左右递归寻找. 对于寻找到的陆地,标记原数组位置值为2(用2来表示已访问过的位置,防止死循环)\n\n代码:\n\n```java\nclass Solution {\n    int max = 0;\n    int height = 0;\n    int width = 0;\n    public int maxAreaOfIsland(int[][] grid) {\n        height = grid.length;\n        width = grid[0].length;\n\n        for(int i = 0; i < height; i++) {\n            for(int j = 0; j < width; j++) {\n                // 遍历每一个节点更新最值\n                max = Math.max(max, visit(grid, i, j, 0));\n            }\n        }\n        return max;\n    }\n\n    public int visit(int[][] grid, int i, int j, int size) {\n        if(i < 0 || i >= height || j<0 || j >= width){\n            return size;\n        }\n        int curr = size;\n        if(grid[i][j] == 1) {\n            // 访问过的节点标记为已访问\n            grid[i][j] = 2;\n            curr++;\n            // 上下左右遍历\n            curr =visit(grid, i+1, j, curr);\n            curr = visit(grid, i, j+1, curr);\n            curr = visit(grid, i-1, j, curr);\n            curr = visit(grid, i, j-1, curr);\n            return curr;\n        }else{\n            return curr;\n        }\n\n    }\n}\n```\n\n","slug":"岛屿的最大面积","published":1,"updated":"2022-06-03T13:04:01.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml100137qh8ejthdj2e","content":"<p><a href=\"https://leetcode.cn/problems/max-area-of-island/\">岛屿的最大面积</a></p>\n<p>给你一个大小为 m x n 的二进制矩阵 grid 。</p>\n<p>岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p>\n<p>岛屿的面积是岛上值为 1 的单元格的数目。</p>\n<p>计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。</p>\n<p><img src=\"/2022/06/03/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/maxarea1-grid.jpg\" alt=\"maxarea1-grid\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。</span><br></pre></td></tr></table></figure>\n\n<p>思路: 遍历二维数组,找到节点为1(即陆地)的位置,然后上下左右递归寻找. 对于寻找到的陆地,标记原数组位置值为2(用2来表示已访问过的位置,防止死循环)</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        height = grid.length;</span><br><span class=\"line\">        width = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; height; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; width; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历每一个节点更新最值</span></span><br><span class=\"line\">                max = Math.max(max, visit(grid, i, j, <span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">visit</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= height || j&lt;<span class=\"number\">0</span> || j &gt;= width)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 访问过的节点标记为已访问</span></span><br><span class=\"line\">            grid[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            curr++;</span><br><span class=\"line\">            <span class=\"comment\">// 上下左右遍历</span></span><br><span class=\"line\">            curr =visit(grid, i+<span class=\"number\">1</span>, j, curr);</span><br><span class=\"line\">            curr = visit(grid, i, j+<span class=\"number\">1</span>, curr);</span><br><span class=\"line\">            curr = visit(grid, i-<span class=\"number\">1</span>, j, curr);</span><br><span class=\"line\">            curr = visit(grid, i, j-<span class=\"number\">1</span>, curr);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/max-area-of-island/\">岛屿的最大面积</a></p>\n<p>给你一个大小为 m x n 的二进制矩阵 grid 。</p>\n<p>岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p>\n<p>岛屿的面积是岛上值为 1 的单元格的数目。</p>\n<p>计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。</p>\n<p><img src=\"/2022/06/03/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/maxarea1-grid.jpg\" alt=\"maxarea1-grid\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。</span><br></pre></td></tr></table></figure>\n\n<p>思路: 遍历二维数组,找到节点为1(即陆地)的位置,然后上下左右递归寻找. 对于寻找到的陆地,标记原数组位置值为2(用2来表示已访问过的位置,防止死循环)</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        height = grid.length;</span><br><span class=\"line\">        width = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; height; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; width; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历每一个节点更新最值</span></span><br><span class=\"line\">                max = Math.max(max, visit(grid, i, j, <span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">visit</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= height || j&lt;<span class=\"number\">0</span> || j &gt;= width)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 访问过的节点标记为已访问</span></span><br><span class=\"line\">            grid[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            curr++;</span><br><span class=\"line\">            <span class=\"comment\">// 上下左右遍历</span></span><br><span class=\"line\">            curr =visit(grid, i+<span class=\"number\">1</span>, j, curr);</span><br><span class=\"line\">            curr = visit(grid, i, j+<span class=\"number\">1</span>, curr);</span><br><span class=\"line\">            curr = visit(grid, i-<span class=\"number\">1</span>, j, curr);</span><br><span class=\"line\">            curr = visit(grid, i, j-<span class=\"number\">1</span>, curr);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"旋转图像","date":"2022-06-03T01:57:52.000Z","_content":"\n[旋转图像](https://leetcode.cn/problems/rotate-image/)\n\n给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。\n\n你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。\n\n![mat1](mat1.jpg)\n\n```\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[[7,4,1],[8,5,2],[9,6,3]]\n```\n\n\n\n思路：先旋转每一层，以首行的n-1个元素作为出发点，分别旋转（记录当前值，然后寻找需要放置到当前位置的值的位置，更新值并更新位置到计算的新位置。持续3次，最后一个位置以缓存值更新即可）。然后递归旋转内部即可。重要的地方：根据当前坐标计算需要替换值的坐标存在以下关系（与层级无关）：`[row, column] - > [size - column - 1, row]`\n\n代码：\n\n```java\nclass Solution {\n    int size = 0;\n    public void rotate(int[][] matrix) {\n        size = matrix.length;\n        rotate(matrix, 0);\n    }\n    public void rotate(int[][] matrix, int level) {\n        if(level >= size / 2){\n            return;\n        }\n        // 遍历到倒数第二个即可，最后一个会在第一个旋转时替换\n        for(int i = level; i < size - level - 1; i++) {\n            int row = level;\n            int column = i;\n            // 缓存起点值\n            int cache = matrix[row][column];\n            // 旋转3次，最后一次以缓存值更新\n            for(int m = 0; m < 3; m++) {\n                // 计算当前位置应由哪个位置的值来覆盖\n                int[] pos =findBefore(row, column);\n                matrix[row][column] = matrix[pos[0]][pos[1]];\n                // 更新位置\n                row = pos[0];\n                column = pos[1];\n            }\n            matrix[row][column] = cache;\n        }\n        // 计算内层\n        rotate(matrix, level+1);\n    }\n\n    public int[] findBefore(int row, int column){\n        return new int[]{size-column-1,row};\n    }\n}\n```\n\n","source":"_posts/旋转图像.md","raw":"---\ntitle: 旋转图像\ndate: 2022-06-03 09:57:52\ntags:\n  - leetcode\n  - 算法\n  - 迭代\n  - 数组\n---\n\n[旋转图像](https://leetcode.cn/problems/rotate-image/)\n\n给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。\n\n你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。\n\n![mat1](mat1.jpg)\n\n```\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[[7,4,1],[8,5,2],[9,6,3]]\n```\n\n\n\n思路：先旋转每一层，以首行的n-1个元素作为出发点，分别旋转（记录当前值，然后寻找需要放置到当前位置的值的位置，更新值并更新位置到计算的新位置。持续3次，最后一个位置以缓存值更新即可）。然后递归旋转内部即可。重要的地方：根据当前坐标计算需要替换值的坐标存在以下关系（与层级无关）：`[row, column] - > [size - column - 1, row]`\n\n代码：\n\n```java\nclass Solution {\n    int size = 0;\n    public void rotate(int[][] matrix) {\n        size = matrix.length;\n        rotate(matrix, 0);\n    }\n    public void rotate(int[][] matrix, int level) {\n        if(level >= size / 2){\n            return;\n        }\n        // 遍历到倒数第二个即可，最后一个会在第一个旋转时替换\n        for(int i = level; i < size - level - 1; i++) {\n            int row = level;\n            int column = i;\n            // 缓存起点值\n            int cache = matrix[row][column];\n            // 旋转3次，最后一次以缓存值更新\n            for(int m = 0; m < 3; m++) {\n                // 计算当前位置应由哪个位置的值来覆盖\n                int[] pos =findBefore(row, column);\n                matrix[row][column] = matrix[pos[0]][pos[1]];\n                // 更新位置\n                row = pos[0];\n                column = pos[1];\n            }\n            matrix[row][column] = cache;\n        }\n        // 计算内层\n        rotate(matrix, level+1);\n    }\n\n    public int[] findBefore(int row, int column){\n        return new int[]{size-column-1,row};\n    }\n}\n```\n\n","slug":"旋转图像","published":1,"updated":"2022-06-03T02:05:38.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml200157qh83nopgaq6","content":"<p><a href=\"https://leetcode.cn/problems/rotate-image/\">旋转图像</a></p>\n<p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p>\n<p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p>\n<p><img src=\"/2022/06/03/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/mat1.jpg\" alt=\"mat1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class=\"line\">输出：[[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：先旋转每一层，以首行的n-1个元素作为出发点，分别旋转（记录当前值，然后寻找需要放置到当前位置的值的位置，更新值并更新位置到计算的新位置。持续3次，最后一个位置以缓存值更新即可）。然后递归旋转内部即可。重要的地方：根据当前坐标计算需要替换值的坐标存在以下关系（与层级无关）：<code>[row, column] - &gt; [size - column - 1, row]</code></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix)</span> &#123;</span><br><span class=\"line\">        size = matrix.length;</span><br><span class=\"line\">        rotate(matrix, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level &gt;= size / <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历到倒数第二个即可，最后一个会在第一个旋转时替换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> level; i &lt; size - level - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> level;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"comment\">// 缓存起点值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">cache</span> <span class=\"operator\">=</span> matrix[row][column];</span><br><span class=\"line\">            <span class=\"comment\">// 旋转3次，最后一次以缓存值更新</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; m &lt; <span class=\"number\">3</span>; m++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 计算当前位置应由哪个位置的值来覆盖</span></span><br><span class=\"line\">                <span class=\"type\">int</span>[] pos =findBefore(row, column);</span><br><span class=\"line\">                matrix[row][column] = matrix[pos[<span class=\"number\">0</span>]][pos[<span class=\"number\">1</span>]];</span><br><span class=\"line\">                <span class=\"comment\">// 更新位置</span></span><br><span class=\"line\">                row = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">                column = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            matrix[row][column] = cache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 计算内层</span></span><br><span class=\"line\">        rotate(matrix, level+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findBefore(<span class=\"type\">int</span> row, <span class=\"type\">int</span> column)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;size-column-<span class=\"number\">1</span>,row&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/rotate-image/\">旋转图像</a></p>\n<p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p>\n<p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p>\n<p><img src=\"/2022/06/03/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/mat1.jpg\" alt=\"mat1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class=\"line\">输出：[[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：先旋转每一层，以首行的n-1个元素作为出发点，分别旋转（记录当前值，然后寻找需要放置到当前位置的值的位置，更新值并更新位置到计算的新位置。持续3次，最后一个位置以缓存值更新即可）。然后递归旋转内部即可。重要的地方：根据当前坐标计算需要替换值的坐标存在以下关系（与层级无关）：<code>[row, column] - &gt; [size - column - 1, row]</code></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix)</span> &#123;</span><br><span class=\"line\">        size = matrix.length;</span><br><span class=\"line\">        rotate(matrix, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level &gt;= size / <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历到倒数第二个即可，最后一个会在第一个旋转时替换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> level; i &lt; size - level - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> level;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"comment\">// 缓存起点值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">cache</span> <span class=\"operator\">=</span> matrix[row][column];</span><br><span class=\"line\">            <span class=\"comment\">// 旋转3次，最后一次以缓存值更新</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; m &lt; <span class=\"number\">3</span>; m++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 计算当前位置应由哪个位置的值来覆盖</span></span><br><span class=\"line\">                <span class=\"type\">int</span>[] pos =findBefore(row, column);</span><br><span class=\"line\">                matrix[row][column] = matrix[pos[<span class=\"number\">0</span>]][pos[<span class=\"number\">1</span>]];</span><br><span class=\"line\">                <span class=\"comment\">// 更新位置</span></span><br><span class=\"line\">                row = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">                column = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            matrix[row][column] = cache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 计算内层</span></span><br><span class=\"line\">        rotate(matrix, level+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findBefore(<span class=\"type\">int</span> row, <span class=\"type\">int</span> column)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;size-column-<span class=\"number\">1</span>,row&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"最小覆盖子串","date":"2022-06-01T13:26:57.000Z","_content":"\n[最小覆盖字串](https://leetcode.cn/problems/minimum-window-substring/)\n\n给你一个字符串 `s` 、一个字符串 `t` 。返回 `s` 中涵盖 `t` 所有字符的最小子串。如果 `s` 中不存在涵盖 `t` 所有字符的子串，则返回空字符串 `\"\"` 。\n\n**注意：**\n\n- 对于 `t` 中重复字符，我们寻找的子字符串中该字符数量必须不少于 `t` 中该字符数量。\n- 如果 `s` 中存在这样的子串，我们保证它是唯一的答案。\n\n```\n输入：s = \"ADOBECODEBANC\", t = \"ABC\"\n输出：\"BANC\"\n```\n\n\n\n思路：采用滑动窗口，通过hash `t`字符串每个字符的频率，同样在滑动窗口调整时维护`s`的字符频率hash。关于窗口的调整策略：先调整右边界，直到所有节点都已包含，可以更新最小长度。然后调整左边界，如果移动后依旧包含则更新最小长度。如果不包含调整右边界直至继续包含目标串。按照这个策略调整窗口并更新`s`的hash。右边界在移动的时候如果能保持hash数量大于t串hash对应数量则表示包含。另外全部包含需要一个额外变量存储length，通过每一次窗口调整更新该变量，如果该变量长度等于`t`串长度则表示已全包含（更新策略，如果右边界判断hash数量大于t串hash对应数量，则length + t中该字符数量，如果左边界判断hash数量小于t串hash对应数量，则length - 1）。\n\n代码：\n\n```java\n// 待补充。。。\n```\n\n","source":"_posts/最小覆盖子串.md","raw":"---\ntitle: 最小覆盖子串\ndate: 2022-06-01 21:26:57\ntags:\n  - leedcode\n  - 算法\n  - 滑动窗口\n---\n\n[最小覆盖字串](https://leetcode.cn/problems/minimum-window-substring/)\n\n给你一个字符串 `s` 、一个字符串 `t` 。返回 `s` 中涵盖 `t` 所有字符的最小子串。如果 `s` 中不存在涵盖 `t` 所有字符的子串，则返回空字符串 `\"\"` 。\n\n**注意：**\n\n- 对于 `t` 中重复字符，我们寻找的子字符串中该字符数量必须不少于 `t` 中该字符数量。\n- 如果 `s` 中存在这样的子串，我们保证它是唯一的答案。\n\n```\n输入：s = \"ADOBECODEBANC\", t = \"ABC\"\n输出：\"BANC\"\n```\n\n\n\n思路：采用滑动窗口，通过hash `t`字符串每个字符的频率，同样在滑动窗口调整时维护`s`的字符频率hash。关于窗口的调整策略：先调整右边界，直到所有节点都已包含，可以更新最小长度。然后调整左边界，如果移动后依旧包含则更新最小长度。如果不包含调整右边界直至继续包含目标串。按照这个策略调整窗口并更新`s`的hash。右边界在移动的时候如果能保持hash数量大于t串hash对应数量则表示包含。另外全部包含需要一个额外变量存储length，通过每一次窗口调整更新该变量，如果该变量长度等于`t`串长度则表示已全包含（更新策略，如果右边界判断hash数量大于t串hash对应数量，则length + t中该字符数量，如果左边界判断hash数量小于t串hash对应数量，则length - 1）。\n\n代码：\n\n```java\n// 待补充。。。\n```\n\n","slug":"最小覆盖子串","published":1,"updated":"2022-06-01T13:57:08.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml200187qh8ajx16ua0","content":"<p><a href=\"https://leetcode.cn/problems/minimum-window-substring/\">最小覆盖字串</a></p>\n<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>\n<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class=\"line\">输出：&quot;BANC&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：采用滑动窗口，通过hash <code>t</code>字符串每个字符的频率，同样在滑动窗口调整时维护<code>s</code>的字符频率hash。关于窗口的调整策略：先调整右边界，直到所有节点都已包含，可以更新最小长度。然后调整左边界，如果移动后依旧包含则更新最小长度。如果不包含调整右边界直至继续包含目标串。按照这个策略调整窗口并更新<code>s</code>的hash。右边界在移动的时候如果能保持hash数量大于t串hash对应数量则表示包含。另外全部包含需要一个额外变量存储length，通过每一次窗口调整更新该变量，如果该变量长度等于<code>t</code>串长度则表示已全包含（更新策略，如果右边界判断hash数量大于t串hash对应数量，则length + t中该字符数量，如果左边界判断hash数量小于t串hash对应数量，则length - 1）。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 待补充。。。</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/minimum-window-substring/\">最小覆盖字串</a></p>\n<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>\n<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class=\"line\">输出：&quot;BANC&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：采用滑动窗口，通过hash <code>t</code>字符串每个字符的频率，同样在滑动窗口调整时维护<code>s</code>的字符频率hash。关于窗口的调整策略：先调整右边界，直到所有节点都已包含，可以更新最小长度。然后调整左边界，如果移动后依旧包含则更新最小长度。如果不包含调整右边界直至继续包含目标串。按照这个策略调整窗口并更新<code>s</code>的hash。右边界在移动的时候如果能保持hash数量大于t串hash对应数量则表示包含。另外全部包含需要一个额外变量存储length，通过每一次窗口调整更新该变量，如果该变量长度等于<code>t</code>串长度则表示已全包含（更新策略，如果右边界判断hash数量大于t串hash对应数量，则length + t中该字符数量，如果左边界判断hash数量小于t串hash对应数量，则length - 1）。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 待补充。。。</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"最小路径和","date":"2022-06-02T08:41:05.000Z","_content":"\n[最小路径和](https://leetcode.cn/problems/minimum-path-sum/)\n\n给定一个包含非负整数的 `*m* x *n*` 网格 `grid` ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n**说明：**每次只能向下或者向右移动一步。\n\n```\n输入：grid = [[1,3,1],[1,5,1],[4,2,1]]\n输出：7\n解释：因为路径 1→3→1→1→1 的总和最小。\n```\n\n思路1: 递归，当前位置到结束的最小路径和等于往左往右走较小和加上当前路径值即可\n\n代码（思路1）：\n\n```java\nclass Solution {\n    int width = 0;\n    int height = 0;\n    public int minPathSum(int[][] grid) {\n        width = grid[0].length;\n        height = grid.length;\n        return minPath(grid, 0, 0);\n    }\n\n    public int minPath(int[][] grid, int row, int column) {\n        if(row == height || column == width) {\n            return Integer.MAX_VALUE;\n        }\n        if(row == height-1 && column == width-1){\n            return grid[row][column];\n        }\n        int right = minPath(grid, row+1, column);\n        int down = minPath(grid, row, column + 1);\n        return Math.min(right, down) + grid[row][column];\n    }\n}\n```\n\n\n\n思路2: 思路1在leetcode中超时，所以通过dp来做，可以维护dp数组表示当前节点到结束的最短路径和\n\n```java\nclass Solution {\n    \n    public int minPathSum(int[][] grid) {\n        int width = grid[0].length;\n        int height = grid.length;\n        int[][] dp = new int[height][width];\n        for(int row = height - 1; row >= 0; row--) {\n            for(int column = width - 1; column >= 0; column--) {\n                if(row == height - 1 && column == width - 1) {\n                    dp[row][column] = grid[row][column];\n                }else{\n                    int min = Integer.MAX_VALUE;\n                    if(column < width - 1){\n                        min = dp[row][column+1];\n                    }\n                    if(row < height - 1){\n                        min = Math.min(min, dp[row+1][column]);\n                    }\n                    dp[row][column] = min + grid[row][column];\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n```\n\n\n\n","source":"_posts/最小路径和.md","raw":"---\ntitle: 最小路径和\ndate: 2022-06-02 16:41:05\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[最小路径和](https://leetcode.cn/problems/minimum-path-sum/)\n\n给定一个包含非负整数的 `*m* x *n*` 网格 `grid` ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n**说明：**每次只能向下或者向右移动一步。\n\n```\n输入：grid = [[1,3,1],[1,5,1],[4,2,1]]\n输出：7\n解释：因为路径 1→3→1→1→1 的总和最小。\n```\n\n思路1: 递归，当前位置到结束的最小路径和等于往左往右走较小和加上当前路径值即可\n\n代码（思路1）：\n\n```java\nclass Solution {\n    int width = 0;\n    int height = 0;\n    public int minPathSum(int[][] grid) {\n        width = grid[0].length;\n        height = grid.length;\n        return minPath(grid, 0, 0);\n    }\n\n    public int minPath(int[][] grid, int row, int column) {\n        if(row == height || column == width) {\n            return Integer.MAX_VALUE;\n        }\n        if(row == height-1 && column == width-1){\n            return grid[row][column];\n        }\n        int right = minPath(grid, row+1, column);\n        int down = minPath(grid, row, column + 1);\n        return Math.min(right, down) + grid[row][column];\n    }\n}\n```\n\n\n\n思路2: 思路1在leetcode中超时，所以通过dp来做，可以维护dp数组表示当前节点到结束的最短路径和\n\n```java\nclass Solution {\n    \n    public int minPathSum(int[][] grid) {\n        int width = grid[0].length;\n        int height = grid.length;\n        int[][] dp = new int[height][width];\n        for(int row = height - 1; row >= 0; row--) {\n            for(int column = width - 1; column >= 0; column--) {\n                if(row == height - 1 && column == width - 1) {\n                    dp[row][column] = grid[row][column];\n                }else{\n                    int min = Integer.MAX_VALUE;\n                    if(column < width - 1){\n                        min = dp[row][column+1];\n                    }\n                    if(row < height - 1){\n                        min = Math.min(min, dp[row+1][column]);\n                    }\n                    dp[row][column] = min + grid[row][column];\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n```\n\n\n\n","slug":"最小路径和","published":1,"updated":"2022-06-02T08:54:06.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml300197qh8ejj280o3","content":"<p><a href=\"https://leetcode.cn/problems/minimum-path-sum/\">最小路径和</a></p>\n<p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class=\"line\">输出：7</span><br><span class=\"line\">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure>\n\n<p>思路1: 递归，当前位置到结束的最小路径和等于往左往右走较小和加上当前路径值即可</p>\n<p>代码（思路1）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        width = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        height = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minPath(grid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPath</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> row, <span class=\"type\">int</span> column)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row == height || column == width) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row == height-<span class=\"number\">1</span> &amp;&amp; column == width-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> grid[row][column];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> minPath(grid, row+<span class=\"number\">1</span>, column);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> minPath(grid, row, column + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.min(right, down) + grid[row][column];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路2: 思路1在leetcode中超时，所以通过dp来做，可以维护dp数组表示当前节点到结束的最短路径和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> grid.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[height][width];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> height - <span class=\"number\">1</span>; row &gt;= <span class=\"number\">0</span>; row--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> width - <span class=\"number\">1</span>; column &gt;= <span class=\"number\">0</span>; column--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(row == height - <span class=\"number\">1</span> &amp;&amp; column == width - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dp[row][column] = grid[row][column];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(column &lt; width - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        min = dp[row][column+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row &lt; height - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        min = Math.min(min, dp[row+<span class=\"number\">1</span>][column]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[row][column] = min + grid[row][column];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/minimum-path-sum/\">最小路径和</a></p>\n<p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class=\"line\">输出：7</span><br><span class=\"line\">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure>\n\n<p>思路1: 递归，当前位置到结束的最小路径和等于往左往右走较小和加上当前路径值即可</p>\n<p>代码（思路1）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        width = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        height = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minPath(grid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPath</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> row, <span class=\"type\">int</span> column)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row == height || column == width) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row == height-<span class=\"number\">1</span> &amp;&amp; column == width-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> grid[row][column];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> minPath(grid, row+<span class=\"number\">1</span>, column);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> minPath(grid, row, column + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.min(right, down) + grid[row][column];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路2: 思路1在leetcode中超时，所以通过dp来做，可以维护dp数组表示当前节点到结束的最短路径和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> grid.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[height][width];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> height - <span class=\"number\">1</span>; row &gt;= <span class=\"number\">0</span>; row--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">column</span> <span class=\"operator\">=</span> width - <span class=\"number\">1</span>; column &gt;= <span class=\"number\">0</span>; column--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(row == height - <span class=\"number\">1</span> &amp;&amp; column == width - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dp[row][column] = grid[row][column];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(column &lt; width - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        min = dp[row][column+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row &lt; height - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        min = Math.min(min, dp[row+<span class=\"number\">1</span>][column]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dp[row][column] = min + grid[row][column];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"最长有效括号","date":"2022-06-01T13:11:25.000Z","_content":"\n[最长有效括号](https://leetcode.cn/problems/longest-valid-parentheses/)\n\n给你一个只包含 `'('` 和 `')'` 的字符串，找出最长有效（格式正确且连续）括号子串的长度。\n\n```\n输入：s = \"(()\"\n输出：2\n解释：最长有效括号子串是 \"()\"\n\n输入：s = \")()())\"\n输出：4\n解释：最长有效括号子串是 \"()()\"\n```\n\n\n\n思路：\n\n1. 暴力\n\n   遍历数组，以每一个索引开始寻找最长的合法括号串。然后找出最大的长度返回\n\n2. dp\n\n   定义：dp[i]：以索引`i`结尾的元素的最长合法括号串\n\n   存在以下递推关系：\n\n   dp[i] = dp[i-2] + 2  // 如果str[i] 与 str[i - 1] 为：`()`\n\n   dp[i] = dp[i-1] + 2 + dp[i - 2 - dp[i-1]]  // 如果str[i] = `')'` && str[i - dp[i-1] - 1] = `'('`\n\n代码：\n\n```java\nclass Solution {\n    public int longestValidParentheses(String s) {\n        char sc[] = s.toCharArray();\n        int length = sc.length;\n        int dp[] = new int[length];\n        int max = 0;\n        for(int i=1;i<length;i++){\n            // 状况1\n            if(sc[i]==')'&&sc[i-1]=='('){\n                int pos = i-2;\n                if(pos<0){\n                    dp[i] = 2;\n                } else{\n                    // 更新dp\n                    dp[i] = dp[pos] + 2;\n                }\n            }\n            // 状况2\n            if(sc[i]==')'&&sc[i-1]==')'){\n                int pos = i-dp[i-1]-1;\n                if(pos>=0&&sc[pos]=='('){\n                    // 更新dp\n                    dp[i] = dp[i-1] + 2;\n                    // 加前面的 重要：((()))(()), 如果此时索引为9，dp[i-1] = 2 (), 前面需要加的就是((()))\n                    if(dp[i-1]!=0&&pos-1>=0){\n                        dp[i] += dp[pos-1];\n                    }\n                }\n            }\n            max = Math.max(max,dp[i]);\n        }\n        return max;\n    }\n}\n```\n\n","source":"_posts/最长有效括号.md","raw":"---\ntitle: 最长有效括号\ndate: 2022-06-01 21:11:25\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[最长有效括号](https://leetcode.cn/problems/longest-valid-parentheses/)\n\n给你一个只包含 `'('` 和 `')'` 的字符串，找出最长有效（格式正确且连续）括号子串的长度。\n\n```\n输入：s = \"(()\"\n输出：2\n解释：最长有效括号子串是 \"()\"\n\n输入：s = \")()())\"\n输出：4\n解释：最长有效括号子串是 \"()()\"\n```\n\n\n\n思路：\n\n1. 暴力\n\n   遍历数组，以每一个索引开始寻找最长的合法括号串。然后找出最大的长度返回\n\n2. dp\n\n   定义：dp[i]：以索引`i`结尾的元素的最长合法括号串\n\n   存在以下递推关系：\n\n   dp[i] = dp[i-2] + 2  // 如果str[i] 与 str[i - 1] 为：`()`\n\n   dp[i] = dp[i-1] + 2 + dp[i - 2 - dp[i-1]]  // 如果str[i] = `')'` && str[i - dp[i-1] - 1] = `'('`\n\n代码：\n\n```java\nclass Solution {\n    public int longestValidParentheses(String s) {\n        char sc[] = s.toCharArray();\n        int length = sc.length;\n        int dp[] = new int[length];\n        int max = 0;\n        for(int i=1;i<length;i++){\n            // 状况1\n            if(sc[i]==')'&&sc[i-1]=='('){\n                int pos = i-2;\n                if(pos<0){\n                    dp[i] = 2;\n                } else{\n                    // 更新dp\n                    dp[i] = dp[pos] + 2;\n                }\n            }\n            // 状况2\n            if(sc[i]==')'&&sc[i-1]==')'){\n                int pos = i-dp[i-1]-1;\n                if(pos>=0&&sc[pos]=='('){\n                    // 更新dp\n                    dp[i] = dp[i-1] + 2;\n                    // 加前面的 重要：((()))(()), 如果此时索引为9，dp[i-1] = 2 (), 前面需要加的就是((()))\n                    if(dp[i-1]!=0&&pos-1>=0){\n                        dp[i] += dp[pos-1];\n                    }\n                }\n            }\n            max = Math.max(max,dp[i]);\n        }\n        return max;\n    }\n}\n```\n\n","slug":"最长有效括号","published":1,"updated":"2022-06-01T13:27:56.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml3001a7qh8dbl8cbk9","content":"<p><a href=\"https://leetcode.cn/problems/longest-valid-parentheses/\">最长有效括号</a></p>\n<p>给你一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;(()&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：最长有效括号子串是 &quot;()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输入：s = &quot;)()())&quot;</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长有效括号子串是 &quot;()()&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：</p>\n<ol>\n<li><p>暴力</p>\n<p>遍历数组，以每一个索引开始寻找最长的合法括号串。然后找出最大的长度返回</p>\n</li>\n<li><p>dp</p>\n<p>定义：dp[i]：以索引<code>i</code>结尾的元素的最长合法括号串</p>\n<p>存在以下递推关系：</p>\n<p>dp[i] &#x3D; dp[i-2] + 2  &#x2F;&#x2F; 如果str[i] 与 str[i - 1] 为：<code>()</code></p>\n<p>dp[i] &#x3D; dp[i-1] + 2 + dp[i - 2 - dp[i-1]]  &#x2F;&#x2F; 如果str[i] &#x3D; <code>&#39;)&#39;</code> &amp;&amp; str[i - dp[i-1] - 1] &#x3D; <code>&#39;(&#39;</code></p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestValidParentheses</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> sc[] = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> sc.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> dp[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 状况1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sc[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;sc[i-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> i-<span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pos&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新dp</span></span><br><span class=\"line\">                    dp[i] = dp[pos] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 状况2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sc[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;sc[i-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;)&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> i-dp[i-<span class=\"number\">1</span>]-<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pos&gt;=<span class=\"number\">0</span>&amp;&amp;sc[pos]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新dp</span></span><br><span class=\"line\">                    dp[i] = dp[i-<span class=\"number\">1</span>] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 加前面的 重要：((()))(()), 如果此时索引为9，dp[i-1] = 2 (), 前面需要加的就是((()))</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[i-<span class=\"number\">1</span>]!=<span class=\"number\">0</span>&amp;&amp;pos-<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        dp[i] += dp[pos-<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/longest-valid-parentheses/\">最长有效括号</a></p>\n<p>给你一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;(()&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：最长有效括号子串是 &quot;()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输入：s = &quot;)()())&quot;</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长有效括号子串是 &quot;()()&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：</p>\n<ol>\n<li><p>暴力</p>\n<p>遍历数组，以每一个索引开始寻找最长的合法括号串。然后找出最大的长度返回</p>\n</li>\n<li><p>dp</p>\n<p>定义：dp[i]：以索引<code>i</code>结尾的元素的最长合法括号串</p>\n<p>存在以下递推关系：</p>\n<p>dp[i] &#x3D; dp[i-2] + 2  &#x2F;&#x2F; 如果str[i] 与 str[i - 1] 为：<code>()</code></p>\n<p>dp[i] &#x3D; dp[i-1] + 2 + dp[i - 2 - dp[i-1]]  &#x2F;&#x2F; 如果str[i] &#x3D; <code>&#39;)&#39;</code> &amp;&amp; str[i - dp[i-1] - 1] &#x3D; <code>&#39;(&#39;</code></p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestValidParentheses</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> sc[] = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> sc.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> dp[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 状况1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sc[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;sc[i-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> i-<span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pos&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新dp</span></span><br><span class=\"line\">                    dp[i] = dp[pos] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 状况2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sc[i]==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;sc[i-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;)&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> i-dp[i-<span class=\"number\">1</span>]-<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pos&gt;=<span class=\"number\">0</span>&amp;&amp;sc[pos]==<span class=\"string\">&#x27;(&#x27;</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新dp</span></span><br><span class=\"line\">                    dp[i] = dp[i-<span class=\"number\">1</span>] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 加前面的 重要：((()))(()), 如果此时索引为9，dp[i-1] = 2 (), 前面需要加的就是((()))</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[i-<span class=\"number\">1</span>]!=<span class=\"number\">0</span>&amp;&amp;pos-<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        dp[i] += dp[pos-<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"最长连续序列","date":"2022-06-03T12:37:10.000Z","_content":"\n[最长连续序列](https://leetcode.cn/problems/longest-consecutive-sequence/)\n\n给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。\n\n请你设计并实现时间复杂度为 O(n) 的算法解决此问题。\n\n```\n输入：nums = [100,4,200,1,3,2]\n输出：4\n解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。\n```\n\n\n\n思路: 可以直接排序,然后每一个节点看是否存在(累加一直到不存在).但题目要求时间复杂度O(n).所以采用hash优化的方式\n\n代码:\n\n```java\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        int max = 0;\n        // 创建set,便于后续判断是否包含\n        Set<Integer> set = new HashSet();\n        for(int num : nums) {\n            set.add(num);\n        }\n        for(int num : nums) {\n            int tmp = num;\n            int count = 0;\n            // !重要优化点! 如果节点前驱在数组中存在则跳过这次寻找不连续点\n            if(set.contains(tmp-1)){\n                continue;\n            }\n            // 循环寻找直到不连续,更新最值\n            while(set.contains(tmp)){\n                count++;\n                tmp++;\n            }\n            max = Math.max(max, count);\n        }\n        return max;\n    }\n}\n```\n\n","source":"_posts/最长连续序列.md","raw":"---\ntitle: 最长连续序列\ndate: 2022-06-03 20:37:10\ntags:\n  - leetcode\n  - 算法\n  - hash\n  - 优化\n---\n\n[最长连续序列](https://leetcode.cn/problems/longest-consecutive-sequence/)\n\n给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。\n\n请你设计并实现时间复杂度为 O(n) 的算法解决此问题。\n\n```\n输入：nums = [100,4,200,1,3,2]\n输出：4\n解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。\n```\n\n\n\n思路: 可以直接排序,然后每一个节点看是否存在(累加一直到不存在).但题目要求时间复杂度O(n).所以采用hash优化的方式\n\n代码:\n\n```java\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        int max = 0;\n        // 创建set,便于后续判断是否包含\n        Set<Integer> set = new HashSet();\n        for(int num : nums) {\n            set.add(num);\n        }\n        for(int num : nums) {\n            int tmp = num;\n            int count = 0;\n            // !重要优化点! 如果节点前驱在数组中存在则跳过这次寻找不连续点\n            if(set.contains(tmp-1)){\n                continue;\n            }\n            // 循环寻找直到不连续,更新最值\n            while(set.contains(tmp)){\n                count++;\n                tmp++;\n            }\n            max = Math.max(max, count);\n        }\n        return max;\n    }\n}\n```\n\n","slug":"最长连续序列","published":1,"updated":"2022-06-03T12:41:17.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml4001d7qh83erw7z6c","content":"<p><a href=\"https://leetcode.cn/problems/longest-consecutive-sequence/\">最长连续序列</a></p>\n<p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p>\n<p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [100,4,200,1,3,2]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 可以直接排序,然后每一个节点看是否存在(累加一直到不存在).但题目要求时间复杂度O(n).所以采用hash优化的方式</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestConsecutive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建set,便于后续判断是否包含</span></span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            set.add(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> num;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// !重要优化点! 如果节点前驱在数组中存在则跳过这次寻找不连续点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(set.contains(tmp-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 循环寻找直到不连续,更新最值</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(set.contains(tmp))&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                tmp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/longest-consecutive-sequence/\">最长连续序列</a></p>\n<p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p>\n<p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [100,4,200,1,3,2]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路: 可以直接排序,然后每一个节点看是否存在(累加一直到不存在).但题目要求时间复杂度O(n).所以采用hash优化的方式</p>\n<p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestConsecutive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建set,便于后续判断是否包含</span></span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            set.add(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> num;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// !重要优化点! 如果节点前驱在数组中存在则跳过这次寻找不连续点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(set.contains(tmp-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 循环寻找直到不连续,更新最值</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(set.contains(tmp))&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                tmp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"最长重复子数组","date":"2022-06-03T02:39:22.000Z","_content":"\n[最长重复子数组](https://leetcode.cn/problems/maximum-length-of-repeated-subarray/)\n\n给两个整数数组 `nums1` 和 `nums2` ，返回 *两个数组中 **公共的** 、长度最长的子数组的长度* \n\n```\n输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n输出：3\n解释：长度最长的公共子数组是 [3,2,1] 。\n```\n\n思路：定义`dp[i][j]`数组为第一个数组`i`索引与第二个数组`j`索引结尾子数组最大公共长度。同时存在状态转移关系：\n\n`dp[i][j] = dp[i-1][j-1]+1 when nums1[i] == nums2[j] and i != 0 and j != 0`\n\n`dp[i][j] = 1 when nums1[i] == nums2[j] and i==0 || j == 0`\n\n`dp[i][j] = 0 when nums1[i] != nums2[j] and i==0 || j == 0`\n\n\n\n代码：\n\n```java\nclass Solution {\n    int max = 0;\n    public int findLength(int[] nums1, int[] nums2) {\n        int l1 = nums1.length;\n        int l2 = nums2.length;\n        int[][] dp = new int[l1][l2];\n        for(int i = 0; i < l1; i++) {\n            for(int j = 0; j < l2; j++) {\n                boolean csame = nums1[i] == nums2[j];\n                if(i == 0 || j == 0) {\n                    dp[i][j] = csame ? 1 : 0;\n                } else {\n                    if(csame) {\n                        dp[i][j] = dp[i-1][j-1] + 1;\n                    } else {\n                        dp[i][j] = 0;\n                    }\n                }\n                max = Math.max(dp[i][j], max);\n            }\n        }\n        return max;\n    }\n}\n```\n\n","source":"_posts/最长重复子数组.md","raw":"---\ntitle: 最长重复子数组\ndate: 2022-06-03 10:39:22\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[最长重复子数组](https://leetcode.cn/problems/maximum-length-of-repeated-subarray/)\n\n给两个整数数组 `nums1` 和 `nums2` ，返回 *两个数组中 **公共的** 、长度最长的子数组的长度* \n\n```\n输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n输出：3\n解释：长度最长的公共子数组是 [3,2,1] 。\n```\n\n思路：定义`dp[i][j]`数组为第一个数组`i`索引与第二个数组`j`索引结尾子数组最大公共长度。同时存在状态转移关系：\n\n`dp[i][j] = dp[i-1][j-1]+1 when nums1[i] == nums2[j] and i != 0 and j != 0`\n\n`dp[i][j] = 1 when nums1[i] == nums2[j] and i==0 || j == 0`\n\n`dp[i][j] = 0 when nums1[i] != nums2[j] and i==0 || j == 0`\n\n\n\n代码：\n\n```java\nclass Solution {\n    int max = 0;\n    public int findLength(int[] nums1, int[] nums2) {\n        int l1 = nums1.length;\n        int l2 = nums2.length;\n        int[][] dp = new int[l1][l2];\n        for(int i = 0; i < l1; i++) {\n            for(int j = 0; j < l2; j++) {\n                boolean csame = nums1[i] == nums2[j];\n                if(i == 0 || j == 0) {\n                    dp[i][j] = csame ? 1 : 0;\n                } else {\n                    if(csame) {\n                        dp[i][j] = dp[i-1][j-1] + 1;\n                    } else {\n                        dp[i][j] = 0;\n                    }\n                }\n                max = Math.max(dp[i][j], max);\n            }\n        }\n        return max;\n    }\n}\n```\n\n","slug":"最长重复子数组","published":1,"updated":"2022-06-03T04:07:27.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml4001f7qh80pc5dird","content":"<p><a href=\"https://leetcode.cn/problems/maximum-length-of-repeated-subarray/\">最长重复子数组</a></p>\n<p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>两个数组中 <strong>公共的</strong> 、长度最长的子数组的长度</em> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：长度最长的公共子数组是 [3,2,1] 。</span><br></pre></td></tr></table></figure>\n\n<p>思路：定义<code>dp[i][j]</code>数组为第一个数组<code>i</code>索引与第二个数组<code>j</code>索引结尾子数组最大公共长度。同时存在状态转移关系：</p>\n<p><code>dp[i][j] = dp[i-1][j-1]+1 when nums1[i] == nums2[j] and i != 0 and j != 0</code></p>\n<p><code>dp[i][j] = 1 when nums1[i] == nums2[j] and i==0 || j == 0</code></p>\n<p><code>dp[i][j] = 0 when nums1[i] != nums2[j] and i==0 || j == 0</code></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findLength</span><span class=\"params\">(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l1</span> <span class=\"operator\">=</span> nums1.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l2</span> <span class=\"operator\">=</span> nums2.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[l1][l2];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; l1; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; l2; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">csame</span> <span class=\"operator\">=</span> nums1[i] == nums2[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[i][j] = csame ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(csame) &#123;</span><br><span class=\"line\">                        dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                max = Math.max(dp[i][j], max);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/maximum-length-of-repeated-subarray/\">最长重复子数组</a></p>\n<p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>两个数组中 <strong>公共的</strong> 、长度最长的子数组的长度</em> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：长度最长的公共子数组是 [3,2,1] 。</span><br></pre></td></tr></table></figure>\n\n<p>思路：定义<code>dp[i][j]</code>数组为第一个数组<code>i</code>索引与第二个数组<code>j</code>索引结尾子数组最大公共长度。同时存在状态转移关系：</p>\n<p><code>dp[i][j] = dp[i-1][j-1]+1 when nums1[i] == nums2[j] and i != 0 and j != 0</code></p>\n<p><code>dp[i][j] = 1 when nums1[i] == nums2[j] and i==0 || j == 0</code></p>\n<p><code>dp[i][j] = 0 when nums1[i] != nums2[j] and i==0 || j == 0</code></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findLength</span><span class=\"params\">(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l1</span> <span class=\"operator\">=</span> nums1.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l2</span> <span class=\"operator\">=</span> nums2.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[l1][l2];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; l1; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; l2; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">csame</span> <span class=\"operator\">=</span> nums1[i] == nums2[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[i][j] = csame ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(csame) &#123;</span><br><span class=\"line\">                        dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                max = Math.max(dp[i][j], max);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"死锁","date":"2022-05-31T00:52:56.000Z","_content":"\n# 什么是死锁\n\n多线程情况下，线程互相拥有对方需要的资源从而相互等待资源释放，从而导致程序无法继续进行造成死锁。\n\n\n\n# 如何解决\n\n1. 固定枷锁顺序\n\n   可以通过业务字段运算排序确定加锁的顺序\n\n2. 尽可能减小锁的范围\n\n   等到操作共享变量时再加锁，降低死锁概率\n\n3. 定时锁\n\n   一段时间获取不到锁，释放掉\n","source":"_posts/死锁.md","raw":"---\ntitle: 死锁\ndate: 2022-05-31 08:52:56\ntags:\n  - 死锁\n  - 面试\n---\n\n# 什么是死锁\n\n多线程情况下，线程互相拥有对方需要的资源从而相互等待资源释放，从而导致程序无法继续进行造成死锁。\n\n\n\n# 如何解决\n\n1. 固定枷锁顺序\n\n   可以通过业务字段运算排序确定加锁的顺序\n\n2. 尽可能减小锁的范围\n\n   等到操作共享变量时再加锁，降低死锁概率\n\n3. 定时锁\n\n   一段时间获取不到锁，释放掉\n","slug":"死锁","published":1,"updated":"2022-05-31T00:58:19.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml4001h7qh8b5jb3i6x","content":"<h1 id=\"什么是死锁\"><a href=\"#什么是死锁\" class=\"headerlink\" title=\"什么是死锁\"></a>什么是死锁</h1><p>多线程情况下，线程互相拥有对方需要的资源从而相互等待资源释放，从而导致程序无法继续进行造成死锁。</p>\n<h1 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h1><ol>\n<li><p>固定枷锁顺序</p>\n<p>可以通过业务字段运算排序确定加锁的顺序</p>\n</li>\n<li><p>尽可能减小锁的范围</p>\n<p>等到操作共享变量时再加锁，降低死锁概率</p>\n</li>\n<li><p>定时锁</p>\n<p>一段时间获取不到锁，释放掉</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是死锁\"><a href=\"#什么是死锁\" class=\"headerlink\" title=\"什么是死锁\"></a>什么是死锁</h1><p>多线程情况下，线程互相拥有对方需要的资源从而相互等待资源释放，从而导致程序无法继续进行造成死锁。</p>\n<h1 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h1><ol>\n<li><p>固定枷锁顺序</p>\n<p>可以通过业务字段运算排序确定加锁的顺序</p>\n</li>\n<li><p>尽可能减小锁的范围</p>\n<p>等到操作共享变量时再加锁，降低死锁概率</p>\n</li>\n<li><p>定时锁</p>\n<p>一段时间获取不到锁，释放掉</p>\n</li>\n</ol>\n"},{"title":"滑动窗口最大值","date":"2022-05-31T11:26:47.000Z","_content":"\n[滑动窗口最大值](https://leetcode.cn/problems/sliding-window-maximum/)\n\n给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n\n返回 滑动窗口中的最大值 。\n\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n思路：维护一个单调递减栈（如果区间内来了一个更大的值，之前的都不参与计算最大值。但是如果来一个较小的数，如果大数走出区间这个小一点的数就要参与计算最大值）。每次到达区间新值时计算当前区间最大值更新即可。此处注意栈是后进先出，由于是递减栈，所以我们要找的肯定在栈底部更接近，此处由于java的Stack类继承Vector可以通过迭代器从底部遍历，从而节省性能。还有需要注意走过的区间要将入栈的数据删掉，节省下次寻找区间最值的时间。\n\n代码：\n\n```java\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int length = nums.length;\n        int[] ret = new int[length - k + 1];\n        Stack<Integer> stack = new Stack();\n        int index = 0;\n        int retIndex = 0;\n        while(index < length) {\n             while(!stack.isEmpty() && nums[index] > nums[stack.peek()]) {\n                stack.pop();\n            }\n            stack.push(index);\n            if(index >= k - 1) {\n                ret[retIndex] = findMax(stack,nums, index - k + 1);\n                retIndex++;\n            }\n            index++;\n\n        }\n        return ret;\n    }\n    public int findMax(Stack<Integer> stack,int[] nums, int minIndex){\n        // 此处用迭代器，可以从最早push的数据开始检索\n        Iterator<Integer> it = stack.iterator();\n        while(it.hasNext()){\n            int s = it.next();\n            if(s >= minIndex) {\n                return nums[s];\n            }else{\n                // remove掉不会再参与计算的数据，节省内存并减少下次遍历时间\n                it.remove();\n            }\n        }\n        return 0;\n    }\n}\n```\n\n\n\n","source":"_posts/滑动窗口最大值.md","raw":"---\ntitle: 滑动窗口最大值\ndate: 2022-05-31 19:26:47\ntags:\n  - leetcode\n  - stack\n---\n\n[滑动窗口最大值](https://leetcode.cn/problems/sliding-window-maximum/)\n\n给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n\n返回 滑动窗口中的最大值 。\n\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n思路：维护一个单调递减栈（如果区间内来了一个更大的值，之前的都不参与计算最大值。但是如果来一个较小的数，如果大数走出区间这个小一点的数就要参与计算最大值）。每次到达区间新值时计算当前区间最大值更新即可。此处注意栈是后进先出，由于是递减栈，所以我们要找的肯定在栈底部更接近，此处由于java的Stack类继承Vector可以通过迭代器从底部遍历，从而节省性能。还有需要注意走过的区间要将入栈的数据删掉，节省下次寻找区间最值的时间。\n\n代码：\n\n```java\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int length = nums.length;\n        int[] ret = new int[length - k + 1];\n        Stack<Integer> stack = new Stack();\n        int index = 0;\n        int retIndex = 0;\n        while(index < length) {\n             while(!stack.isEmpty() && nums[index] > nums[stack.peek()]) {\n                stack.pop();\n            }\n            stack.push(index);\n            if(index >= k - 1) {\n                ret[retIndex] = findMax(stack,nums, index - k + 1);\n                retIndex++;\n            }\n            index++;\n\n        }\n        return ret;\n    }\n    public int findMax(Stack<Integer> stack,int[] nums, int minIndex){\n        // 此处用迭代器，可以从最早push的数据开始检索\n        Iterator<Integer> it = stack.iterator();\n        while(it.hasNext()){\n            int s = it.next();\n            if(s >= minIndex) {\n                return nums[s];\n            }else{\n                // remove掉不会再参与计算的数据，节省内存并减少下次遍历时间\n                it.remove();\n            }\n        }\n        return 0;\n    }\n}\n```\n\n\n\n","slug":"滑动窗口最大值","published":1,"updated":"2022-05-31T11:33:35.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml5001i7qh834w56987","content":"<p><a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">滑动窗口最大值</a></p>\n<p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回 滑动窗口中的最大值 。</p>\n<p>输入：nums &#x3D; [1,3,-1,-3,5,3,6,7], k &#x3D; 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                最大值</p>\n<hr>\n<p>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p>\n<p>思路：维护一个单调递减栈（如果区间内来了一个更大的值，之前的都不参与计算最大值。但是如果来一个较小的数，如果大数走出区间这个小一点的数就要参与计算最大值）。每次到达区间新值时计算当前区间最大值更新即可。此处注意栈是后进先出，由于是递减栈，所以我们要找的肯定在栈底部更接近，此处由于java的Stack类继承Vector可以通过迭代器从底部遍历，从而节省性能。还有需要注意走过的区间要将入栈的数据删掉，节省下次寻找区间最值的时间。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxSlidingWindow(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">retIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index &lt; length) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; nums[index] &gt; nums[stack.peek()]) &#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stack.push(index);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;= k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                ret[retIndex] = findMax(stack,nums, index - k + <span class=\"number\">1</span>);</span><br><span class=\"line\">                retIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMax</span><span class=\"params\">(Stack&lt;Integer&gt; stack,<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> minIndex)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处用迭代器，可以从最早push的数据开始检索</span></span><br><span class=\"line\">        Iterator&lt;Integer&gt; it = stack.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s &gt;= minIndex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[s];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// remove掉不会再参与计算的数据，节省内存并减少下次遍历时间</span></span><br><span class=\"line\">                it.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">滑动窗口最大值</a></p>\n<p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回 滑动窗口中的最大值 。</p>\n<p>输入：nums &#x3D; [1,3,-1,-3,5,3,6,7], k &#x3D; 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                最大值</p>\n<hr>\n<p>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p>\n<p>思路：维护一个单调递减栈（如果区间内来了一个更大的值，之前的都不参与计算最大值。但是如果来一个较小的数，如果大数走出区间这个小一点的数就要参与计算最大值）。每次到达区间新值时计算当前区间最大值更新即可。此处注意栈是后进先出，由于是递减栈，所以我们要找的肯定在栈底部更接近，此处由于java的Stack类继承Vector可以通过迭代器从底部遍历，从而节省性能。还有需要注意走过的区间要将入栈的数据删掉，节省下次寻找区间最值的时间。</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxSlidingWindow(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">retIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index &lt; length) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; nums[index] &gt; nums[stack.peek()]) &#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stack.push(index);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;= k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                ret[retIndex] = findMax(stack,nums, index - k + <span class=\"number\">1</span>);</span><br><span class=\"line\">                retIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMax</span><span class=\"params\">(Stack&lt;Integer&gt; stack,<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> minIndex)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处用迭代器，可以从最早push的数据开始检索</span></span><br><span class=\"line\">        Iterator&lt;Integer&gt; it = stack.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s &gt;= minIndex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[s];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// remove掉不会再参与计算的数据，节省内存并减少下次遍历时间</span></span><br><span class=\"line\">                it.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"线程池","date":"2022-05-31T03:05:43.000Z","_content":"\n# 创建方式\n\nThreadPoolExecutor创建，了解线程创建参数避免资源耗尽。\n\n# 核心参数\n\n- 核心线程数\n- 最大线程数\n- 线程空闲时间\n- 阻塞队列\n  - `ArrayBlockingQueue`\n  - `LinkedBlockingQuewue`\n  - `PriorityBlockingQueue`\n- 拒绝策略\n  - 丢弃任务并抛异常\n  - 直接丢掉新任务\n  - 丢掉队列中最早的任务\n  - 提交任务的线程执行该任务\n\n# 任务提交执行流程\n\n1. 提交任务\n2. 判断当前线程数是否小雨核心线程，如果小于则创建核心线程执行\n3. 否则判断阻塞队列是否已满，如果已满执行4，否则5\n4. 判断当前线程数是否达到最大线程数，如果达到则触发拒绝策略，否则创建新线程执行\n5. 加入阻塞队列即可\n\n# 参数设计\n\n1. 根据任务类型设计：\n\n   **CPU密集型**：与CPU核心数1～2倍。（不设置过多是CPU已经占用很高，避免无意义的上下文切换）\n\n   **IO密集型**：采用《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：**线程数 = CPU 核心数 \\*（1+平均等待时间/平均工作时间）**\n\n2. 压测确定\n\n   为了更准确的参数配置，可以通过压测来确定服务的最佳线程数量。\n","source":"_posts/线程池.md","raw":"---\ntitle: 线程池\ndate: 2022-05-31 11:05:43\ntags:\n  - 线程池\n  - java\n---\n\n# 创建方式\n\nThreadPoolExecutor创建，了解线程创建参数避免资源耗尽。\n\n# 核心参数\n\n- 核心线程数\n- 最大线程数\n- 线程空闲时间\n- 阻塞队列\n  - `ArrayBlockingQueue`\n  - `LinkedBlockingQuewue`\n  - `PriorityBlockingQueue`\n- 拒绝策略\n  - 丢弃任务并抛异常\n  - 直接丢掉新任务\n  - 丢掉队列中最早的任务\n  - 提交任务的线程执行该任务\n\n# 任务提交执行流程\n\n1. 提交任务\n2. 判断当前线程数是否小雨核心线程，如果小于则创建核心线程执行\n3. 否则判断阻塞队列是否已满，如果已满执行4，否则5\n4. 判断当前线程数是否达到最大线程数，如果达到则触发拒绝策略，否则创建新线程执行\n5. 加入阻塞队列即可\n\n# 参数设计\n\n1. 根据任务类型设计：\n\n   **CPU密集型**：与CPU核心数1～2倍。（不设置过多是CPU已经占用很高，避免无意义的上下文切换）\n\n   **IO密集型**：采用《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：**线程数 = CPU 核心数 \\*（1+平均等待时间/平均工作时间）**\n\n2. 压测确定\n\n   为了更准确的参数配置，可以通过压测来确定服务的最佳线程数量。\n","slug":"线程池","published":1,"updated":"2022-05-31T03:37:34.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml5001k7qh8d6od20vx","content":"<h1 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h1><p>ThreadPoolExecutor创建，了解线程创建参数避免资源耗尽。</p>\n<h1 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h1><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间</li>\n<li>阻塞队列<ul>\n<li><code>ArrayBlockingQueue</code></li>\n<li><code>LinkedBlockingQuewue</code></li>\n<li><code>PriorityBlockingQueue</code></li>\n</ul>\n</li>\n<li>拒绝策略<ul>\n<li>丢弃任务并抛异常</li>\n<li>直接丢掉新任务</li>\n<li>丢掉队列中最早的任务</li>\n<li>提交任务的线程执行该任务</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"任务提交执行流程\"><a href=\"#任务提交执行流程\" class=\"headerlink\" title=\"任务提交执行流程\"></a>任务提交执行流程</h1><ol>\n<li>提交任务</li>\n<li>判断当前线程数是否小雨核心线程，如果小于则创建核心线程执行</li>\n<li>否则判断阻塞队列是否已满，如果已满执行4，否则5</li>\n<li>判断当前线程数是否达到最大线程数，如果达到则触发拒绝策略，否则创建新线程执行</li>\n<li>加入阻塞队列即可</li>\n</ol>\n<h1 id=\"参数设计\"><a href=\"#参数设计\" class=\"headerlink\" title=\"参数设计\"></a>参数设计</h1><ol>\n<li><p>根据任务类型设计：</p>\n<p><strong>CPU密集型</strong>：与CPU核心数1～2倍。（不设置过多是CPU已经占用很高，避免无意义的上下文切换）</p>\n<p><strong>IO密集型</strong>：采用《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：<strong>线程数 &#x3D; CPU 核心数 *（1+平均等待时间&#x2F;平均工作时间）</strong></p>\n</li>\n<li><p>压测确定</p>\n<p>为了更准确的参数配置，可以通过压测来确定服务的最佳线程数量。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h1><p>ThreadPoolExecutor创建，了解线程创建参数避免资源耗尽。</p>\n<h1 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h1><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间</li>\n<li>阻塞队列<ul>\n<li><code>ArrayBlockingQueue</code></li>\n<li><code>LinkedBlockingQuewue</code></li>\n<li><code>PriorityBlockingQueue</code></li>\n</ul>\n</li>\n<li>拒绝策略<ul>\n<li>丢弃任务并抛异常</li>\n<li>直接丢掉新任务</li>\n<li>丢掉队列中最早的任务</li>\n<li>提交任务的线程执行该任务</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"任务提交执行流程\"><a href=\"#任务提交执行流程\" class=\"headerlink\" title=\"任务提交执行流程\"></a>任务提交执行流程</h1><ol>\n<li>提交任务</li>\n<li>判断当前线程数是否小雨核心线程，如果小于则创建核心线程执行</li>\n<li>否则判断阻塞队列是否已满，如果已满执行4，否则5</li>\n<li>判断当前线程数是否达到最大线程数，如果达到则触发拒绝策略，否则创建新线程执行</li>\n<li>加入阻塞队列即可</li>\n</ol>\n<h1 id=\"参数设计\"><a href=\"#参数设计\" class=\"headerlink\" title=\"参数设计\"></a>参数设计</h1><ol>\n<li><p>根据任务类型设计：</p>\n<p><strong>CPU密集型</strong>：与CPU核心数1～2倍。（不设置过多是CPU已经占用很高，避免无意义的上下文切换）</p>\n<p><strong>IO密集型</strong>：采用《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：<strong>线程数 &#x3D; CPU 核心数 *（1+平均等待时间&#x2F;平均工作时间）</strong></p>\n</li>\n<li><p>压测确定</p>\n<p>为了更准确的参数配置，可以通过压测来确定服务的最佳线程数量。</p>\n</li>\n</ol>\n"},{"title":"组合总和","date":"2022-06-03T02:22:10.000Z","_content":"\n[组合总和](https://leetcode.cn/problems/combination-sum/)\n\n给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。\n\ncandidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 \n\n对于给定的输入，保证和为 target 的不同组合数少于 150 个。\n\n```java\n输入：candidates = [2,3,6,7], target = 7\n输出：[[2,2,3],[7]]\n解释：\n2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。\n7 也是一个候选， 7 = 7 。\n仅有这两种组合。\n```\n\n\n\n思路：针对候选数组，每次可以有三种操作：\n\n- 选取一个继续下一个\n- 选取后不往下走（可重复选取）\n- 不选取往下走\n\n经分析，发现第一个操作的结果会背后两个操作包含，所以只需要考虑后两种即可\n\n代码：\n\n```java\nclass Solution {\n    List<List<Integer>> rsl = new ArrayList();\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        List<Integer> path = new ArrayList();\n        find(candidates, 0, target, path);\n        return rsl;\n    }\n\n    public void find(int[] candidates, int idx, int target, List<Integer> path){\n        if(target < 0) {\n            return;\n        }\n        if(target == 0) {\n            rsl.add(new ArrayList(path));\n            return;\n        }\n        if(idx > candidates.length - 1) {\n            return;\n        }\n        int cur = candidates[idx];\n        // 拿了往下走，被包含所以不用做\n        // path.add(cur);\n        // find(candidates, idx+1, target - cur, path);\n        // path.remove(path.size()-1);\n\n        // 拿了原地不动\n        path.add(cur);\n        find(candidates, idx, target - cur, path);\n        path.remove(path.size()-1);\n\n        // 不拿往下走\n        find(candidates, idx+1, target, path);\n    }\n}\n```\n\n","source":"_posts/组合总和.md","raw":"---\ntitle: 组合总和\ndate: 2022-06-03 10:22:10\ntags:\n  - leetcode\n  - 算法\n  - 组合\n---\n\n[组合总和](https://leetcode.cn/problems/combination-sum/)\n\n给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。\n\ncandidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 \n\n对于给定的输入，保证和为 target 的不同组合数少于 150 个。\n\n```java\n输入：candidates = [2,3,6,7], target = 7\n输出：[[2,2,3],[7]]\n解释：\n2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。\n7 也是一个候选， 7 = 7 。\n仅有这两种组合。\n```\n\n\n\n思路：针对候选数组，每次可以有三种操作：\n\n- 选取一个继续下一个\n- 选取后不往下走（可重复选取）\n- 不选取往下走\n\n经分析，发现第一个操作的结果会背后两个操作包含，所以只需要考虑后两种即可\n\n代码：\n\n```java\nclass Solution {\n    List<List<Integer>> rsl = new ArrayList();\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        List<Integer> path = new ArrayList();\n        find(candidates, 0, target, path);\n        return rsl;\n    }\n\n    public void find(int[] candidates, int idx, int target, List<Integer> path){\n        if(target < 0) {\n            return;\n        }\n        if(target == 0) {\n            rsl.add(new ArrayList(path));\n            return;\n        }\n        if(idx > candidates.length - 1) {\n            return;\n        }\n        int cur = candidates[idx];\n        // 拿了往下走，被包含所以不用做\n        // path.add(cur);\n        // find(candidates, idx+1, target - cur, path);\n        // path.remove(path.size()-1);\n\n        // 拿了原地不动\n        path.add(cur);\n        find(candidates, idx, target - cur, path);\n        path.remove(path.size()-1);\n\n        // 不拿往下走\n        find(candidates, idx+1, target, path);\n    }\n}\n```\n\n","slug":"组合总和","published":1,"updated":"2022-06-03T02:29:36.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml6001l7qh8hc5y1k8z","content":"<p><a href=\"https://leetcode.cn/problems/combination-sum/\">组合总和</a></p>\n<p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。</p>\n<p>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p>\n<p>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：candidates = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], target = <span class=\"number\">7</span></span><br><span class=\"line\">输出：[[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">7</span>]]</span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"number\">2</span> 和 <span class=\"number\">3</span> 可以形成一组候选，<span class=\"number\">2</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> = <span class=\"number\">7</span> 。注意 <span class=\"number\">2</span> 可以使用多次。</span><br><span class=\"line\"><span class=\"number\">7</span> 也是一个候选， <span class=\"number\">7</span> = <span class=\"number\">7</span> 。</span><br><span class=\"line\">仅有这两种组合。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：针对候选数组，每次可以有三种操作：</p>\n<ul>\n<li>选取一个继续下一个</li>\n<li>选取后不往下走（可重复选取）</li>\n<li>不选取往下走</li>\n</ul>\n<p>经分析，发现第一个操作的结果会背后两个操作包含，所以只需要考虑后两种即可</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; rsl = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        List&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        find(candidates, <span class=\"number\">0</span>, target, path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rsl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> idx, <span class=\"type\">int</span> target, List&lt;Integer&gt; path)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            rsl.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(path));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(idx &gt; candidates.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> candidates[idx];</span><br><span class=\"line\">        <span class=\"comment\">// 拿了往下走，被包含所以不用做</span></span><br><span class=\"line\">        <span class=\"comment\">// path.add(cur);</span></span><br><span class=\"line\">        <span class=\"comment\">// find(candidates, idx+1, target - cur, path);</span></span><br><span class=\"line\">        <span class=\"comment\">// path.remove(path.size()-1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拿了原地不动</span></span><br><span class=\"line\">        path.add(cur);</span><br><span class=\"line\">        find(candidates, idx, target - cur, path);</span><br><span class=\"line\">        path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不拿往下走</span></span><br><span class=\"line\">        find(candidates, idx+<span class=\"number\">1</span>, target, path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/combination-sum/\">组合总和</a></p>\n<p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。</p>\n<p>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p>\n<p>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：candidates = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], target = <span class=\"number\">7</span></span><br><span class=\"line\">输出：[[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">7</span>]]</span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"number\">2</span> 和 <span class=\"number\">3</span> 可以形成一组候选，<span class=\"number\">2</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> = <span class=\"number\">7</span> 。注意 <span class=\"number\">2</span> 可以使用多次。</span><br><span class=\"line\"><span class=\"number\">7</span> 也是一个候选， <span class=\"number\">7</span> = <span class=\"number\">7</span> 。</span><br><span class=\"line\">仅有这两种组合。</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：针对候选数组，每次可以有三种操作：</p>\n<ul>\n<li>选取一个继续下一个</li>\n<li>选取后不往下走（可重复选取）</li>\n<li>不选取往下走</li>\n</ul>\n<p>经分析，发现第一个操作的结果会背后两个操作包含，所以只需要考虑后两种即可</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; rsl = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        List&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        find(candidates, <span class=\"number\">0</span>, target, path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rsl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> idx, <span class=\"type\">int</span> target, List&lt;Integer&gt; path)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            rsl.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(path));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(idx &gt; candidates.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> candidates[idx];</span><br><span class=\"line\">        <span class=\"comment\">// 拿了往下走，被包含所以不用做</span></span><br><span class=\"line\">        <span class=\"comment\">// path.add(cur);</span></span><br><span class=\"line\">        <span class=\"comment\">// find(candidates, idx+1, target - cur, path);</span></span><br><span class=\"line\">        <span class=\"comment\">// path.remove(path.size()-1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拿了原地不动</span></span><br><span class=\"line\">        path.add(cur);</span><br><span class=\"line\">        find(candidates, idx, target - cur, path);</span><br><span class=\"line\">        path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不拿往下走</span></span><br><span class=\"line\">        find(candidates, idx+<span class=\"number\">1</span>, target, path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"路径总和 II","date":"2022-06-02T06:52:06.000Z","_content":"\n[路径总和 II](https://leetcode.cn/problems/path-sum-ii/)\n\n给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。\n\n叶子节点 是指没有子节点的节点。\n\n![pathsumii1](pathsumii1.jpg)\n\n```\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]\n```\n\n思路：求root节点开始到叶子节点和为target的路径，等于当前节点加上子节点到叶子节点和为：target - root.val的路径。采用先序遍历，在遍历过程维护当前路径与子路径并及时回退\n\n代码：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // 全局结果\n    List<List<Integer>> result = new ArrayList();\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n        if(root == null) {\n            return result;\n        }\n        // 临时路径\n        List<Integer> tmp = new ArrayList();\n        findPath(root, targetSum, tmp);\n        return result;\n    }\n\n    public void findPath(TreeNode node, int target, List<Integer> tmp){\n        int val = node.val;\n        // 添加当前节点路径\n        tmp.add(val);\n        // 计算子节点需要满足的target\n        target -= val;\n        // 叶子节点\n        if(node.left == null && node.right == null) {\n            if(target == 0) {  // found matched\n                List<Integer> t = new ArrayList();\n                t.addAll(tmp);\n                result.add(t);\n            }\n        } else{\n            // 找左子树\n            if(node.left != null) {\n                findPath(node.left, target, tmp);\n            }\n            if(node.right != null) {\n                findPath(node.right, target, tmp);\n            }\n        }\n\t\t\t\t// 回退临时路径\n        tmp.remove(tmp.size()-1);\n    }\n}\n```\n\n","source":"_posts/路径总和-II.md","raw":"---\ntitle: 路径总和 II\ndate: 2022-06-02 14:52:06\ntags:\n  - leetcode\n  - 算法\n  - 树\n---\n\n[路径总和 II](https://leetcode.cn/problems/path-sum-ii/)\n\n给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。\n\n叶子节点 是指没有子节点的节点。\n\n![pathsumii1](pathsumii1.jpg)\n\n```\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]\n```\n\n思路：求root节点开始到叶子节点和为target的路径，等于当前节点加上子节点到叶子节点和为：target - root.val的路径。采用先序遍历，在遍历过程维护当前路径与子路径并及时回退\n\n代码：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // 全局结果\n    List<List<Integer>> result = new ArrayList();\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n        if(root == null) {\n            return result;\n        }\n        // 临时路径\n        List<Integer> tmp = new ArrayList();\n        findPath(root, targetSum, tmp);\n        return result;\n    }\n\n    public void findPath(TreeNode node, int target, List<Integer> tmp){\n        int val = node.val;\n        // 添加当前节点路径\n        tmp.add(val);\n        // 计算子节点需要满足的target\n        target -= val;\n        // 叶子节点\n        if(node.left == null && node.right == null) {\n            if(target == 0) {  // found matched\n                List<Integer> t = new ArrayList();\n                t.addAll(tmp);\n                result.add(t);\n            }\n        } else{\n            // 找左子树\n            if(node.left != null) {\n                findPath(node.left, target, tmp);\n            }\n            if(node.right != null) {\n                findPath(node.right, target, tmp);\n            }\n        }\n\t\t\t\t// 回退临时路径\n        tmp.remove(tmp.size()-1);\n    }\n}\n```\n\n","slug":"路径总和-II","published":1,"updated":"2022-06-03T02:55:57.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml6001n7qh831ts330r","content":"<p><a href=\"https://leetcode.cn/problems/path-sum-ii/\">路径总和 II</a></p>\n<p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p>\n<p>叶子节点 是指没有子节点的节点。</p>\n<p><img src=\"/2022/06/02/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-II/pathsumii1.jpg\" alt=\"pathsumii1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22</span><br><span class=\"line\">输出：[[5,4,11,2],[5,8,4,5]]</span><br></pre></td></tr></table></figure>\n\n<p>思路：求root节点开始到叶子节点和为target的路径，等于当前节点加上子节点到叶子节点和为：target - root.val的路径。采用先序遍历，在遍历过程维护当前路径与子路径并及时回退</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 全局结果</span></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> targetSum)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 临时路径</span></span><br><span class=\"line\">        List&lt;Integer&gt; tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        findPath(root, targetSum, tmp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findPath</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> target, List&lt;Integer&gt; tmp)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> node.val;</span><br><span class=\"line\">        <span class=\"comment\">// 添加当前节点路径</span></span><br><span class=\"line\">        tmp.add(val);</span><br><span class=\"line\">        <span class=\"comment\">// 计算子节点需要满足的target</span></span><br><span class=\"line\">        target -= val;</span><br><span class=\"line\">        <span class=\"comment\">// 叶子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.left == <span class=\"literal\">null</span> &amp;&amp; node.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// found matched</span></span><br><span class=\"line\">                List&lt;Integer&gt; t = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">                t.addAll(tmp);</span><br><span class=\"line\">                result.add(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找左子树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                findPath(node.left, target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                findPath(node.right, target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 回退临时路径</span></span><br><span class=\"line\">        tmp.remove(tmp.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/path-sum-ii/\">路径总和 II</a></p>\n<p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p>\n<p>叶子节点 是指没有子节点的节点。</p>\n<p><img src=\"/2022/06/02/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-II/pathsumii1.jpg\" alt=\"pathsumii1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22</span><br><span class=\"line\">输出：[[5,4,11,2],[5,8,4,5]]</span><br></pre></td></tr></table></figure>\n\n<p>思路：求root节点开始到叶子节点和为target的路径，等于当前节点加上子节点到叶子节点和为：target - root.val的路径。采用先序遍历，在遍历过程维护当前路径与子路径并及时回退</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 全局结果</span></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> targetSum)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 临时路径</span></span><br><span class=\"line\">        List&lt;Integer&gt; tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        findPath(root, targetSum, tmp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findPath</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> target, List&lt;Integer&gt; tmp)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> node.val;</span><br><span class=\"line\">        <span class=\"comment\">// 添加当前节点路径</span></span><br><span class=\"line\">        tmp.add(val);</span><br><span class=\"line\">        <span class=\"comment\">// 计算子节点需要满足的target</span></span><br><span class=\"line\">        target -= val;</span><br><span class=\"line\">        <span class=\"comment\">// 叶子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.left == <span class=\"literal\">null</span> &amp;&amp; node.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// found matched</span></span><br><span class=\"line\">                List&lt;Integer&gt; t = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">                t.addAll(tmp);</span><br><span class=\"line\">                result.add(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找左子树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                findPath(node.left, target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                findPath(node.right, target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 回退临时路径</span></span><br><span class=\"line\">        tmp.remove(tmp.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"零钱兑换","date":"2022-06-01T13:01:29.000Z","_content":"\n[零钱兑换](https://leetcode.cn/problems/coin-change/)\n\n给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。\n\n计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。\n\n你可以认为每种硬币的数量是无限的。\n\n```\n输入：coins = [1, 2, 5], amount = 11\n输出：3 \n解释：11 = 5 + 5 + 1\n```\n\n思路：dp[amount]，计算每个amount的关于提供硬币的所需硬币数量：针对提供的硬币数组，计算从0～amount的dp数组。存在这样的关系：\n\n- 需要计算每一个金额最小的硬币数\n- 遍历每一个硬币，如果可以大于要组成的amount，直接continue（无法通过这个硬币组成该金额）\n- 小于amount，组成amount的硬币个数为：dp[amount - coinAmount] + 1（需要注意，如果dp[amount - coinAmount] 为-1，即无法组成该amount硬币组合，直接continue）\n- 对于每种组合，求最小的进行赋值：dp[amount] = min(dp[amount - coinAmount] ) + 1\n\n\n\n代码：\n\n```java\nclass Solution {\n    public int coinChange(int[] coins, int amount) {\n        int[] dp = new int[amount + 1];\n        for(int am = 1; am <= amount; am++) {\n            Integer count = null;\n            for(int coin : coins) {\n                int other = am - coin;\n                if(other < 0) {\n                    // 如果硬币面值过大，直接丢弃这种组合方式\n                    continue;\n                }else{\n                    // 表示没有这种组合方式，丢弃\n                    if(dp[other] == -1) {\n                        continue;\n                    }\n                    // 首次直接赋值，后续需要取较小值更新\n                    count = count == null ? dp[other] + 1 : Math.min(count,dp[other] + 1);\n                }\n            }\n            dp[am] = count == null ? -1 : count;\n\n        }\n        return dp[amount];\n    }\n}\n```\n\n \n","source":"_posts/零钱兑换.md","raw":"---\ntitle: 零钱兑换\ndate: 2022-06-01 21:01:29\ntags:\n  - leetcode\n  - 算法\n  - dp\n---\n\n[零钱兑换](https://leetcode.cn/problems/coin-change/)\n\n给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。\n\n计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。\n\n你可以认为每种硬币的数量是无限的。\n\n```\n输入：coins = [1, 2, 5], amount = 11\n输出：3 \n解释：11 = 5 + 5 + 1\n```\n\n思路：dp[amount]，计算每个amount的关于提供硬币的所需硬币数量：针对提供的硬币数组，计算从0～amount的dp数组。存在这样的关系：\n\n- 需要计算每一个金额最小的硬币数\n- 遍历每一个硬币，如果可以大于要组成的amount，直接continue（无法通过这个硬币组成该金额）\n- 小于amount，组成amount的硬币个数为：dp[amount - coinAmount] + 1（需要注意，如果dp[amount - coinAmount] 为-1，即无法组成该amount硬币组合，直接continue）\n- 对于每种组合，求最小的进行赋值：dp[amount] = min(dp[amount - coinAmount] ) + 1\n\n\n\n代码：\n\n```java\nclass Solution {\n    public int coinChange(int[] coins, int amount) {\n        int[] dp = new int[amount + 1];\n        for(int am = 1; am <= amount; am++) {\n            Integer count = null;\n            for(int coin : coins) {\n                int other = am - coin;\n                if(other < 0) {\n                    // 如果硬币面值过大，直接丢弃这种组合方式\n                    continue;\n                }else{\n                    // 表示没有这种组合方式，丢弃\n                    if(dp[other] == -1) {\n                        continue;\n                    }\n                    // 首次直接赋值，后续需要取较小值更新\n                    count = count == null ? dp[other] + 1 : Math.min(count,dp[other] + 1);\n                }\n            }\n            dp[am] = count == null ? -1 : count;\n\n        }\n        return dp[amount];\n    }\n}\n```\n\n \n","slug":"零钱兑换","published":1,"updated":"2022-06-01T13:27:56.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml7001p7qh8cm8uedp0","content":"<p><a href=\"https://leetcode.cn/problems/coin-change/\">零钱兑换</a></p>\n<p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p>\n<p>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。</p>\n<p>你可以认为每种硬币的数量是无限的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：coins = [1, 2, 5], amount = 11</span><br><span class=\"line\">输出：3 </span><br><span class=\"line\">解释：11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>\n\n<p>思路：dp[amount]，计算每个amount的关于提供硬币的所需硬币数量：针对提供的硬币数组，计算从0～amount的dp数组。存在这样的关系：</p>\n<ul>\n<li>需要计算每一个金额最小的硬币数</li>\n<li>遍历每一个硬币，如果可以大于要组成的amount，直接continue（无法通过这个硬币组成该金额）</li>\n<li>小于amount，组成amount的硬币个数为：dp[amount - coinAmount] + 1（需要注意，如果dp[amount - coinAmount] 为-1，即无法组成该amount硬币组合，直接continue）</li>\n<li>对于每种组合，求最小的进行赋值：dp[amount] &#x3D; min(dp[amount - coinAmount] ) + 1</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">coinChange</span><span class=\"params\">(<span class=\"type\">int</span>[] coins, <span class=\"type\">int</span> amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">am</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; am &lt;= amount; am++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Integer</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> coin : coins) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">other</span> <span class=\"operator\">=</span> am - coin;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(other &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果硬币面值过大，直接丢弃这种组合方式</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 表示没有这种组合方式，丢弃</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[other] == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 首次直接赋值，后续需要取较小值更新</span></span><br><span class=\"line\">                    count = count == <span class=\"literal\">null</span> ? dp[other] + <span class=\"number\">1</span> : Math.min(count,dp[other] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[am] = count == <span class=\"literal\">null</span> ? -<span class=\"number\">1</span> : count;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[amount];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/coin-change/\">零钱兑换</a></p>\n<p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p>\n<p>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。</p>\n<p>你可以认为每种硬币的数量是无限的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：coins = [1, 2, 5], amount = 11</span><br><span class=\"line\">输出：3 </span><br><span class=\"line\">解释：11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>\n\n<p>思路：dp[amount]，计算每个amount的关于提供硬币的所需硬币数量：针对提供的硬币数组，计算从0～amount的dp数组。存在这样的关系：</p>\n<ul>\n<li>需要计算每一个金额最小的硬币数</li>\n<li>遍历每一个硬币，如果可以大于要组成的amount，直接continue（无法通过这个硬币组成该金额）</li>\n<li>小于amount，组成amount的硬币个数为：dp[amount - coinAmount] + 1（需要注意，如果dp[amount - coinAmount] 为-1，即无法组成该amount硬币组合，直接continue）</li>\n<li>对于每种组合，求最小的进行赋值：dp[amount] &#x3D; min(dp[amount - coinAmount] ) + 1</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">coinChange</span><span class=\"params\">(<span class=\"type\">int</span>[] coins, <span class=\"type\">int</span> amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">am</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; am &lt;= amount; am++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Integer</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> coin : coins) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">other</span> <span class=\"operator\">=</span> am - coin;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(other &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果硬币面值过大，直接丢弃这种组合方式</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 表示没有这种组合方式，丢弃</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[other] == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 首次直接赋值，后续需要取较小值更新</span></span><br><span class=\"line\">                    count = count == <span class=\"literal\">null</span> ? dp[other] + <span class=\"number\">1</span> : Math.min(count,dp[other] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[am] = count == <span class=\"literal\">null</span> ? -<span class=\"number\">1</span> : count;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[amount];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"项目介绍之亮点与难点","date":"2022-05-30T01:34:16.000Z","_content":"\n面试中对于项目考察，通常会询问项目中的亮点已经难点。这其实是考察对工作熟悉以及发现并解决问题能力，还有总结归纳的能力。\n\n# 1.项目亮点\n\n采用了哪种技术方案，达成了什么样的效果。新方案的优劣势如何？\n\n比如：\n\n- 针对复杂业务根据模块拆分从而更加灵活\n- 改为无状态服务解耦\n- 采用订阅发布模型集中维护数据流向，结偶并提升容错和可维护性\n- 采用了统一网关进行链路追踪方便问题定位以及集中化配置\n- 采用配置中心提供即时生效的配置更新与完善的权限控制\n- 统一日志采集提供快速问题定位\n- 告警系统提供实时邮件提醒\n- ......\n\n\n\n# 2.项目难点\n\n遇到了什么棘手的问题，如何分析定位问题？如果解决？\n\n比如：\n\n- 由于MQ失败重试导致的数据错误\n\n  由于MQ一般不会无限重试，所以在对于错误消息会设置延迟重试。此时存在一个问题：如果A，B两笔数据存在依赖关系。这将导致数据不一致。后续我们采用error-callback对于错误数据进行异步修复，并对修复数据集进行监控。\n\n- Kerberos认证多HBase集群错误\n\n  再多集群情况下采用Kerberos认证时发现存在无法找到正确relm的情况。后续通过debug发现对于请求的Kerberos配置读取存在静态存储。通过阅读源码使用Config.refresh() 在每次获取链接时重新读取配置即可。\n\n- JVM方法区OOM\n\n  由于读取配置文件解析时使用的序列化工具内部采用ASM技术动态生成。导致大量Class被加载，最终导致OOM。后续优化方案：配置无需多次加载，对配置进行缓存即可。\n\n- DNS导致HBase Region不可用\n\n  由于采用公司集中配置管理的DNS服务。其中存在冲突配置导致RegionServer连接异常。排查发现后联系IT解决冲突。\n\n- ......\n\n\n\n# 总结\n\n对于项目面试，首先对项目有自己的认识靠清楚几个问题：\n\n- 是解决什么问题的？\n- 是如何解决的？\n- 解决过程中遇到哪些问题？\n- 问题产生的原因是什么？\n- 如果解决遇到问题的？\n- 为什么这样解决？\n- 如何减少问题发生的？\n- 有哪些调优的经验？\n","source":"_posts/项目介绍之亮点与难点.md","raw":"---\ntitle: 项目介绍之亮点与难点\ndate: 2022-05-30 09:34:16\ntags: \n  - 面试\n  - 项目\n---\n\n面试中对于项目考察，通常会询问项目中的亮点已经难点。这其实是考察对工作熟悉以及发现并解决问题能力，还有总结归纳的能力。\n\n# 1.项目亮点\n\n采用了哪种技术方案，达成了什么样的效果。新方案的优劣势如何？\n\n比如：\n\n- 针对复杂业务根据模块拆分从而更加灵活\n- 改为无状态服务解耦\n- 采用订阅发布模型集中维护数据流向，结偶并提升容错和可维护性\n- 采用了统一网关进行链路追踪方便问题定位以及集中化配置\n- 采用配置中心提供即时生效的配置更新与完善的权限控制\n- 统一日志采集提供快速问题定位\n- 告警系统提供实时邮件提醒\n- ......\n\n\n\n# 2.项目难点\n\n遇到了什么棘手的问题，如何分析定位问题？如果解决？\n\n比如：\n\n- 由于MQ失败重试导致的数据错误\n\n  由于MQ一般不会无限重试，所以在对于错误消息会设置延迟重试。此时存在一个问题：如果A，B两笔数据存在依赖关系。这将导致数据不一致。后续我们采用error-callback对于错误数据进行异步修复，并对修复数据集进行监控。\n\n- Kerberos认证多HBase集群错误\n\n  再多集群情况下采用Kerberos认证时发现存在无法找到正确relm的情况。后续通过debug发现对于请求的Kerberos配置读取存在静态存储。通过阅读源码使用Config.refresh() 在每次获取链接时重新读取配置即可。\n\n- JVM方法区OOM\n\n  由于读取配置文件解析时使用的序列化工具内部采用ASM技术动态生成。导致大量Class被加载，最终导致OOM。后续优化方案：配置无需多次加载，对配置进行缓存即可。\n\n- DNS导致HBase Region不可用\n\n  由于采用公司集中配置管理的DNS服务。其中存在冲突配置导致RegionServer连接异常。排查发现后联系IT解决冲突。\n\n- ......\n\n\n\n# 总结\n\n对于项目面试，首先对项目有自己的认识靠清楚几个问题：\n\n- 是解决什么问题的？\n- 是如何解决的？\n- 解决过程中遇到哪些问题？\n- 问题产生的原因是什么？\n- 如果解决遇到问题的？\n- 为什么这样解决？\n- 如何减少问题发生的？\n- 有哪些调优的经验？\n","slug":"项目介绍之亮点与难点","published":1,"updated":"2022-05-30T09:03:19.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml7001s7qh87wccel03","content":"<p>面试中对于项目考察，通常会询问项目中的亮点已经难点。这其实是考察对工作熟悉以及发现并解决问题能力，还有总结归纳的能力。</p>\n<h1 id=\"1-项目亮点\"><a href=\"#1-项目亮点\" class=\"headerlink\" title=\"1.项目亮点\"></a>1.项目亮点</h1><p>采用了哪种技术方案，达成了什么样的效果。新方案的优劣势如何？</p>\n<p>比如：</p>\n<ul>\n<li>针对复杂业务根据模块拆分从而更加灵活</li>\n<li>改为无状态服务解耦</li>\n<li>采用订阅发布模型集中维护数据流向，结偶并提升容错和可维护性</li>\n<li>采用了统一网关进行链路追踪方便问题定位以及集中化配置</li>\n<li>采用配置中心提供即时生效的配置更新与完善的权限控制</li>\n<li>统一日志采集提供快速问题定位</li>\n<li>告警系统提供实时邮件提醒</li>\n<li>……</li>\n</ul>\n<h1 id=\"2-项目难点\"><a href=\"#2-项目难点\" class=\"headerlink\" title=\"2.项目难点\"></a>2.项目难点</h1><p>遇到了什么棘手的问题，如何分析定位问题？如果解决？</p>\n<p>比如：</p>\n<ul>\n<li><p>由于MQ失败重试导致的数据错误</p>\n<p>由于MQ一般不会无限重试，所以在对于错误消息会设置延迟重试。此时存在一个问题：如果A，B两笔数据存在依赖关系。这将导致数据不一致。后续我们采用error-callback对于错误数据进行异步修复，并对修复数据集进行监控。</p>\n</li>\n<li><p>Kerberos认证多HBase集群错误</p>\n<p>再多集群情况下采用Kerberos认证时发现存在无法找到正确relm的情况。后续通过debug发现对于请求的Kerberos配置读取存在静态存储。通过阅读源码使用Config.refresh() 在每次获取链接时重新读取配置即可。</p>\n</li>\n<li><p>JVM方法区OOM</p>\n<p>由于读取配置文件解析时使用的序列化工具内部采用ASM技术动态生成。导致大量Class被加载，最终导致OOM。后续优化方案：配置无需多次加载，对配置进行缓存即可。</p>\n</li>\n<li><p>DNS导致HBase Region不可用</p>\n<p>由于采用公司集中配置管理的DNS服务。其中存在冲突配置导致RegionServer连接异常。排查发现后联系IT解决冲突。</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于项目面试，首先对项目有自己的认识靠清楚几个问题：</p>\n<ul>\n<li>是解决什么问题的？</li>\n<li>是如何解决的？</li>\n<li>解决过程中遇到哪些问题？</li>\n<li>问题产生的原因是什么？</li>\n<li>如果解决遇到问题的？</li>\n<li>为什么这样解决？</li>\n<li>如何减少问题发生的？</li>\n<li>有哪些调优的经验？</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>面试中对于项目考察，通常会询问项目中的亮点已经难点。这其实是考察对工作熟悉以及发现并解决问题能力，还有总结归纳的能力。</p>\n<h1 id=\"1-项目亮点\"><a href=\"#1-项目亮点\" class=\"headerlink\" title=\"1.项目亮点\"></a>1.项目亮点</h1><p>采用了哪种技术方案，达成了什么样的效果。新方案的优劣势如何？</p>\n<p>比如：</p>\n<ul>\n<li>针对复杂业务根据模块拆分从而更加灵活</li>\n<li>改为无状态服务解耦</li>\n<li>采用订阅发布模型集中维护数据流向，结偶并提升容错和可维护性</li>\n<li>采用了统一网关进行链路追踪方便问题定位以及集中化配置</li>\n<li>采用配置中心提供即时生效的配置更新与完善的权限控制</li>\n<li>统一日志采集提供快速问题定位</li>\n<li>告警系统提供实时邮件提醒</li>\n<li>……</li>\n</ul>\n<h1 id=\"2-项目难点\"><a href=\"#2-项目难点\" class=\"headerlink\" title=\"2.项目难点\"></a>2.项目难点</h1><p>遇到了什么棘手的问题，如何分析定位问题？如果解决？</p>\n<p>比如：</p>\n<ul>\n<li><p>由于MQ失败重试导致的数据错误</p>\n<p>由于MQ一般不会无限重试，所以在对于错误消息会设置延迟重试。此时存在一个问题：如果A，B两笔数据存在依赖关系。这将导致数据不一致。后续我们采用error-callback对于错误数据进行异步修复，并对修复数据集进行监控。</p>\n</li>\n<li><p>Kerberos认证多HBase集群错误</p>\n<p>再多集群情况下采用Kerberos认证时发现存在无法找到正确relm的情况。后续通过debug发现对于请求的Kerberos配置读取存在静态存储。通过阅读源码使用Config.refresh() 在每次获取链接时重新读取配置即可。</p>\n</li>\n<li><p>JVM方法区OOM</p>\n<p>由于读取配置文件解析时使用的序列化工具内部采用ASM技术动态生成。导致大量Class被加载，最终导致OOM。后续优化方案：配置无需多次加载，对配置进行缓存即可。</p>\n</li>\n<li><p>DNS导致HBase Region不可用</p>\n<p>由于采用公司集中配置管理的DNS服务。其中存在冲突配置导致RegionServer连接异常。排查发现后联系IT解决冲突。</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于项目面试，首先对项目有自己的认识靠清楚几个问题：</p>\n<ul>\n<li>是解决什么问题的？</li>\n<li>是如何解决的？</li>\n<li>解决过程中遇到哪些问题？</li>\n<li>问题产生的原因是什么？</li>\n<li>如果解决遇到问题的？</li>\n<li>为什么这样解决？</li>\n<li>如何减少问题发生的？</li>\n<li>有哪些调优的经验？</li>\n</ul>\n"},{"title":"验证二叉搜索树","date":"2022-06-02T02:00:15.000Z","_content":"\n[验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/)\n\n给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。\n\n有效 二叉搜索树定义如下：\n\n节点的左子树只包含 小于 当前节点的数。\n节点的右子树只包含 大于 当前节点的数。\n所有左子树和右子树自身必须也是二叉搜索树。\n\n![tree1](tree1.jpg)\n\n```\n输入：root = [2,1,3]\n输出：true\n```\n\n\n\n思路：判断二叉搜索树合法，需要根节点判断左右子树最大最小节点满足题目关系。可以维护一个子节点值范围（递归子节点时维护并判断当前节点合法性），通过此范围与根节点值判断。从而判断该节点是否合法。\n\n\n\n**递归思路：先自顶向下分析，然后分析底层边界逻辑反向验证，然后开始实现。**\n\n代码：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        Integer[] vals = new Integer[2];\n        return isValid(root, vals);\n    }\n\n    /**\n     * root：要判断合法的子树根节点\n     * vals：该子树值范围\n     *\n     */\n    public boolean isValid(TreeNode root, Integer[] vals) {\n        if(root == null) { \n            return true;\n        }\n        // 对于叶子节点还是其他都出实话当前值作为范围\n        vals[0] = root.val;\n        vals[1] = root.val;\n\n        if(root.left != null) {\n            // 此处用一个新的对象，防止污染当前节点范围\n            Integer[] tval = new Integer[2];\n            boolean left = isValid(root.left, tval);\n            if(!left) {\n                return false;\n            }\n            if(root.val <= tval[1]) {\n                return false;\n            }\n            if(tval[1] >= root.val){\n                return false;\n            }\n            // 以左子树范围更新当前节点范围，如果上面条件通过则树合法，以子树范围更新可以扩大当前子树值范围\n            vals[0] = tval[0];\n        }\n        // 同上\n        if(root.right != null){\n            Integer[] tval = new Integer[2];\n            boolean right = isValid(root.right, tval);\n            if(!right) {\n                return false;\n            }\n            if(root.val >= tval[0]) {\n                return false;\n            }\n            if(tval[0] <= root.val){\n                return false;\n            }\n            vals[1] = tval[1];\n        }\n        return true;\n    }\n}\n```\n\n","source":"_posts/验证二叉搜索树.md","raw":"---\ntitle: 验证二叉搜索树\ndate: 2022-06-02 10:00:15\ntags:\n  - leetcode\n  - 树\n  - 算法\n  - 递归\n---\n\n[验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/)\n\n给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。\n\n有效 二叉搜索树定义如下：\n\n节点的左子树只包含 小于 当前节点的数。\n节点的右子树只包含 大于 当前节点的数。\n所有左子树和右子树自身必须也是二叉搜索树。\n\n![tree1](tree1.jpg)\n\n```\n输入：root = [2,1,3]\n输出：true\n```\n\n\n\n思路：判断二叉搜索树合法，需要根节点判断左右子树最大最小节点满足题目关系。可以维护一个子节点值范围（递归子节点时维护并判断当前节点合法性），通过此范围与根节点值判断。从而判断该节点是否合法。\n\n\n\n**递归思路：先自顶向下分析，然后分析底层边界逻辑反向验证，然后开始实现。**\n\n代码：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        Integer[] vals = new Integer[2];\n        return isValid(root, vals);\n    }\n\n    /**\n     * root：要判断合法的子树根节点\n     * vals：该子树值范围\n     *\n     */\n    public boolean isValid(TreeNode root, Integer[] vals) {\n        if(root == null) { \n            return true;\n        }\n        // 对于叶子节点还是其他都出实话当前值作为范围\n        vals[0] = root.val;\n        vals[1] = root.val;\n\n        if(root.left != null) {\n            // 此处用一个新的对象，防止污染当前节点范围\n            Integer[] tval = new Integer[2];\n            boolean left = isValid(root.left, tval);\n            if(!left) {\n                return false;\n            }\n            if(root.val <= tval[1]) {\n                return false;\n            }\n            if(tval[1] >= root.val){\n                return false;\n            }\n            // 以左子树范围更新当前节点范围，如果上面条件通过则树合法，以子树范围更新可以扩大当前子树值范围\n            vals[0] = tval[0];\n        }\n        // 同上\n        if(root.right != null){\n            Integer[] tval = new Integer[2];\n            boolean right = isValid(root.right, tval);\n            if(!right) {\n                return false;\n            }\n            if(root.val >= tval[0]) {\n                return false;\n            }\n            if(tval[0] <= root.val){\n                return false;\n            }\n            vals[1] = tval[1];\n        }\n        return true;\n    }\n}\n```\n\n","slug":"验证二叉搜索树","published":1,"updated":"2022-06-02T02:26:45.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3zbjml8001u7qh806cp9499","content":"<p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">验证二叉搜索树</a></p>\n<p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p>\n<p>有效 二叉搜索树定义如下：</p>\n<p>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p>\n<p><img src=\"/2022/06/02/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/tree1.jpg\" alt=\"tree1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [2,1,3]</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：判断二叉搜索树合法，需要根节点判断左右子树最大最小节点满足题目关系。可以维护一个子节点值范围（递归子节点时维护并判断当前节点合法性），通过此范围与根节点值判断。从而判断该节点是否合法。</p>\n<p><strong>递归思路：先自顶向下分析，然后分析底层边界逻辑反向验证，然后开始实现。</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Integer[] vals = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isValid(root, vals);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * root：要判断合法的子树根节点</span></span><br><span class=\"line\"><span class=\"comment\">     * vals：该子树值范围</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(TreeNode root, Integer[] vals)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 对于叶子节点还是其他都出实话当前值作为范围</span></span><br><span class=\"line\">        vals[<span class=\"number\">0</span>] = root.val;</span><br><span class=\"line\">        vals[<span class=\"number\">1</span>] = root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 此处用一个新的对象，防止污染当前节点范围</span></span><br><span class=\"line\">            Integer[] tval = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> isValid(root.left, tval);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!left) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &lt;= tval[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tval[<span class=\"number\">1</span>] &gt;= root.val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 以左子树范围更新当前节点范围，如果上面条件通过则树合法，以子树范围更新可以扩大当前子树值范围</span></span><br><span class=\"line\">            vals[<span class=\"number\">0</span>] = tval[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            Integer[] tval = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> isValid(root.right, tval);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!right) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &gt;= tval[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tval[<span class=\"number\">0</span>] &lt;= root.val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            vals[<span class=\"number\">1</span>] = tval[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">验证二叉搜索树</a></p>\n<p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p>\n<p>有效 二叉搜索树定义如下：</p>\n<p>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p>\n<p><img src=\"/2022/06/02/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/tree1.jpg\" alt=\"tree1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [2,1,3]</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：判断二叉搜索树合法，需要根节点判断左右子树最大最小节点满足题目关系。可以维护一个子节点值范围（递归子节点时维护并判断当前节点合法性），通过此范围与根节点值判断。从而判断该节点是否合法。</p>\n<p><strong>递归思路：先自顶向下分析，然后分析底层边界逻辑反向验证，然后开始实现。</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.left = left;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.right = right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Integer[] vals = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isValid(root, vals);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * root：要判断合法的子树根节点</span></span><br><span class=\"line\"><span class=\"comment\">     * vals：该子树值范围</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(TreeNode root, Integer[] vals)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 对于叶子节点还是其他都出实话当前值作为范围</span></span><br><span class=\"line\">        vals[<span class=\"number\">0</span>] = root.val;</span><br><span class=\"line\">        vals[<span class=\"number\">1</span>] = root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 此处用一个新的对象，防止污染当前节点范围</span></span><br><span class=\"line\">            Integer[] tval = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> isValid(root.left, tval);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!left) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &lt;= tval[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tval[<span class=\"number\">1</span>] &gt;= root.val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 以左子树范围更新当前节点范围，如果上面条件通过则树合法，以子树范围更新可以扩大当前子树值范围</span></span><br><span class=\"line\">            vals[<span class=\"number\">0</span>] = tval[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            Integer[] tval = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> isValid(root.right, tval);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!right) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &gt;= tval[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tval[<span class=\"number\">0</span>] &lt;= root.val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            vals[<span class=\"number\">1</span>] = tval[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/Hexo-图片/20200707101943_hCjji.jpeg","post":"cl3zbjmkp00067qh8afcfeo62","slug":"20200707101943_hCjji.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Kubernetes基础概念/components-of-kubernetes.svg","post":"cl3zbjmkt000e7qh8c0gf4rh8","slug":"components-of-kubernetes.svg","modified":1,"renderable":1},{"_id":"source/_posts/ThreadLoacl/640.jpeg","post":"cl3zbjmkv000m7qh8efcz279m","slug":"640.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/ThreadLoacl/image-20220531114220950.png","post":"cl3zbjmkv000m7qh8efcz279m","slug":"image-20220531114220950.png","modified":1,"renderable":1},{"_id":"source/_posts/不同路径/robot_maze.png","post":"cl3zbjmkx000p7qh8hyk87hkc","slug":"robot_maze.png","modified":1,"renderable":1},{"_id":"source/_posts/删除排序链表中的重复元素/list1.jpg","post":"cl3zbjmkz000w7qh810gh6n3u","slug":"list1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/岛屿的最大面积/maxarea1-grid.jpg","post":"cl3zbjml100137qh8ejthdj2e","slug":"maxarea1-grid.jpg","modified":1,"renderable":1},{"_id":"source/_posts/旋转图像/mat1.jpg","post":"cl3zbjml200157qh83nopgaq6","slug":"mat1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/路径总和-II/pathsumii1.jpg","post":"cl3zbjml6001n7qh831ts330r","slug":"pathsumii1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/验证二叉搜索树/tree1.jpg","post":"cl3zbjml8001u7qh806cp9499","slug":"tree1.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cl3zbjmkk00017qh8fnhohmdj","tag_id":"cl3zbjmko00047qh8dszrbly5","_id":"cl3zbjmkt000f7qh856v2fc2d"},{"post_id":"cl3zbjmkk00017qh8fnhohmdj","tag_id":"cl3zbjmkr000a7qh849sl8k31","_id":"cl3zbjmku000h7qh802u6hhjf"},{"post_id":"cl3zbjmkn00037qh8e69ggn3z","tag_id":"cl3zbjmks000d7qh8b2qt8nq9","_id":"cl3zbjmkz000t7qh8gzfi7y0e"},{"post_id":"cl3zbjmkn00037qh8e69ggn3z","tag_id":"cl3zbjmku000i7qh8bpe5cdpd","_id":"cl3zbjmkz000v7qh8af2b88t7"},{"post_id":"cl3zbjmkn00037qh8e69ggn3z","tag_id":"cl3zbjmkr000a7qh849sl8k31","_id":"cl3zbjml0000y7qh88w62gabn"},{"post_id":"cl3zbjmkn00037qh8e69ggn3z","tag_id":"cl3zbjmkx000o7qh87m3r1b5o","_id":"cl3zbjml000107qh81h0tfgdo"},{"post_id":"cl3zbjmkp00067qh8afcfeo62","tag_id":"cl3zbjmkz000s7qh8c1xw3gcn","_id":"cl3zbjml200147qh86x5jdpyi"},{"post_id":"cl3zbjmkp00067qh8afcfeo62","tag_id":"cl3zbjml0000x7qh8cu77duiv","_id":"cl3zbjml200167qh89avq2p08"},{"post_id":"cl3zbjmkq00087qh8hvgz9xy1","tag_id":"cl3zbjml100127qh8aij34hz5","_id":"cl3zbjml3001c7qh8g7ryd660"},{"post_id":"cl3zbjmkq00087qh8hvgz9xy1","tag_id":"cl3zbjml200177qh8cimigxwu","_id":"cl3zbjml4001e7qh8e9xj12et"},{"post_id":"cl3zbjmkr00097qh84nmp9usu","tag_id":"cl3zbjmkz000s7qh8c1xw3gcn","_id":"cl3zbjml7001o7qh82phb2wxo"},{"post_id":"cl3zbjmkr00097qh84nmp9usu","tag_id":"cl3zbjml4001g7qh8eo6a47ox","_id":"cl3zbjml7001q7qh83ibv2qty"},{"post_id":"cl3zbjmkr00097qh84nmp9usu","tag_id":"cl3zbjml5001j7qh8fnq49qj7","_id":"cl3zbjml8001t7qh8gwl5dhrv"},{"post_id":"cl3zbjmkr000b7qh8evux63yz","tag_id":"cl3zbjml6001m7qh8gj5i2v7b","_id":"cl3zbjml8001w7qh86ejy56rt"},{"post_id":"cl3zbjmkr000b7qh8evux63yz","tag_id":"cl3zbjml7001r7qh8a8ybh0x3","_id":"cl3zbjml8001x7qh89m2w5zaj"},{"post_id":"cl3zbjmks000c7qh8gc3b33w2","tag_id":"cl3zbjml8001v7qh8ae2sd6v5","_id":"cl3zbjml900217qh81sfh64rp"},{"post_id":"cl3zbjmks000c7qh8gc3b33w2","tag_id":"cl3zbjml6001m7qh8gj5i2v7b","_id":"cl3zbjml900227qh8davsb8u7"},{"post_id":"cl3zbjmks000c7qh8gc3b33w2","tag_id":"cl3zbjml9001z7qh82xyyh75v","_id":"cl3zbjml900247qh8e9ce7i8h"},{"post_id":"cl3zbjmkt000e7qh8c0gf4rh8","tag_id":"cl3zbjml900207qh80rbn9wtj","_id":"cl3zbjml900257qh8e42qb5mv"},{"post_id":"cl3zbjmku000j7qh8b1r30wzz","tag_id":"cl3zbjml900237qh8cfs04snj","_id":"cl3zbjml900287qh852yu20f7"},{"post_id":"cl3zbjmku000j7qh8b1r30wzz","tag_id":"cl3zbjml900267qh84xq55tby","_id":"cl3zbjmla00297qh8bu6z7hih"},{"post_id":"cl3zbjmkv000k7qh8ewrzaz5h","tag_id":"cl3zbjml900277qh8gosv2hqf","_id":"cl3zbjmla002e7qh81qvp4pmg"},{"post_id":"cl3zbjmkv000k7qh8ewrzaz5h","tag_id":"cl3zbjml100127qh8aij34hz5","_id":"cl3zbjmla002f7qh80dbb8zog"},{"post_id":"cl3zbjmkv000k7qh8ewrzaz5h","tag_id":"cl3zbjmkr000a7qh849sl8k31","_id":"cl3zbjmlb002h7qh893zf1i7n"},{"post_id":"cl3zbjmkv000k7qh8ewrzaz5h","tag_id":"cl3zbjmla002b7qh8dvo69ars","_id":"cl3zbjmlb002i7qh80vwmfski"},{"post_id":"cl3zbjmkv000k7qh8ewrzaz5h","tag_id":"cl3zbjmla002c7qh89p534pzi","_id":"cl3zbjmlb002k7qh85sz60gei"},{"post_id":"cl3zbjmkv000m7qh8efcz279m","tag_id":"cl3zbjmla002b7qh8dvo69ars","_id":"cl3zbjmlb002l7qh884chaonu"},{"post_id":"cl3zbjmkv000m7qh8efcz279m","tag_id":"cl3zbjmla002g7qh8ejbk0wfn","_id":"cl3zbjmlb002n7qh8hjgsedbw"},{"post_id":"cl3zbjmkx000p7qh8hyk87hkc","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlb002q7qh80df8d295"},{"post_id":"cl3zbjmkx000p7qh8hyk87hkc","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlb002r7qh8d4n27l7a"},{"post_id":"cl3zbjmkx000p7qh8hyk87hkc","tag_id":"cl3zbjmlb002o7qh85gx42skk","_id":"cl3zbjmlc002t7qh8c0lt9gxq"},{"post_id":"cl3zbjmky000q7qh84g997iup","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlc002v7qh8fzty7qjs"},{"post_id":"cl3zbjmky000q7qh84g997iup","tag_id":"cl3zbjmlb002o7qh85gx42skk","_id":"cl3zbjmlc002w7qh8fnaqfy7e"},{"post_id":"cl3zbjmky000r7qh832x1183z","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlc00307qh8dzzg1i56"},{"post_id":"cl3zbjmky000r7qh832x1183z","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmld00317qh899li0lq7"},{"post_id":"cl3zbjmky000r7qh832x1183z","tag_id":"cl3zbjmlc002y7qh82e1g74lm","_id":"cl3zbjmld00337qh88caz8qpp"},{"post_id":"cl3zbjmkz000u7qh86qs092fm","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmle00367qh8f1ry2exe"},{"post_id":"cl3zbjmkz000u7qh86qs092fm","tag_id":"cl3zbjmld00327qh89cdzdohi","_id":"cl3zbjmle00377qh85qwj2j9f"},{"post_id":"cl3zbjmkz000u7qh86qs092fm","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmle00397qh81pliht2k"},{"post_id":"cl3zbjmkz000w7qh810gh6n3u","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlf003d7qh8dumxaeln"},{"post_id":"cl3zbjmkz000w7qh810gh6n3u","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlf003e7qh87q815mwe"},{"post_id":"cl3zbjmkz000w7qh810gh6n3u","tag_id":"cl3zbjmle003a7qh88fkh772s","_id":"cl3zbjmlf003g7qh8d6ou0eoo"},{"post_id":"cl3zbjmkz000w7qh810gh6n3u","tag_id":"cl3zbjmle003b7qh8apb14q7b","_id":"cl3zbjmlf003h7qh81dm65bg2"},{"post_id":"cl3zbjml0000z7qh84tjy0ipm","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlg003k7qh8erbf3mip"},{"post_id":"cl3zbjml0000z7qh84tjy0ipm","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlg003l7qh8a1319sn7"},{"post_id":"cl3zbjml0000z7qh84tjy0ipm","tag_id":"cl3zbjmlf003i7qh8eacdb7za","_id":"cl3zbjmlg003n7qh8ejj003xr"},{"post_id":"cl3zbjml100117qh8ad2ca8px","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlg003p7qh87fic35g0"},{"post_id":"cl3zbjml100117qh8ad2ca8px","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlg003q7qh8eko14rjx"},{"post_id":"cl3zbjml100137qh8ejthdj2e","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlh003t7qh82r7j99j4"},{"post_id":"cl3zbjml100137qh8ejthdj2e","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlh003u7qh81wauhjv2"},{"post_id":"cl3zbjml200157qh83nopgaq6","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmli003z7qh8dhxtgcvc"},{"post_id":"cl3zbjml200157qh83nopgaq6","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmli00407qh8054n4247"},{"post_id":"cl3zbjml200157qh83nopgaq6","tag_id":"cl3zbjmlh003w7qh83hge18wp","_id":"cl3zbjmli00427qh87bfg70uz"},{"post_id":"cl3zbjml200157qh83nopgaq6","tag_id":"cl3zbjmlh003x7qh862d1f8oj","_id":"cl3zbjmli00437qh89ohe0jtl"},{"post_id":"cl3zbjml200187qh8ajx16ua0","tag_id":"cl3zbjmlh003y7qh8cdy14rq4","_id":"cl3zbjmli00467qh80qgh2g7p"},{"post_id":"cl3zbjml200187qh8ajx16ua0","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmli00477qh8gpk9d4iy"},{"post_id":"cl3zbjml200187qh8ajx16ua0","tag_id":"cl3zbjmli00447qh89et36852","_id":"cl3zbjmlj00497qh85mu9cdby"},{"post_id":"cl3zbjml300197qh8ejj280o3","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlj004c7qh8cfui7w8w"},{"post_id":"cl3zbjml300197qh8ejj280o3","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlj004d7qh818ag3k6d"},{"post_id":"cl3zbjml300197qh8ejj280o3","tag_id":"cl3zbjmlb002o7qh85gx42skk","_id":"cl3zbjmlj004f7qh8629s0wnq"},{"post_id":"cl3zbjml3001a7qh8dbl8cbk9","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlk004i7qh89ceye2fq"},{"post_id":"cl3zbjml3001a7qh8dbl8cbk9","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlk004j7qh8d5uwdozg"},{"post_id":"cl3zbjml3001a7qh8dbl8cbk9","tag_id":"cl3zbjmlb002o7qh85gx42skk","_id":"cl3zbjmlk004l7qh8g4r212n7"},{"post_id":"cl3zbjml4001d7qh83erw7z6c","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmll004p7qh8hjchbphe"},{"post_id":"cl3zbjml4001d7qh83erw7z6c","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmll004q7qh8c9sk52ii"},{"post_id":"cl3zbjml4001d7qh83erw7z6c","tag_id":"cl3zbjmlk004m7qh8gzyzgczv","_id":"cl3zbjmll004s7qh8ct2kc15c"},{"post_id":"cl3zbjml4001d7qh83erw7z6c","tag_id":"cl3zbjmlk004n7qh81eidakg6","_id":"cl3zbjmll004t7qh870uxhs1m"},{"post_id":"cl3zbjml4001f7qh80pc5dird","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmll004w7qh83u8j4ky9"},{"post_id":"cl3zbjml4001f7qh80pc5dird","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmll004x7qh8d62tae27"},{"post_id":"cl3zbjml4001f7qh80pc5dird","tag_id":"cl3zbjmlb002o7qh85gx42skk","_id":"cl3zbjmlm004z7qh8fh7d0wnm"},{"post_id":"cl3zbjml4001h7qh8b5jb3i6x","tag_id":"cl3zbjmll004v7qh86goq1r7o","_id":"cl3zbjmlm00517qh85i5r9hvi"},{"post_id":"cl3zbjml4001h7qh8b5jb3i6x","tag_id":"cl3zbjml8001v7qh8ae2sd6v5","_id":"cl3zbjmlm00527qh8b6l36u7t"},{"post_id":"cl3zbjml5001i7qh834w56987","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlm00557qh8f4ke74iy"},{"post_id":"cl3zbjml5001i7qh834w56987","tag_id":"cl3zbjmlm00537qh8f3xe7t4d","_id":"cl3zbjmlm00567qh84vqf1ilr"},{"post_id":"cl3zbjml5001k7qh8d6od20vx","tag_id":"cl3zbjmlm00547qh85lgral9p","_id":"cl3zbjmln00597qh8gink6gjn"},{"post_id":"cl3zbjml5001k7qh8d6od20vx","tag_id":"cl3zbjmla002b7qh8dvo69ars","_id":"cl3zbjmln005a7qh876hod4w7"},{"post_id":"cl3zbjml6001l7qh8hc5y1k8z","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlo005e7qh86mds56qg"},{"post_id":"cl3zbjml6001l7qh8hc5y1k8z","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlo005f7qh8fa30cma0"},{"post_id":"cl3zbjml6001l7qh8hc5y1k8z","tag_id":"cl3zbjmln005c7qh8c08974d4","_id":"cl3zbjmlo005h7qh86le86p22"},{"post_id":"cl3zbjml6001n7qh831ts330r","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlo005k7qh88mon1bbs"},{"post_id":"cl3zbjml6001n7qh831ts330r","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlo005l7qh8hxvo5d6m"},{"post_id":"cl3zbjml6001n7qh831ts330r","tag_id":"cl3zbjmlc002y7qh82e1g74lm","_id":"cl3zbjmlp005n7qh88zlm25ub"},{"post_id":"cl3zbjml7001p7qh8cm8uedp0","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlp005q7qh8cmww1m0g"},{"post_id":"cl3zbjml7001p7qh8cm8uedp0","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlp005r7qh89z2pf1vi"},{"post_id":"cl3zbjml7001p7qh8cm8uedp0","tag_id":"cl3zbjmlb002o7qh85gx42skk","_id":"cl3zbjmlp005t7qh8hxdp2h07"},{"post_id":"cl3zbjml7001s7qh87wccel03","tag_id":"cl3zbjml8001v7qh8ae2sd6v5","_id":"cl3zbjmlq005v7qh8d132bqdu"},{"post_id":"cl3zbjml7001s7qh87wccel03","tag_id":"cl3zbjmlp005s7qh87j068txc","_id":"cl3zbjmlq005w7qh82zhl6gk6"},{"post_id":"cl3zbjml8001u7qh806cp9499","tag_id":"cl3zbjmlb002j7qh85dgcht1r","_id":"cl3zbjmlq00607qh81de859fr"},{"post_id":"cl3zbjml8001u7qh806cp9499","tag_id":"cl3zbjmlc002y7qh82e1g74lm","_id":"cl3zbjmlq00617qh847zl1m1o"},{"post_id":"cl3zbjml8001u7qh806cp9499","tag_id":"cl3zbjmlb002m7qh81n0ubey7","_id":"cl3zbjmlq00627qh88s918hau"},{"post_id":"cl3zbjml8001u7qh806cp9499","tag_id":"cl3zbjmle003b7qh8apb14q7b","_id":"cl3zbjmlq00637qh86dvc6w54"}],"Tag":[{"name":"AQS","_id":"cl3zbjmko00047qh8dszrbly5"},{"name":"线程安全","_id":"cl3zbjmkr000a7qh849sl8k31"},{"name":"AtomInteger","_id":"cl3zbjmks000d7qh8b2qt8nq9"},{"name":"LongAdder","_id":"cl3zbjmku000i7qh8bpe5cdpd"},{"name":"CAS","_id":"cl3zbjmkx000o7qh87m3r1b5o"},{"name":"hexo","_id":"cl3zbjmkz000s7qh8c1xw3gcn"},{"name":"教程","_id":"cl3zbjml0000x7qh8cu77duiv"},{"name":"并发","_id":"cl3zbjml100127qh8aij34hz5"},{"name":"线程同步","_id":"cl3zbjml200177qh8cimigxwu"},{"name":"blog","_id":"cl3zbjml4001g7qh8eo6a47ox"},{"name":"工具","_id":"cl3zbjml5001j7qh8fnq49qj7"},{"name":"Java","_id":"cl3zbjml6001m7qh8gj5i2v7b"},{"name":"IO","_id":"cl3zbjml7001r7qh8a8ybh0x3"},{"name":"面试","_id":"cl3zbjml8001v7qh8ae2sd6v5"},{"name":"基础","_id":"cl3zbjml9001z7qh82xyyh75v"},{"name":"k8s","_id":"cl3zbjml900207qh80rbn9wtj"},{"name":"RESTful","_id":"cl3zbjml900237qh8cfs04snj"},{"name":"HATEOAS","_id":"cl3zbjml900267qh84xq55tby"},{"name":"锁","_id":"cl3zbjml900277qh8gosv2hqf"},{"name":"java","_id":"cl3zbjmla002b7qh8dvo69ars"},{"name":"关键字","_id":"cl3zbjmla002c7qh89p534pzi"},{"name":"ThreadLocal","_id":"cl3zbjmla002g7qh8ejbk0wfn"},{"name":"leetcode","_id":"cl3zbjmlb002j7qh85dgcht1r"},{"name":"算法","_id":"cl3zbjmlb002m7qh81n0ubey7"},{"name":"dp","_id":"cl3zbjmlb002o7qh85gx42skk"},{"name":"树","_id":"cl3zbjmlc002y7qh82e1g74lm"},{"name":"二叉树","_id":"cl3zbjmld00327qh89cdzdohi"},{"name":"链表","_id":"cl3zbjmle003a7qh88fkh772s"},{"name":"递归","_id":"cl3zbjmle003b7qh8apb14q7b"},{"name":"二分查找","_id":"cl3zbjmlf003i7qh8eacdb7za"},{"name":"迭代","_id":"cl3zbjmlh003w7qh83hge18wp"},{"name":"数组","_id":"cl3zbjmlh003x7qh862d1f8oj"},{"name":"leedcode","_id":"cl3zbjmlh003y7qh8cdy14rq4"},{"name":"滑动窗口","_id":"cl3zbjmli00447qh89et36852"},{"name":"hash","_id":"cl3zbjmlk004m7qh8gzyzgczv"},{"name":"优化","_id":"cl3zbjmlk004n7qh81eidakg6"},{"name":"死锁","_id":"cl3zbjmll004v7qh86goq1r7o"},{"name":"stack","_id":"cl3zbjmlm00537qh8f3xe7t4d"},{"name":"线程池","_id":"cl3zbjmlm00547qh85lgral9p"},{"name":"组合","_id":"cl3zbjmln005c7qh8c08974d4"},{"name":"项目","_id":"cl3zbjmlp005s7qh87j068txc"}]}}